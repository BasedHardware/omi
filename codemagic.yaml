workflows:
  ios-prod-testflight:
    name: Release iOS to Testflight
    instance_type: mac_mini_m2
    max_build_duration: 120
    integrations:
      app_store_connect: codemagic_v3
    environment:
      ios_signing:
        provisioning_profiles:
          - codemagic_v3
          - codemagic_v2_OneSignalNotificationServiceExten
        certificates:
          - codemagic_v3
      groups:
        - app_env
        - firebase
        - shorebird
      vars:
        APP_ID: 6502156163
      flutter: 3.32.4
      xcode: 16.4
      cocoapods: 1.16.2
    cache:
      cache_paths:
        - $HOME/.pub-cache
        - $HOME/.gradle/caches
        - $HOME/Library/Caches/CocoaPods
    triggering:
      events:
        - tag
      tag_patterns:
        - pattern: "v*-ios-cm"
          include: true
        - pattern: "v*-mobile-cm"
          include: true
    working_directory: app
    scripts:
      - name: Installing Opus
        script: |
          brew install opus
          brew install opus-tools

      - name: Set up Firebase
        script: |
          dart pub global activate flutterfire_cli

          # https://github.com/invertase/flutterfire_cli/issues/233
          echo "$FIREBASE_SERVICE_ACCOUNT_KEY" > ./firebase_key.json
          flutterfire config \
            --platforms="android,ios" \
            --out=lib/firebase_options_prod.dart \
            --ios-bundle-id=com.friend-app-with-wearable.ios12 \
            --android-package-name=com.friend.ios \
            --android-out=android/app/src/prod/  \
            --ios-out=ios/Config/Prod/ \
            --service-account="./firebase_key.json" \
            --project="based-hardware" \
            --ios-target="Runner" \
            --yes

          # DEV, should remove
          echo "$FIREBASE_SERVICE_ACCOUNT_DEV_KEY" > ./firebase_dev_key.json
          flutterfire config \
            --platforms="android,ios" \
            --out=lib/firebase_options_dev.dart \
            --ios-bundle-id=com.friend-app-with-wearable.ios12.development \
            --android-package-name=com.friend.ios.dev \
            --android-out=android/app/src/dev/  \
            --ios-out=ios/Config/Dev/ \
            --service-account="./firebase_dev_key.json" \
            --project="based-hardware-dev" \
            --ios-target="Runner" \
            --yes

      - name: Set up App .env
        script: |
          echo OPENAI_API_KEY=$OPENAI_API_KEY >> .env
          echo INSTABUG_API_KEY=$INSTABUG_API_KEY >> .env
          echo MIXPANEL_PROJECT_TOKEN=$MIXPANEL_PROJECT_TOKEN >> .env
          echo ONESIGNAL_APP_ID=$ONESIGNAL_APP_ID >> .env
          echo API_BASE_URL=$API_BASE_URL >> .env
          echo GROWTHBOOK_API_KEY=$GROWTHBOOK_API_KEY >> .env
          echo GOOGLE_MAPS_API_KEY=$GOOGLE_MAPS_API_KEY >> .env
          echo INTERCOM_APP_ID=$INTERCOM_APP_ID >> .env
          echo INTERCOM_IOS_API_KEY=$INTERCOM_IOS_API_KEY >> .env
          echo POSTHOG_API_KEY=$POSTHOG_API_KEY >> .env
          echo GOOGLE_CLIENT_ID=$GOOGLE_CLIENT_ID >> .env
          echo GOOGLE_CLIENT_SECRET=$GOOGLE_CLIENT_SECRET >> .env

      - name: Set up Google Service Info
        script: |
          # TODO: check why we need this ?
          echo "$GOOGLE_INFO_PLIST_KEY" > "$(pwd)/ios/Runner/GoogleService-Info.plist"

      - name: Generate iOS Custom Config (Custom.xcconfig)
        script: |
          sh scripts/generate_ios_custom_config.sh ios/Config/Prod/GoogleService-Info.plist ios/Flutter/

      - name: Get Flutter packages
        script: |
          flutter pub get

      - name: Run build runner
        script: |
          dart run build_runner build --delete-conflicting-outputs

      - name: Installs pod
        script: |
          cd ios && pod install --repo-update

      - name: Flutter build ipa
        script: |
          # Set up code signing settings on Xcode project
          # -> $HOME/export_options.plist
          xcode-project use-profiles

          # Build
          BUILD_NAME=$(echo $CM_TAG | sed 's/^v\(.*\)+\(.*\)-mobile-cm$/\1/')
          BUILD_NUMBER=$(echo $CM_TAG | sed 's/^v\(.*\)+\(.*\)-mobile-cm$/\2/')
          flutter build ipa \
            --release \
            --build-name=$BUILD_NAME \
            --build-number=$BUILD_NUMBER \
            --flavor prod \
            --export-options-plist=$HOME/export_options.plist

      - name: Generate and zip dSYM files
        script: |
          # Create a directory for dSYM files
          mkdir -p build/ios/dSYMs

          # Copy dSYM files to the new directory
          cp -R build/ios/archive/Runner.xcarchive/dSYMs/* build/ios/dSYMs/

          # Zip dSYM files
          cd build/ios/dSYMs
          zip -r ios_prod_dsyms.zip *.dSYM
          mv ios_prod_dsyms.zip ../../..
          cd ../../..

      - name: Upload dSYM to Instabug
        script: |
          curl -X POST "https://api.instabug.com/api/sdk/v3/symbols_files" \
            -F os=iOS \
            -F symbols_file=@"ios_prod_dsyms.zip" \
            -F application_token="$INSTABUG_API_KEY"

    artifacts:
      - build/ios/ipa/*.ipa
      - /tmp/xcodebuild_logs/*.log
      - flutter_drive.log
      - ios_prod_dsyms.zip
    publishing:
      email:
        recipients:
          - ngocthinhdp@gmail.com
          - joan@basedhardware.com
          - nik@basedhardware.com
          - mohsin.lp710@gmail.com
        notify:
          success: true
          failure: false
      app_store_connect:
        auth: integration
        submit_to_testflight: true
        beta_groups:
          - Internal
          - Discord Folks
        submit_to_app_store: false

  android-prod-internal:
    name: Release Android Internal Production
    instance_type: mac_mini_m2
    max_build_duration: 120
    environment:
      android_signing:
        - prod_android_upload_keystore
      groups:
        - app_env
        - firebase
        - google_play
        - shorebird
      vars:
        PACKAGE_NAME: "com.friend.ios"
        JAVA_TOOL_OPTIONS: "-Xmx8g"
      flutter: 3.32.4
      xcode: 16.4
      cocoapods: 1.16.2
      java: 21
    cache:
      cache_paths:
        - $HOME/opt
        - $HOME/.pub-cache
        - $HOME/.gradle/caches
    triggering:
      events:
        - tag
      tag_patterns:
        - pattern: "v*-android-cm"
          include: true
        - pattern: "v*-mobile-cm"
          include: true
    working_directory: app
    scripts:
      - name: Installing Android SDK
        script: |
          export ANDROID_HOME="$HOME/opt/android-sdk"
          if [ ! -d "$ANDROID_HOME" ]; then
            echo "$ANDROID_HOME does not exist. Installing..."

            mkdir -p $ANDROID_HOME

            # Install cmdline-tools 11076708; NDK: 27.0.12077973
            cd "$HOME/opt" && \
            curl --fail --show-error --silent --connect-timeout 10.00 --max-time 120.00 \
              --output commandlinetools-mac-11076708_latest.zip \
              https://dl.google.com/android/repository/commandlinetools-mac-11076708_latest.zip && \
            7z -bd x commandlinetools-mac-11076708_latest.zip && \
            mkdir -p $ANDROID_HOME && \
            yes | cmdline-tools/bin/sdkmanager --sdk_root=${ANDROID_HOME} "tools" && \
            yes | cmdline-tools/bin/sdkmanager --sdk_root=${ANDROID_HOME} "cmdline-tools;latest" && \
            yes | cmdline-tools/bin/sdkmanager --sdk_root=${ANDROID_HOME} "ndk;27.0.12077973" && \
            yes | cmdline-tools/bin/sdkmanager --sdk_root=${ANDROID_HOME} --licenses  && \
            cmdline-tools/bin/sdkmanager --sdk_root=${ANDROID_HOME} --list
          fi

          if [ -d "$ANDROID_HOME" ]; then
            echo "$ANDROID_HOME does exist. Setting up env..."

            # PATH
            export PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/tools/bin:$ANDROID_HOME/platform-tools

            # Override ENV
            echo ANDROID_HOME="$ANDROID_HOME" >> $CM_ENV
            echo ANDROID_SDK_ROOT="$ANDROID_HOME" >> $CM_ENV
            echo PATH="$PATH" >> $CM_ENV
          fi

      - name: Installing Opus
        script: |
          brew install opus
          brew install opus-tools

      - name: Set up Firebase
        script: |
          dart pub global activate flutterfire_cli

          # https://github.com/invertase/flutterfire_cli/issues/233
          echo "$FIREBASE_SERVICE_ACCOUNT_KEY" > ./firebase_key.json
          flutterfire config \
            --platforms="android,ios" \
            --out=lib/firebase_options_prod.dart \
            --ios-bundle-id=com.friend-app-with-wearable.ios12 \
            --android-package-name=com.friend.ios \
            --android-out=android/app/src/prod/  \
            --ios-out=ios/Config/Prod/ \
            --service-account="./firebase_key.json" \
            --project="based-hardware" \
            --ios-target="Runner" \
            --yes

          # DEV, should remove
          echo "$FIREBASE_SERVICE_ACCOUNT_DEV_KEY" > ./firebase_dev_key.json
          flutterfire config \
            --platforms="android,ios" \
            --out=lib/firebase_options_dev.dart \
            --ios-bundle-id=com.friend-app-with-wearable.ios12.development \
            --android-package-name=com.friend.ios.dev \
            --android-out=android/app/src/dev/  \
            --ios-out=ios/Config/Dev/ \
            --service-account="./firebase_dev_key.json" \
            --project="based-hardware-dev" \
            --ios-target="Runner" \
            --yes

      - name: Set up local.properties
        script: |
          echo "flutter.sdk=$HOME/programs/flutter" > "$(pwd)/android/local.properties"
          echo "sdk.dir=$ANDROID_HOME" >> "$(pwd)/android/local.properties"

      - name: Set up App .env
        script: |
          echo OPENAI_API_KEY=$OPENAI_API_KEY >> .env
          echo INSTABUG_API_KEY=$INSTABUG_API_KEY >> .env
          echo MIXPANEL_PROJECT_TOKEN=$MIXPANEL_PROJECT_TOKEN >> .env
          echo ONESIGNAL_APP_ID=$ONESIGNAL_APP_ID >> .env
          echo API_BASE_URL=$API_BASE_URL >> .env
          echo GROWTHBOOK_API_KEY=$GROWTHBOOK_API_KEY >> .env
          echo GOOGLE_MAPS_API_KEY=$GOOGLE_MAPS_API_KEY >> .env
          echo INTERCOM_APP_ID=$INTERCOM_APP_ID >> .env
          echo INTERCOM_ANDROID_API_KEY=$INTERCOM_ANDROID_API_KEY >> .env
          echo GOOGLE_CLIENT_ID=$GOOGLE_CLIENT_ID >> .env
          echo GOOGLE_CLIENT_SECRET=$GOOGLE_CLIENT_SECRET >> .env

      - name: Get Flutter packages
        script: |
          flutter packages pub get
      - name: Run build runner
        script: |
          dart run build_runner build --delete-conflicting-outputs
      - name: Build AAB with Flutter
        script: |
          # TODO: Don't tricky
          # Tricky Opus > build.gradle, force use NDK 27 to deal with "ERROR: Unknown host CPU architecture: arm64"
          # echo "Z3JvdXAgJ2V1LmVwbncub3B1c19mbHV0dGVyX2FuZHJvaWQnDQp2ZXJzaW9uICcxLjAnDQoNCmJ1aWxkc2NyaXB0IHsNCiAgICByZXBvc2l0b3JpZXMgew0KICAgICAgICBnb29nbGUoKQ0KICAgICAgICBtYXZlbkNlbnRyYWwoKQ0KICAgIH0NCg0KICAgIGRlcGVuZGVuY2llcyB7DQogICAgICAgIGNsYXNzcGF0aCAnY29tLmFuZHJvaWQudG9vbHMuYnVpbGQ6Z3JhZGxlOjcuMy4wJw0KICAgIH0NCn0NCg0Kcm9vdFByb2plY3QuYWxscHJvamVjdHMgew0KICAgIHJlcG9zaXRvcmllcyB7DQogICAgICAgIGdvb2dsZSgpDQogICAgICAgIG1hdmVuQ2VudHJhbCgpDQogICAgfQ0KfQ0KDQphcHBseSBwbHVnaW46ICdjb20uYW5kcm9pZC5saWJyYXJ5Jw0KDQphbmRyb2lkIHsNCiAgICBpZiAocHJvamVjdC5hbmRyb2lkLmhhc1Byb3BlcnR5KCJuYW1lc3BhY2UiKSkgew0KICAgICAgICBuYW1lc3BhY2UgJ2V1LmVwbncub3B1c19mbHV0dGVyX2FuZHJvaWQnDQogICAgfQ0KDQogICAgY29tcGlsZVNka1ZlcnNpb24gMzMNCg0KICAgIGNvbXBpbGVPcHRpb25zIHsNCiAgICAgICAgc291cmNlQ29tcGF0aWJpbGl0eSBKYXZhVmVyc2lvbi5WRVJTSU9OXzFfOA0KICAgICAgICB0YXJnZXRDb21wYXRpYmlsaXR5IEphdmFWZXJzaW9uLlZFUlNJT05fMV84DQogICAgfQ0KDQogICAgZGVmYXVsdENvbmZpZyB7DQogICAgICAgIG1pblNka1ZlcnNpb24gMTkNCiAgICB9DQogICAgZXh0ZXJuYWxOYXRpdmVCdWlsZCB7DQogICAgICAgIG5ka0J1aWxkew0KICAgICAgICAgICAgcGF0aCAiQW5kcm9pZC5tayINCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIGRlcGVuZGVuY2llcyB7DQogICAgICAgIHRlc3RJbXBsZW1lbnRhdGlvbiAnanVuaXQ6anVuaXQ6NC4xMy4yJw0KICAgICAgICB0ZXN0SW1wbGVtZW50YXRpb24gJ29yZy5tb2NraXRvOm1vY2tpdG8tY29yZTo1LjAuMCcNCiAgICB9DQoNCiAgICB0ZXN0T3B0aW9ucyB7DQogICAgICAgIHVuaXRUZXN0cy5hbGwgew0KICAgICAgICAgICAgdGVzdExvZ2dpbmcgew0KICAgICAgICAgICAgICAgZXZlbnRzICJwYXNzZWQiLCAic2tpcHBlZCIsICJmYWlsZWQiLCAic3RhbmRhcmRPdXQiLCAic3RhbmRhcmRFcnJvciINCiAgICAgICAgICAgICAgIG91dHB1dHMudXBUb0RhdGVXaGVuIHtmYWxzZX0NCiAgICAgICAgICAgICAgIHNob3dTdGFuZGFyZFN0cmVhbXMgPSB0cnVlDQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQogICAgbmRrVmVyc2lvbiAnMjcuMC4xMjA3Nzk3MycNCn0NCg==" | base64 -d > "$HOME/.pub-cache/hosted/pub.dev/opus_flutter_android-3.0.1/android/build.gradle"

          # Should use bump version automatically by CI
          BUILD_NAME=$(echo $CM_TAG | sed 's/^v\(.*\)+\(.*\)-mobile-cm$/\1/')
          BUILD_NUMBER=$(echo $CM_TAG | sed 's/^v\(.*\)+\(.*\)-mobile-cm$/\2/')
          flutter build appbundle \
            --release \
            --build-name=$BUILD_NAME \
            --build-number=$BUILD_NUMBER \
            --flavor prod

      - name: Extracting version and Upload mapping file to Instabug
        script: |
          echo "Instabug mapping files uploader"

          GIT_TAG=$(git describe --tags --match="v*-mobile-cm" --abbrev=0)
          VERSION_STRING=$(echo $GIT_TAG | sed 's/-mobile-cm$//')
          echo "Version String: $VERSION_STRING"
          VERSION_NAME="$(echo $VERSION_STRING | cut -d'+' -f1 | sed 's/^v//')"
          echo "VERSION_NAME=$VERSION_NAME"
          VERSION_CODE="$(echo $VERSION_STRING | cut -d'+' -f2)"
          echo "VERSION_CODE=$VERSION_CODE"
          APP_TOKEN="$INSTABUG_API_KEY"
          PATH_TO_MAPPING_FILE="build/app/outputs/mapping/prodRelease/mapping.txt"
          VERSION='{"code":"'"$VERSION_CODE"'","name":"'"$VERSION_NAME"'"}'

          if [ ! -f $PATH_TO_MAPPING_FILE ]; then
          echo "File not found!"
          exit 0
          fi

          echo "Mapping file found! Uploading..."

          ENDPOINT="https://api.instabug.com/api/sdk/v3/symbols_files"
          STATUS=$(curl "${ENDPOINT}" --write-out %{http_code} --silent --output /dev/null -F os=android -F app_version="${VERSION}" -F symbols_file=@"${PATH_TO_MAPPING_FILE}" -F application_token="${APP_TOKEN}")
          if [ $STATUS -ne 200 ]; then
          echo "Error while uploading mapping files"
          exit 0
          fi


          echo "Success! Your mapping files got uploaded successfully"

    artifacts:
      - build/**/outputs/**/*.aab
      - build/**/outputs/**/mapping.txt
      - flutter_drive.log
    publishing:
      email:
        recipients:
          - ngocthinhdp@gmail.com
          - joan@basedhardware.com
          - nik@basedhardware.com
          - mohsin.lp710@gmail.com
        notify:
          success: true
          failure: false
      google_play:
        credentials: $GCLOUD_SERVICE_ACCOUNT_CREDENTIALS
        track: "internal"
        submit_as_draft: false
        release_promotion:
          track: "alpha"

  ios-prod-patch:
    name: Patch iOS to Production
    instance_type: mac_mini_m2
    max_build_duration: 120
    integrations:
      app_store_connect: codemagic_v3
    environment:
      ios_signing:
        provisioning_profiles:
          - codemagic_v3
          - codemagic_v2_OneSignalNotificationServiceExten
        certificates:
          - codemagic_v3
      groups:
        - app_env
        - firebase
        - shorebird
      vars:
        APP_ID: 6502156163
      flutter: 3.32.4
      xcode: 16.4
      cocoapods: 1.16.2
    cache:
      cache_paths:
        - $HOME/.pub-cache
        - $HOME/.gradle/caches
        - $HOME/Library/Caches/CocoaPods
    triggering:
      events:
        - tag
      tag_patterns:
        - pattern: "v*-ios-patch-cm"
          include: true
        - pattern: "v*-mobile-patch-cm"
          include: true
    working_directory: app
    scripts:
      - name: Installing Shorebird
        script: |
          # Install the Shorebird CLI
          curl --proto '=https' --tlsv1.2 https://raw.githubusercontent.com/shorebirdtech/install/main/install.sh -sSf | bash
          # Set Shorebird PATH
          echo PATH="/Users/builder/.shorebird/bin:$PATH" >> $CM_ENV

      - name: Installing Opus
        script: |
          brew install opus
          brew install opus-tools

      - name: Set up Firebase
        script: |
          dart pub global activate flutterfire_cli

          # https://github.com/invertase/flutterfire_cli/issues/233
          echo "$FIREBASE_SERVICE_ACCOUNT_KEY" > ./firebase_key.json
          flutterfire config \
            --platforms="android,ios" \
            --out=lib/firebase_options_prod.dart \
            --ios-bundle-id=com.friend-app-with-wearable.ios12 \
            --android-package-name=com.friend.ios \
            --android-out=android/app/src/prod/  \
            --ios-out=ios/Config/Prod/ \
            --service-account="./firebase_key.json" \
            --project="based-hardware" \
            --ios-target="Runner" \
            --yes

          # DEV, should remove
          echo "$FIREBASE_SERVICE_ACCOUNT_DEV_KEY" > ./firebase_dev_key.json
          flutterfire config \
            --platforms="android,ios" \
            --out=lib/firebase_options_dev.dart \
            --ios-bundle-id=com.friend-app-with-wearable.ios12.development \
            --android-package-name=com.friend.ios.dev \
            --android-out=android/app/src/dev/  \
            --ios-out=ios/Config/Dev/ \
            --service-account="./firebase_dev_key.json" \
            --project="based-hardware-dev" \
            --ios-target="Runner" \
            --yes

      - name: Set up App .env
        script: |
          echo OPENAI_API_KEY=$OPENAI_API_KEY >> .env
          echo INSTABUG_API_KEY=$INSTABUG_API_KEY >> .env
          echo MIXPANEL_PROJECT_TOKEN=$MIXPANEL_PROJECT_TOKEN >> .env
          echo ONESIGNAL_APP_ID=$ONESIGNAL_APP_ID >> .env
          echo API_BASE_URL=$API_BASE_URL >> .env
          echo GROWTHBOOK_API_KEY=$GROWTHBOOK_API_KEY >> .env
          echo GOOGLE_MAPS_API_KEY=$GOOGLE_MAPS_API_KEY >> .env
          echo INTERCOM_APP_ID=$INTERCOM_APP_ID >> .env
          echo INTERCOM_IOS_API_KEY=$INTERCOM_IOS_API_KEY >> .env
          echo POSTHOG_API_KEY=$POSTHOG_API_KEY >> .env
          echo GOOGLE_CLIENT_ID=$GOOGLE_CLIENT_ID >> .env
          echo GOOGLE_CLIENT_SECRET=$GOOGLE_CLIENT_SECRET >> .env

      - name: Set up Google Service Info
        script: |
          # TODO: check why we need this ?
          echo "$GOOGLE_INFO_PLIST_KEY" > "$(pwd)/ios/Runner/GoogleService-Info.plist"

      - name: Get Flutter packages
        script: |
          flutter pub get

      - name: Run build runner
        script: |
          dart run build_runner build --delete-conflicting-outputs

      - name: Installs pod
        script: |
          cd ios && pod install --repo-update

      - name: Patch iOS app with Shorebird
        script: |
          # Set up code signing settings on Xcode project
          # -> $HOME/export_options.plist
          xcode-project use-profiles

          # Build
          shorebird patch ios \
            --flavor prod -- \
            --export-options-plist=$HOME/export_options.plist
    artifacts:
      - build/ios/ipa/*.ipa
      - /tmp/xcodebuild_logs/*.log
      - flutter_drive.log
    publishing:
      email:
        recipients:
          - ngocthinhdp@gmail.com
          - joan@basedhardware.com
          - nik@basedhardware.com
          - mohsin.lp710@gmail.com
        notify:
          success: true
          failure: false

  android-prod-patch:
    name: Patch Android to Production
    instance_type: mac_mini_m2
    max_build_duration: 120
    environment:
      android_signing:
        - prod_android_upload_keystore
      groups:
        - app_env
        - firebase
        - shorebird
      vars:
        PACKAGE_NAME: "com.friend.ios"
      flutter: 3.32.4
      xcode: 16.4
      cocoapods: 1.16.2
      java: 21
    cache:
      cache_paths:
        - $HOME/opt
        - $HOME/.pub-cache
        - $HOME/.gradle/caches
    triggering:
      events:
        - tag
      tag_patterns:
        - pattern: "v*-android-patch-cm"
          include: true
        - pattern: "v*-mobile-patch-cm"
          include: true
    working_directory: app
    scripts:
      - name: Installing Shorebird
        script: |
          # Install the Shorebird CLI
          curl --proto '=https' --tlsv1.2 https://raw.githubusercontent.com/shorebirdtech/install/main/install.sh -sSf | bash
          # Set Shorebird PATH
          echo PATH="/Users/builder/.shorebird/bin:$PATH" >> $CM_ENV

      - name: Installing Android SDK
        script: |
          export ANDROID_HOME="$HOME/opt/android-sdk"
          if [ ! -d "$ANDROID_HOME" ]; then
            echo "$ANDROID_HOME does not exist. Installing..."

            mkdir -p $ANDROID_HOME

            # Install cmdline-tools 11076708; NDK: 27.0.12077973
            cd "$HOME/opt" && \
            curl --fail --show-error --silent --connect-timeout 10.00 --max-time 120.00 \
              --output commandlinetools-mac-11076708_latest.zip \
              https://dl.google.com/android/repository/commandlinetools-mac-11076708_latest.zip && \
            7z -bd x commandlinetools-mac-11076708_latest.zip && \
            mkdir -p $ANDROID_HOME && \
            yes | cmdline-tools/bin/sdkmanager --sdk_root=${ANDROID_HOME} "tools" && \
            yes | cmdline-tools/bin/sdkmanager --sdk_root=${ANDROID_HOME} "cmdline-tools;latest" && \
            yes | cmdline-tools/bin/sdkmanager --sdk_root=${ANDROID_HOME} "ndk;27.0.12077973" && \
            yes | cmdline-tools/bin/sdkmanager --sdk_root=${ANDROID_HOME} --licenses  && \
            cmdline-tools/bin/sdkmanager --sdk_root=${ANDROID_HOME} --list
          fi

          if [ -d "$ANDROID_HOME" ]; then
            echo "$ANDROID_HOME does exist. Setting up env..."

            # PATH
            export PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/tools/bin:$ANDROID_HOME/platform-tools

            # Override ENV
            echo ANDROID_HOME="$ANDROID_HOME" >> $CM_ENV
            echo ANDROID_SDK_ROOT="$ANDROID_HOME" >> $CM_ENV
            echo PATH="$PATH" >> $CM_ENV
          fi

      - name: Installing Opus
        script: |
          brew install opus
          brew install opus-tools

      - name: Set up Firebase
        script: |
          dart pub global activate flutterfire_cli

          # https://github.com/invertase/flutterfire_cli/issues/233
          echo "$FIREBASE_SERVICE_ACCOUNT_KEY" > ./firebase_key.json
          flutterfire config \
            --platforms="android,ios" \
            --out=lib/firebase_options_prod.dart \
            --ios-bundle-id=com.friend-app-with-wearable.ios12 \
            --android-package-name=com.friend.ios \
            --android-out=android/app/src/prod/  \
            --ios-out=ios/Config/Prod/ \
            --service-account="./firebase_key.json" \
            --project="based-hardware" \
            --ios-target="Runner" \
            --yes

          # DEV, should remove
          echo "$FIREBASE_SERVICE_ACCOUNT_DEV_KEY" > ./firebase_dev_key.json
          flutterfire config \
            --platforms="android,ios" \
            --out=lib/firebase_options_dev.dart \
            --ios-bundle-id=com.friend-app-with-wearable.ios12.development \
            --android-package-name=com.friend.ios.dev \
            --android-out=android/app/src/dev/  \
            --ios-out=ios/Config/Dev/ \
            --service-account="./firebase_dev_key.json" \
            --project="based-hardware-dev" \
            --ios-target="Runner" \
            --yes

      - name: Set up local.properties
        script: |
          echo "flutter.sdk=$HOME/programs/flutter" > "$(pwd)/android/local.properties"
          echo "sdk.dir=$ANDROID_HOME" >> "$(pwd)/android/local.properties"

      - name: Set up App .env
        script: |
          echo OPENAI_API_KEY=$OPENAI_API_KEY >> .env
          echo INSTABUG_API_KEY=$INSTABUG_API_KEY >> .env
          echo MIXPANEL_PROJECT_TOKEN=$MIXPANEL_PROJECT_TOKEN >> .env
          echo ONESIGNAL_APP_ID=$ONESIGNAL_APP_ID >> .env
          echo API_BASE_URL=$API_BASE_URL >> .env
          echo GROWTHBOOK_API_KEY=$GROWTHBOOK_API_KEY >> .env
          echo GOOGLE_MAPS_API_KEY=$GOOGLE_MAPS_API_KEY >> .env
          echo INTERCOM_APP_ID=$INTERCOM_APP_ID >> .env
          echo INTERCOM_ANDROID_API_KEY=$INTERCOM_ANDROID_API_KEY >> .env
          echo GOOGLE_CLIENT_ID=$GOOGLE_CLIENT_ID >> .env
          echo GOOGLE_CLIENT_SECRET=$GOOGLE_CLIENT_SECRET >> .env

      - name: Get Flutter packages
        script: |
          flutter packages pub get
      - name: Run build runner
        script: |
          dart run build_runner build --delete-conflicting-outputs
      - name: Patch Android app with Shorebird
        script: |
          # TODO: Don't tricky
          # Tricky Opus > build.gradle, force use NDK 27 to deal with "ERROR: Unknown host CPU architecture: arm64"
          # echo "Z3JvdXAgJ2V1LmVwbncub3B1c19mbHV0dGVyX2FuZHJvaWQnDQp2ZXJzaW9uICcxLjAnDQoNCmJ1aWxkc2NyaXB0IHsNCiAgICByZXBvc2l0b3JpZXMgew0KICAgICAgICBnb29nbGUoKQ0KICAgICAgICBtYXZlbkNlbnRyYWwoKQ0KICAgIH0NCg0KICAgIGRlcGVuZGVuY2llcyB7DQogICAgICAgIGNsYXNzcGF0aCAnY29tLmFuZHJvaWQudG9vbHMuYnVpbGQ6Z3JhZGxlOjcuMy4wJw0KICAgIH0NCn0NCg0Kcm9vdFByb2plY3QuYWxscHJvamVjdHMgew0KICAgIHJlcG9zaXRvcmllcyB7DQogICAgICAgIGdvb2dsZSgpDQogICAgICAgIG1hdmVuQ2VudHJhbCgpDQogICAgfQ0KfQ0KDQphcHBseSBwbHVnaW46ICdjb20uYW5kcm9pZC5saWJyYXJ5Jw0KDQphbmRyb2lkIHsNCiAgICBpZiAocHJvamVjdC5hbmRyb2lkLmhhc1Byb3BlcnR5KCJuYW1lc3BhY2UiKSkgew0KICAgICAgICBuYW1lc3BhY2UgJ2V1LmVwbncub3B1c19mbHV0dGVyX2FuZHJvaWQnDQogICAgfQ0KDQogICAgY29tcGlsZVNka1ZlcnNpb24gMzMNCg0KICAgIGNvbXBpbGVPcHRpb25zIHsNCiAgICAgICAgc291cmNlQ29tcGF0aWJpbGl0eSBKYXZhVmVyc2lvbi5WRVJTSU9OXzFfOA0KICAgICAgICB0YXJnZXRDb21wYXRpYmlsaXR5IEphdmFWZXJzaW9uLlZFUlNJT05fMV84DQogICAgfQ0KDQogICAgZGVmYXVsdENvbmZpZyB7DQogICAgICAgIG1pblNka1ZlcnNpb24gMTkNCiAgICB9DQogICAgZXh0ZXJuYWxOYXRpdmVCdWlsZCB7DQogICAgICAgIG5ka0J1aWxkew0KICAgICAgICAgICAgcGF0aCAiQW5kcm9pZC5tayINCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIGRlcGVuZGVuY2llcyB7DQogICAgICAgIHRlc3RJbXBsZW1lbnRhdGlvbiAnanVuaXQ6anVuaXQ6NC4xMy4yJw0KICAgICAgICB0ZXN0SW1wbGVtZW50YXRpb24gJ29yZy5tb2NraXRvOm1vY2tpdG8tY29yZTo1LjAuMCcNCiAgICB9DQoNCiAgICB0ZXN0T3B0aW9ucyB7DQogICAgICAgIHVuaXRUZXN0cy5hbGwgew0KICAgICAgICAgICAgdGVzdExvZ2dpbmcgew0KICAgICAgICAgICAgICAgZXZlbnRzICJwYXNzZWQiLCAic2tpcHBlZCIsICJmYWlsZWQiLCAic3RhbmRhcmRPdXQiLCAic3RhbmRhcmRFcnJvciINCiAgICAgICAgICAgICAgIG91dHB1dHMudXBUb0RhdGVXaGVuIHtmYWxzZX0NCiAgICAgICAgICAgICAgIHNob3dTdGFuZGFyZFN0cmVhbXMgPSB0cnVlDQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQogICAgbmRrVmVyc2lvbiAnMjcuMC4xMjA3Nzk3MycNCn0NCg==" | base64 -d > "$HOME/.pub-cache/hosted/pub.dev/opus_flutter_android-3.0.1/android/build.gradle"

          # Should use bump version automatically by CI
          shorebird patch android \
            --flavor prod
    artifacts:
      - build/**/outputs/**/*.aab
      - build/**/outputs/**/mapping.txt
      - flutter_drive.log
    publishing:
      email:
        recipients:
          - ngocthinhdp@gmail.com
          - joan@basedhardware.com
          - nik@basedhardware.com
          - mohsin.lp710@gmail.com
        notify:
          success: true
          failure: false

  macos-prod-testflight:
    name: Release macOS to TestFlight
    instance_type: mac_mini_m2
    max_build_duration: 120
    integrations:
      app_store_connect: codemagic_v3
    environment:
      groups:
        - app_env
        - firebase
        - appstore_credentials
      vars:
        APP_ID: 6502156163
        BUNDLE_ID: "com.friend-app-with-wearable.ios12"
      flutter: 3.32.4
      xcode: 16.4
      cocoapods: 1.16.2
    cache:
      cache_paths:
        - $HOME/.pub-cache
        - $HOME/.gradle/caches
        - $HOME/Library/Caches/CocoaPods
    triggering:
      events:
        - tag
      tag_patterns:
        - pattern: "v*-ios-cm"
          include: true
        - pattern: "v*-mobile-cm"
          include: true
    working_directory: app
    scripts:
      - name: Installing Opus
        script: |
          brew install opus
          brew install opus-tools

      - name: Set up Firebase
        script: |
          dart pub global activate flutterfire_cli

          echo "$FIREBASE_SERVICE_ACCOUNT_KEY" > ./firebase_key.json
          flutterfire config \
            --platforms="macos" \
            --out=lib/firebase_options_prod.dart \
            --macos-bundle-id=com.friend-app-with-wearable.ios12 \
            --macos-out=macos/Config/Prod/ \
            --service-account="./firebase_key.json" \
            --project="based-hardware" \
            --macos-target="Runner" \
            --yes

          # DEV, should remove after adding conditional import in main.dart
          echo "$FIREBASE_SERVICE_ACCOUNT_DEV_KEY" > ./firebase_dev_key.json
          flutterfire config \
            --platforms="macos" \
            --out=lib/firebase_options_dev.dart \
            --macos-bundle-id=com.friend-app-with-wearable.ios12.development \
            --macos-out=macos/Config/Dev/ \
            --service-account="./firebase_dev_key.json" \
            --project="based-hardware-dev" \
            --macos-target="Runner" \
            --yes

      - name: Set up macOS GoogleService-Info.plist from environment
        script: |
          echo "$GOOGLE_INFO_PLIST_KEY" > "$(pwd)/macos/GoogleService-Info.plist"

      - name: Set up App .env
        script: |
          echo OPENAI_API_KEY=$OPENAI_API_KEY >> .env
          echo INSTABUG_API_KEY=$INSTABUG_API_KEY >> .env
          echo MIXPANEL_PROJECT_TOKEN=$MIXPANEL_PROJECT_TOKEN >> .env
          echo ONESIGNAL_APP_ID=$ONESIGNAL_APP_ID >> .env
          echo API_BASE_URL=$API_BASE_URL >> .env
          echo GROWTHBOOK_API_KEY=$GROWTHBOOK_API_KEY >> .env
          echo GOOGLE_MAPS_API_KEY=$GOOGLE_MAPS_API_KEY >> .env
          echo INTERCOM_APP_ID=$INTERCOM_APP_ID >> .env
          echo INTERCOM_MACOS_API_KEY=$INTERCOM_MACOS_API_KEY >> .env
          echo POSTHOG_API_KEY=$POSTHOG_API_KEY >> .env
          echo GOOGLE_CLIENT_ID=$GOOGLE_CLIENT_ID >> .env
          echo GOOGLE_CLIENT_SECRET=$GOOGLE_CLIENT_SECRET >> .env

      - name: Get Flutter packages
        script: |
          flutter pub get

      - name: Run build runner
        script: |
          dart run build_runner build --delete-conflicting-outputs

      - name: Install CocoaPods dependencies
        script: |
          cd macos && pod install --repo-update

      - name: Set up keychain to be used for code signing using Codemagic CLI 'keychain' command
        script: keychain initialize

      - name: Set up provisioning profiles from environment variables
        script: | 
          PROFILES_HOME="$HOME/Library/MobileDevice/Provisioning Profiles"
          mkdir -p "$PROFILES_HOME"
          PROFILE_PATH="$(mktemp "$PROFILES_HOME"/$(uuidgen).mobileprovision)"
          echo ${CM_PROVISIONING_PROFILE} | base64 --decode > "$PROFILE_PATH"
          echo "Saved provisioning profile $PROFILE_PATH"

      - name: Set up signing certificate
        script: | 
          echo $CM_CERTIFICATE | base64 --decode > /tmp/certificate.p12
          if [ -z ${CM_CERTIFICATE_PASSWORD+x} ]; then
              # when using a certificate that is not password-protected
              keychain add-certificates --certificate /tmp/certificate.p12
          else
              # when using a password-protected certificate
              keychain add-certificates --certificate /tmp/certificate.p12 --certificate-password $CM_CERTIFICATE_PASSWORD
          fi

          echo $CM_INSTALLER_CERTIFICATE | base64 --decode > /tmp/installer_certificate.p12
          if [ -z ${CM_INSTALLER_CERTIFICATE_PASSWORD+x} ]; then
              # when using a certificate that is not password-protected
              keychain add-certificates --certificate /tmp/installer_certificate.p12
          else
              # when using a password-protected certificate
              keychain add-certificates --certificate /tmp/installer_certificate.p12 --certificate-password $CM_INSTALLER_CERTIFICATE_PASSWORD
          fi

      - name: Set up code signing settings on Xcode project
        script: xcode-project use-profiles

      - name: Flutter build macOS
        script: |
          # Enable macOS desktop support
          flutter config --enable-macos-desktop
          
          # Build
          BUILD_NAME=$(echo $CM_TAG | sed 's/^v\(.*\)+\(.*\)-mobile-cm$/\1/')
          BUILD_NUMBER=$(echo $CM_TAG | sed 's/^v\(.*\)+\(.*\)-mobile-cm$/\2/')
          flutter build macos \
            --release \
            --build-name=$BUILD_NAME \
            --build-number=$BUILD_NUMBER \
            --flavor prod

      - name: Package application
        script: | 
          set -x
    
          # Find the built app
          APP_NAME=$(find $(pwd) -name "*.app")  
          cd $(dirname "$APP_NAME")
    
          # Get certificate names
          APP_CERT_NAME=$(keychain list-certificates \
            | jq -r '.[]
            | select(.common_name | test("3rd Party Mac Developer Application"))
            | .common_name' \
            | head -1)
          
          INSTALLER_CERT_NAME=$(keychain list-certificates \
            | jq -r '.[]
            | select(.common_name | test("3rd Party Mac Developer Installer"))
            | .common_name' \
            | head -1)
          
          echo "Using certificates: '$APP_CERT_NAME' / '$INSTALLER_CERT_NAME'"
          
          if [ -z "$APP_CERT_NAME" ] || [ -z "$INSTALLER_CERT_NAME" ]; then
            echo "Missing certificates. Available certificates:"
            keychain list-certificates | jq -r '.[].common_name'
            exit 1
          fi
          
          # Find the provisioning profile that was saved
          PROFILE_PATH=$(find "$HOME/Library/MobileDevice/Provisioning Profiles" -name "*.mobileprovision" | head -1)
          
          if [ -z "$PROFILE_PATH" ]; then
            echo "No provisioning profile found!"
            exit 1
          fi
          
          echo "Using provisioning profile: $PROFILE_PATH"
          
          # Embed the provisioning profile in the app bundle
          cp "$PROFILE_PATH" "$APP_NAME/Contents/embedded.provisionprofile"
          
          # Use the existing entitlements file
          ENTITLEMENTS_FILE="$(pwd)/../../../../../macos/Runner/RunnerRelease-prod.entitlements"
          
          echo "Using entitlements file: $ENTITLEMENTS_FILE"
          
          if [ ! -f "$ENTITLEMENTS_FILE" ]; then
            echo "Entitlements file not found!"
            exit 1
          fi
          
          # Debug: Show entitlements and profile contents
          echo "=== Entitlements ==="
          cat "$ENTITLEMENTS_FILE"
          
          echo "=== Profile entitlements ==="
          security cms -D -i "$PROFILE_PATH" | plutil -extract Entitlements xml1 -o - -
          
          # Sign the app bundle with embedded profile
          echo "Signing app bundle..."
          codesign --force --sign "$APP_CERT_NAME" \
            --entitlements "$ENTITLEMENTS_FILE" \
            --options runtime \
            --deep \
            "$APP_NAME"
          
          # Verify signature
          codesign --verify --deep --strict "$APP_NAME"
          echo "=== Final app entitlements ==="
          codesign -d --entitlements - "$APP_NAME"
          
          # Create and sign package
          PACKAGE_NAME=$(basename "$APP_NAME" .app).pkg
          xcrun productbuild --component "$APP_NAME" /Applications/ unsigned.pkg
          xcrun productsign --sign "$INSTALLER_CERT_NAME" unsigned.pkg "$PACKAGE_NAME"
          rm -f unsigned.pkg
          

    artifacts:
      - build/macos/**/*.pkg
      - build/macos/Build/Products/Release-prod/*.app
      - /tmp/xcodebuild_logs/*.log
      - flutter_drive.log
    publishing:
      email:
        recipients:
          - ngocthinhdp@gmail.com
          - joan@basedhardware.com
          - nik@basedhardware.com
          - mohsin.lp710@gmail.com
        notify:
          success: false
          failure: false
      app_store_connect:
        api_key: $APP_STORE_CONNECT_PRIVATE_KEY
        key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER
        issuer_id: $APP_STORE_CONNECT_ISSUER_ID

        submit_to_testflight: true
        beta_groups:
          - Internal
        submit_to_app_store: false
