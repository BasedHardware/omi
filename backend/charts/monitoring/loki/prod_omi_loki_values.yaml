loki_anchors:
  chunkBucketName: &chunkBucketName prod-omi-loki-chunks
  rulerBucketName: &rulerBucketName prod-omi-loki-ruler
  nodeSelector: &nodeSelector
    service: monitoring
    env: prod

loki:
  schemaConfig:
    configs:
      - from: "2024-04-01"
        store: tsdb
        object_store: gcs
        schema: v13
        index:
          prefix: loki_index_
          period: 24h
  storage_config:
    gcs:
      bucket_name: *chunkBucketName # Your actual gcs bucket name, for example, loki-gcp-chunks
  ingester:
    chunk_encoding: snappy
  pattern_ingester:
    enabled: true
  limits_config:
    allow_structured_metadata: true
    volume_enabled: true
    retention_period: 360h # 15 days retention
  compactor:
    retention_enabled: true 
    delete_request_store: gcs
  ruler:
    enable_api: true
    storage_config:
      type: gcs
      gcs_storage_config:
        region: us-central1 # The GCS region, for example europe-west4
        bucketnames: *rulerBucketName # Your actual gcs bucket name, for example, loki-gcp-ruler
      alertmanager_url: http://prod-kube-prometheus-stack-alertmanager:9093 # The URL of the Alertmanager to send alerts (Prometheus, Mimir, etc.)
  querier:
    max_concurrent: 4
  storage:
    type: gcs
    bucketNames:
      chunks: *chunkBucketName # Your actual gcs bucket name, for example, loki-gcp-chunks
      ruler: *rulerBucketName # Your actual gcs bucket name, for example, loki-gcp-ruler

serviceAccount:
  create: false
  name: prod-omi-loki-ksa

deploymentMode: Distributed

ingester:
  replicas: 2
  zoneAwareReplication:
    enabled: false
  nodeSelector:
    <<: *nodeSelector
  
querier:
  replicas: 2
  maxUnavailable: 2
  nodeSelector:
    <<: *nodeSelector

queryFrontend:
  replicas: 2
  maxUnavailable: 1
  nodeSelector:
    <<: *nodeSelector

queryScheduler:
  replicas: 2
  nodeSelector:
    <<: *nodeSelector

distributor:
  replicas: 2
  maxUnavailable: 2
  nodeSelector:
    <<: *nodeSelector

compactor:
  replicas: 1
  nodeSelector:
    <<: *nodeSelector

indexGateway:
  replicas: 2
  maxUnavailable: 1
  nodeSelector:
    <<: *nodeSelector

ruler:
  replicas: 1
  maxUnavailable: 1
  nodeSelector:
    <<: *nodeSelector

# This exposes the Loki gateway so it can be written to and queried externaly
gateway:
  service:
    type: ClusterIP
  basicAuth: 
    enabled: true
    existingSecret: loki-basic-auth
  nodeSelector:
    <<: *nodeSelector

memcached:
  nodeSelector:
    <<: *nodeSelector

# Since we are using basic auth, we need to pass the username and password to the canary
lokiCanary:
  extraArgs:
    - -pass=$(LOKI_PASS)
    - -user=$(LOKI_USER)
  extraEnv:
    - name: LOKI_PASS
      valueFrom:
        secretKeyRef:
          name: canary-basic-auth
          key: password
    - name: LOKI_USER
      valueFrom:
        secretKeyRef:
          name: canary-basic-auth
          key: username
  nodeSelector:
    <<: *nodeSelector

# Enable minio for storage
minio:
  enabled: false

backend:
  replicas: 0
read:
  replicas: 0
write:
  replicas: 0

singleBinary:
  replicas: 0
