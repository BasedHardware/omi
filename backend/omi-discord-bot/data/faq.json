[
  {
    "question": "What is Omi?",
    "answer": "Omi is an open-source AI wearable that captures conversations, provides summaries and action items, and can perform actions for you. It connects to a mobile device for high-quality transcriptions of meetings, chats, and voice memos."
  },
  {
    "question": "What are the key features of Omi?",
    "answer": "Omi is fully open-source and provides live transcription, conversation memory, offline transcription, an app marketplace, and speaker diarization. It offers a low-powered Bluetooth connection that can capture audio for over 24 hours on a small button battery."
  },
  {
    "question": "Where can I buy an Omi device?",
    "answer": "You can buy the Omi Developer Kit or the Omi Glass Dev Kit from the homepage or documentation website. The links are: https://omi.me/products/omi-dev-kit-2 and https://omi.me/glass."
  },
  {
    "question": "How can I get started with Omi in under 2 minutes?",
    "answer": "First, download the Omi app from the Google Play Store or Apple App Store. Next, create and copy a webhook URL from webhook.site. Then, in the Omi app, go to 'Explore' -> 'Create an App', select a capability, paste the webhook URL, and install the app. Finally, start speaking to see a real-time transcript on webhook.site."
  },
  {
    "question": "What kind of resources are available in the Omi repository?",
    "answer": "The Omi repository contains the code for the Omi device, Omi Glass, the Omi app, AI personas (web version), and SDKs. It also includes documentation on app setup, building the device, installing firmware, and creating custom apps."
  },
  {
    "question": "How can I contribute to the Omi project?",
    "answer": "You can contribute by checking the contributions guide, looking for paid bounties, reviewing current issues on GitHub, joining the Discord community, or building your own plugins and integrations."
  },
  {
    "question": "What is the license for Omi?",
    "answer": "Omi is available under the MIT License."
  },
  {
    "question": "What is the Omi Python SDK and how do I install it?",
    "answer": "The Omi Python SDK is a pip-installable library for connecting to Omi devices over Bluetooth, decoding Opus-encoded audio, and transcribing it in real time using Deepgram. You must first install the Opus audio codec library on your system (e.g., `brew install opus` on macOS). You can install the SDK from PyPI with `pip install omi-sdk` or from source after cloning the repository with `pip install -e .`."
  },
  {
    "question": "How do I get started with the Omi DevKit 2?",
    "answer": "To get started with the Omi DevKit 2, you can order an assembled device from the Based Hardware website. Alternatively, you can update the firmware through the Omi AI app, download a pre-built version from the Omi Github repo, or compile it yourself by following the firmware compilation guide."
  },
  {
    "question": "What are the core functionalities of the Omi backend?",
    "answer": "The Omi backend processes and analyzes data (converting audio to text, extracting meaning, and creating structured information), stores and manages memories, facilitates intelligent conversations, and integrates with external services."
  },
  {
    "question": "How does memory post-processing work in the Omi backend?",
    "answer": "Memory post-processing is initiated by a POST request from the Omi App to the backend. The backend retrieves the memory from Firestore, uploads the audio to Google Cloud Storage, and then uses FAL.ai WhisperX for high-quality transcription. The new transcript is cleaned and formatted into segments. A speech profile matching function uses a Speechbrain model to identify speakers and update the segments. The memory is then reprocessed to extract new structured data, regenerate embeddings, and optionally perform emotional analysis using the Hume API. Finally, the updated memory is saved back to Firestore and the vector database."
  },
  {
    "question": "How do I set up my environment for Omi backend development?",
    "answer": "To set up your environment for Omi backend development, you need a Google Cloud Project with Firebase enabled, and API keys for OpenAI, Deepgram, Redis, and Pinecone. You must install the Google Cloud SDK, enable the Cloud Resource Manager API and Firebase Management API, and authenticate with Google Cloud. Python, `git`, `ffmpeg`, and `opus` must be installed. You also need to clone the backend repository, set up a `.env` file with all the required API keys and credentials, and install Python dependencies, preferably in a virtual environment."
  },
  {
    "question": "How do I use the SwiftWhisper package in Xcode?",
    "answer": "To use the SwiftWhisper package in Xcode, you add the package URL `https://github.com/exPHAT/SwiftWhisper.git` to your project's dependencies and set the dependency rule to the 'master' branch. You then import `SwiftWhisper` into your code and can transcribe audio frames using the `transcribe` method. You can also implement `WhisperDelegate` to get progress updates, new segments, and completion or error notifications."
  },
  {
    "question": "What are the specifications for the omiGlass DevKit hardware components?",
    "answer": "The omiGlass DevKit hardware components include a Seeed Studio XIAO ESP32 S3 Sense board, six 150mAh batteries or similar, one 250mAh battery, wires, and hinges. The current design does not include a switch, but a switch can be added. A 3D printer is also needed for the hardware components if building your own."
  },
  {
    "question": "How do I install the Omi React Native SDK in my project?",
    "answer": "To install the Omi React Native SDK, you can run `npm install @omiai/omi-react-native` or `yarn add @omiai/omi-react-native`. The SDK also relies on `react-native-ble-plx`, which you must install separately. After installing these dependencies, you must run `cd ios && pod install` for iOS projects."
  },
  {
    "question": "What is the `omi-scan` command-line tool used for in the Omi Python SDK?",
    "answer": "The `omi-scan` command-line tool is used to scan for nearby Bluetooth devices. The output shows a list of devices with their names and MAC addresses, which you can then use to connect to a specific Omi device."
  },
  {
    "question": "What is the Omi DevKit 2, and what are its key features?",
    "answer": "The Omi DevKit 2 is an upgraded version of the DevKit 1, retaining the necklace form factor but adding an 8GB onboard storage and a speaker. It replaces the on/off switch with a programmable button and can operate in standalone mode, but still requires the Omi app for processing. It runs on the Xiao nRF52840 SoC."
  },
  {
    "question": "What are the common issues and solutions for the Omi React Native SDK?",
    "answer": "Common issues include build failures with native module errors on iOS (solution: run `pod install` in the `ios` directory and open the `.xcworkspace` file), devices not being found during scanning (solution: ensure Bluetooth and permissions are enabled), and connection failures (solution: restart the device and check the battery)."
  },
  {
    "question": "How do I build the Omi firmware with Docker?",
    "answer": "To build the Omi firmware with Docker, you first need to have Docker installed. Then, from the root of the repository, you can run `./omi/firmware/scripts/build-docker.sh`. The script will start a Docker container, install dependencies, build the firmware, and create an OTA package at `firmware/build/docker_build/zephyr.zip`."
  },
  {
    "question": "What is the purpose of the `docs.json` file in Mintlify documentation?",
    "answer": "The `docs.json` file is the core configuration file for a Mintlify site. It defines global settings such as the project name, navigation menu structure, logo, favicon, colors, and links. It's updated every time a new page is added to the site."
  },
  {
    "question": "What is the `backend_scripts_rag_README.md` file about?",
    "answer": "The `backend_scripts_rag_README.md` file provides setup and troubleshooting instructions for a backend script related to RAG (Retrieval-Augmented Generation). The steps involve navigating to the `scripts/rag` directory, replacing a `uid` variable, setting an `OPENAI_API_KEY` environment variable, setting up an `.env` file, and running the `streamlit` app. Troubleshooting tips are also provided for errors related to embeddings."
  },
  {
    "question": "What is the `docs_doc_info_Support.mdx` file about?",
    "answer": "The `docs_doc_info_Support.mdx` file provides information on how to get support for the Omi project. For open-source support, it suggests opening an issue on GitHub and/or asking in the Discord Community. For commercial support, license inquiries, or other questions, it directs users to contact `team@basedhardware.com`."
  },
  {
    "question": "How do you add a new file to the documentation?",
    "answer": "To add a new file to the documentation, you create an MDX file and update the `docs.json` file with the new page's path. The new file will not appear in the navigation menu automatically and must be explicitly added to the `navigation` field in `docs.json`."
  },
  {
    "question": "What are Omi's Swift, Python, and React Native SDKs used for?",
    "answer": "Omi's SDKs are used for building on top of the Omi AI wearable in different languages. They allow you to connect to any Omi device, perform transcription either locally or using Deepgram, and don't depend on Omi's infrastructure."
  },
  {
    "question": "What is the Omi Python SDK used for?",
    "answer": "The Omi Python SDK is a library for connecting to Omi wearable devices over Bluetooth, decoding Opus-encoded audio, and transcribing it in real time using Deepgram. It provides core functions like `listen_to_omi` for connecting to a device, `OmiOpusDecoder` for audio decoding, and `transcribe` for real-time transcription. It also includes a command-line tool, `omi-scan`, to find nearby devices."
  },
  {
    "question": "How can I contribute to the Omi project?",
    "answer": "You can contribute to the Omi project by forking the repository, making changes, and creating a Pull Request. There are paid bounties available for some tasks, which can be found by filtering issues with the 'Paid Bounty' label. You can also contribute to the documentation by modifying files in the GitHub docs folder. Significant contributions can earn you rewards like a free DEV KIT device, transcription credits, or a special Contributor role in Discord."
  },
  {
    "question": "How does memory embedding work in the Omi backend?",
    "answer": "Memory embedding is a process that is triggered when a new or reprocessed memory is created. The `process_memory` function calls `upsert_vector`, which extracts structured data like the memory's title, overview, and category. This data is then used by the `generate_embedding` function to call the OpenAI Embeddings API to create a numerical vector. Finally, the vector, along with metadata such as the memory ID and user ID, is stored in a Pinecone vector database. This process enables semantic search and efficient filtering of memories."
  },
  {
    "question": "What is the `plugins_instructions_gcal_README.md` file about?",
    "answer": "The `plugins_instructions_gcal_README.md` file describes an OMI and Google Calendar integration. The integration automatically creates Google Calendar events from OMI memories and is synchronized in real-time. It uses secure OAuth2 authentication with Google, and events are organized in a user's chosen Google Calendar. The document provides a link to connect Google Calendar and recommends creating a dedicated calendar for OMI events."
  },
  {
    "question": "What is the `plugins_instructions_notion-crm_README.md` file about?",
    "answer": "The `plugins_instructions_notion-crm_README.md` file provides instructions for setting up a Notion CRM plugin for Omi. It explains that users need to authenticate 'Notion x Omi' by accepting a template and then selecting it from their available pages."
  },
  {
    "question": "What is the `plugins_instructions_reflect_README.md` file about?",
    "answer": "The `plugins_instructions_reflect_README.md` file provides instructions for setting up an OMI and Reflect integration. The integration captures OMI memories and transcripts, maps conversations to Reflect Daily notes, and consolidates action items. It uses secure OAuth2 authentication, and notes are searchable in Reflect. The document provides a link to start the authorization process and details the configuration options for the integration."
  },
  {
    "question": "What is the `plugins_instructions_multion-amazon_README.md` file about?",
    "answer": "The `plugins_instructions_multion-amazon_README.md` file describes a plugin for Omi that allows users to automatically add books mentioned in their conversations to their Amazon cart using MultiOn. The setup process involves opening a link on a desktop, copying a user ID, and then entering that ID into another link to authenticate. The document notes that this is an experimental feature."
  },
  {
    "question": "What is the Omi Simulator?",
    "answer": "The Omi Simulator is an early-version simulator of the Omi device. A limitation is that on Mac, the advertised name for the BLE Peripheral is the name of the machine. The latest Omi app discovers and connects by service UUID, but older versions of the app looked for a device named 'Friend' or 'Super'."
  },
  {
    "question": "What are the key components of the Omi Triangle v2?",
    "answer": "The Omi Triangle v2 is an upgraded version of Omi Triangle v1 with added memory, a speaker, and a configurable momentary button. Key components include a Seeed Studio XIAO nRF52840 Sense, an Adafruit 5769 Audio BFF Add-On, an OWS-091630W50A-8 Speaker, a 250mAh LiPo battery, a 4x4x1.5 SMD Button, solid core wires, a micro SD card, and a 3d-printed enclosure."
  },
  {
    "question": "How do you assemble the Omi Triangle v2?",
    "answer": "The assembly guide for Omi Triangle v2 has 11 steps, with an estimated time of 50 minutes. Key steps include preparing the Adafruit 5769 board, soldering the XIAO nRF52840 Sense board to it, attaching and soldering the button, soldering wires and the speaker, attaching the battery, cleaning the board, and finally assembling the device. There are also optional steps for microphone noise isolation and a specific section for correcting the speaker function for earlier models."
  },
  {
    "question": "What is the `omiGlass_README.md` file about?",
    "answer": "The `omiGlass_README.md` file provides instructions for setting up the omiGlass DevKit, an open-source smart glasses project. The document covers prerequisites like installing Ollama and the Arduino IDE, lists the necessary hardware components, and details the steps for software setup and firmware installation. It also includes a section on how to contribute to the project."
  },
  {
    "question": "What are the requirements for building the Omi app?",
    "answer": "The Omi app is a Flutter-based mobile application. To build it, you need the Flutter SDK, Xcode (for iOS), Android Studio (for Android), CocoaPods (for iOS), and the NDK (for building Opus for ARM devices). The `app/setup.sh` script is available for automatic setup for iOS, Android, and macOS."
  },
  {
    "question": "What is the Omi App-device protocol for BLE?",
    "answer": "The Omi app discovers devices by scanning for BLE devices with the name `Omi`. The device implements a standard Battery Service (UUID 0x180F) and a Device Information Service (UUID 0x180A). It also has a service with UUID `19B10000-E8F2-537E-4F6C-D104768A1214` for streaming audio data. This audio service has two characteristics: one for audio data (UUID `19B10001-E8F2-537E-4F6C-D104768A1214`) and one for codec type (UUID `19B10002-E8F2-537E-4F6C-D104768A1214`)."
  },
  {
    "question": "How do I install the Omi Swift library?",
    "answer": "To install the Omi Swift library, you need to open an Xcode project, navigate to File -> Swift Packages -> Add Package Dependency, and paste the repository URL `https://github.com/BasedHardware/omi`. You also need to add the `NSBluetoothAlwaysUsageDescription` key with a description to your project's `Info.plist` file."
  },
  {
    "question": "How is the Omi frontend application structured?",
    "answer": "The Omi frontend is a Next.js application built with the App Router. Its structure includes a `src` directory with subdirectories for `app` (Next.js pages), `components` (reusable UI), `constants` (app configuration), `hooks`, `lib` (utilities), `types` (TypeScript definitions), `utils`, and `actions` (server actions)."
  },
  {
    "question": "What is the purpose of the `docs_doc_developer_apps_Notifications.mdx` file?",
    "answer": "The `docs_doc_developer_apps_Notifications.mdx` file provides a guide on how to send direct text notifications to OMI users from an application. It details the required headers and query parameters for the `POST /v2/integrations/{app_id}/notification` endpoint, and provides a Node.js code example for implementation. It also includes best practices for rate limiting, content, error handling, and security, as well as a table of common error response codes."
  },
  {
    "question": "What is the purpose of the `docs_doc_info_Disclaimer.mdx` file?",
    "answer": "The `docs_doc_info_Disclaimer.mdx` file states that the Omi device is a prototype project provided 'as is' without any warranty. It also notes that the use of the device should comply with all local laws and regulations regarding privacy and data protection."
  },
  {
    "question": "What is the `web_personas-open-source_README.md` file about?",
    "answer": "The `web_personas-open-source_README.md` file describes 'Personas', an open-source AI chat platform built with Next.js, Firebase, and various AI APIs. It supports multiple AI models via OpenRouter, user authentication via Firebase, and has a real-time chat interface. The document lists required API keys (Firebase, OpenRouter, etc.), provides setup instructions for local development and Docker, and gives information on model selection and costs."
  },
  {
    "question": "What is the `omi_firmware_BUILD_AND_OTA_FLASH.md` file about?",
    "answer": "The `omi_firmware_BUILD_AND_OTA_FLASH.md` file provides a guide for building and flashing OMI firmware over-the-air (OTA) using nRF Connect SDK 2.9.0 and the nRF Connect mobile app. It details hardware and software prerequisites, gives an overview of the dual-core nRF5340 architecture, and provides steps for environment setup, building the firmware, and the OTA flashing process. It also includes a troubleshooting section for common build and flashing issues, as well as technical details on memory layout and security features."
  },
  {
    "question": "How do you manually update the firmware on DevKit versions (DK1 & DK2)?",
    "answer": "To manually update the firmware on DevKit devices, you must download the bootloader and the correct firmware `.uf2` file for your device. After ensuring the device battery is above 50% and using a direct USB connection, you need to double-click the reset button to enter DFU mode, which will make the device appear as a drive named `/Volumes/XIAO-SENSE`. You then drag the bootloader file onto the drive, wait for it to eject, re-enter DFU mode, and drag the firmware file."
  },
  {
    "question": "What are the different types of Omi Apps?",
    "answer": "The different types of Omi apps are Prompt-Based Apps and Integration Apps. Prompt-Based Apps include Chat Prompts (altering conversational style) and Memory Prompts (extracting information from conversations). Integration Apps include Memory Creation Triggers (activated when a new memory is created), Real-Time Transcript Processors (process transcripts as they occur), and Integration Actions (perform actions within the Omi ecosystem)."
  },
  {
    "question": "How do you manually update the firmware on the Consumer Version 1 (CV1) of the Omi device?",
    "answer": "To manually update the firmware on the Omi CV1, you need to use a special flashing cable that connects the device to a J-Link programmer. You must have J-Link software installed and the latest `merged.hex` and `merged_CPUNET.hex` files downloaded. You then navigate to the correct platform folder (`MAC/` or `WINDOWS/`) and run the J-Link command-line tool with a commander script to flash the network core first, and then the application core."
  },
  {
    "question": "What is the purpose of the `docs_doc_info_Privacy.mdx` file?",
    "answer": "The `docs_doc_info_Privacy.mdx` file is the Privacy Policy for Omi. It outlines the information collected, which includes personal information, conversational data, and usage data. It explains that this data is used for service enhancement, user communication, and innovation. The policy also details data storage and security measures, information sharing practices with third-party providers, and a user's privacy rights, such as access, update, and data deletion. It also mentions a wearable app version that does not collect data and stores everything locally."
  },
  {
    "question": "What is the `docs_doc_developer_apps_Import.mdx` file about?",
    "answer": "The `docs_doc_developer_apps_Import.mdx` file is a guide for creating integration apps with 'Imports'. Imports are predefined capabilities that allow an app to proactively create or modify data in the OMI ecosystem, unlike triggers which only respond to events. Currently supported imports include creating and reading conversations and memories. The document provides details on how to set up the app, generate API keys, and implement the API endpoints for these actions."
  },
  {
    "question": "What is the purpose of the `docs_doc_developer_backend_transcription.mdx` file?",
    "answer": "The `docs_doc_developer_backend_transcription.mdx` file outlines the real-time audio transcription process in the Omi application. It explains that audio is streamed via a WebSocket to the `/listen` endpoint, which is handled by the `websocket_endpoint` function in `routers/transcribe.py`. The backend integrates with Deepgram, configuring options like `language`, `sample_rate`, `diarize`, and `model`. The transcribed text is formatted into segments and sent back to the app via the WebSocket."
  },
  {
    "question": "What are the available configuration options for the `prometheus-adapter` Helm chart?",
    "answer": "The `prometheus-adapter` Helm chart can be configured with `prometheus.url` and `prometheus.port` to point to the correct Prometheus service endpoint. Users can also add custom rules to the `rules.custom` field. It can be configured to serve custom metrics, external metrics, and resource metrics, which can be used by Horizontal Pod Autoscalers. Note that enabling resource metrics will also deploy the resource metrics API, which provides the same functionality as metrics-server, and it is not possible to deploy both in the same cluster."
  },
  {
    "question": "How do you install AudioKit via Swift Package Manager?",
    "answer": "To install AudioKit via Swift Package Manager, you open Xcode, go to File -> Add Packages..., and enter the package URL `https://github.com/AudioKit/AudioKit/`. It is also recommended to add `https://swiftpackageindex.com/AudioKit/collection.json` as a package collection to get access to other AudioKit libraries. The package includes the `AudioKit`, `AudioKitEX`, and `CAudioKitEX` frameworks."
  },
  {
    "question": "What is the purpose of the `plugins_instructions_map-notes_README.md` file?",
    "answer": "The `plugins_instructions_map-notes_README.md` file describes a plugin called 'Map Notes' that allows users to create public location-based notes from their conversations. The notes are created using trigger phrases like `Start map note` or `Clip this` to begin and `End map note` or `Clip that` to end a recording. The plugin captures memories that include geolocation and adds them to a global map. The document provides a link to visit Map Notes and lists use cases like collaborative exploration and travel journaling."
  },
  {
    "question": "What is the purpose of the `plugins_instructions_SOS_README.md` file?",
    "answer": "The `plugins_instructions_SOS_README.md` file describes a plugin for Omi called 'SOS'. The plugin is set up by following authentication steps on a provided link. Once set up, if a user says 'SOS', a memory is created, and the plugin will contact the user's emergency contact."
  },
  {
    "question": "What is the purpose of the `plugins_instructions_heavenorhell_README.md` file?",
    "answer": "The `plugins_instructions_heavenorhell_README.md` file describes a plugin called 'Heaven or Hell'. The purpose of this plugin is to calculate points based on a user's everyday actions. The document provides a link to visit the leaderboard."
  },

  {
    "question": "How do I charge my Friend device?",
    "answer": "Make sure your device is turned on (red or blue light visible), connect the device to any compatible charger. The charging indicator in the app may not always be accurate. Note: The off/on switch physically disconnects the battery, so the device must be on to charge properly."
  },
  {
    "question": "Why won't my Friend device charge when it's switched off?",
    "answer": "The off/on switch of the device physically disconnects the battery. If you plug the device with the switch off, the board will never be able to send power to the battery as it's disconnected."
  },
  {
    "question": "How long does order processing take?",
    "answer": "Orders placed on weekends typically take about 48 hours to be fulfilled. Orders placed on weekdays are usually fulfilled within 24 hours."
  },
  {
    "question": "How do I track my Omi device shipment?",
    "answer": "After your order ships, you'll receive an email with a tracking link. Click the link to see real-time updates, carrier information, estimated delivery date, and you can subscribe to email notifications for key updates."
  },
  {
    "question": "What should I do if my tracking hasn't updated for several days?",
    "answer": "It's normal for tracking to pause for 6-7 days, especially between carriers or countries. Allow at least 10 days for updates. If no update after 10 days, contact help@omi.me for a replacement or refund."
  },
  {
    "question": "What does it mean when tracking shows my package arrived in my country but no further updates?",
    "answer": "Once your package arrives in your country, it's often handed over to your local carrier for last-mile delivery. Contact your local carrier with the tracking number for more details."
  },
  {
    "question": "How do conversations work in Omi?",
    "answer": "When you speak with the Omi device connected to your app, communications are recorded and summarized. Important action items and events are highlighted to form a 'Conversation'. The app waits 2 minutes after no sound to finalize the communication and create a Conversation."
  },
  {
    "question": "What are Omi Apps and what can they do?",
    "answer": "Omi apps are modular extensions that enhance core features. They can modify app behavior, analyze conversations, connect with external services, chat with memories, extract specific information, automate tasks, and analyze conversations in real-time for insights."
  },
  {
    "question": "What are the three types of Omi Apps?",
    "answer": "The three types are: 1) External Integrations (connect third-party services like Zapier, Notion, BookWatch), 2) Chat Apps (mimic personalities or provide advice), and 3) Memory Apps (triggered when memories are created, like Insight Extractor)."
  },
  {
    "question": "How do I update DevKit2 firmware?",
    "answer": "Open the case from the USB side, locate the reset button (red-colored), connect via USB-C cable, press reset button twice quickly, verify '/Volumes/XIAO-SENSE' appears, download bootloader 0.9.0.uf2 and Omi_DK2_v2.0.10.uf2 files, drag bootloader first, wait for ejection, double-tap reset again, drag firmware file, then restart the app."
  },
  {
    "question": "How do I charge DevKit2?",
    "answer": "For first-time users, press and hold the center for 2-3 seconds until you hear a buzzer and feel vibration with red light. Connect to any compatible charger - a blinking green light should appear indicating charging. If already connected to app, you'll see green light alongside red or blue light."
  },
  {
    "question": "What are the limitations of Friend V1 compared to DevKit2?",
    "answer": "Friend V1 limitations: always needed app connection, no onboard memory, no speaker or dedicated button. DevKit2 overcomes these with onboard SD card storage, programmable button, and small speaker."
  },
  {
    "question": "How do I use DevKit2's SD card sync feature?",
    "answer": "Since DevKit2 has inbuilt SD card, recordings are stored when not connected to app. To convert to memories, connect device to app, navigate to Settings > Device Settings > SD Card Sync, then import audio files and convert them to memories."
  },
  {
    "question": "How do I power on my Omi device?",
    "answer": "Simply press the device once. If you see a light or feel a small buzz, it's ready. If nothing happens, the battery might be empty - connect to charger and a light should appear within seconds."
  },
  {
    "question": "What do the different colored lights mean on my Omi device?",
    "answer": "Red light: device is on but not connected to Omi AI app. Light red/orange light: device is charging. Blue light: device is connected to Omi AI app and ready."
  },
  {
    "question": "How do I connect my Omi device to the app?",
    "answer": "Download the Omi AI app from App Store (iOS) or Play Store (Android), open the app and follow on-screen instructions to pair your device. When successful, the device light will turn blue."
  },
  {
    "question": "How do I talk with my Omi device?",
    "answer": "Once connected, tap and hold the device, ask any question or share a thought, release your finger when done speaking. Omi will reply via phone notification and save the response in the chat inside the app."
  },
  {
    "question": "How do I charge my Omi device?",
    "answer": "Make sure device is functioning properly and turned on (red or blue light visible), place it on the charger and connect charger to power adapter or laptop. Orange light should appear indicating charging. First-time charging may take a few seconds to 2-3 minutes for light to appear."
  },
  {
    "question": "What languages does Omi support?",
    "answer": "Omi supports Bulgarian, Catalan, Chinese, Czech, Danish, Dutch, English, Estonian, Finnish, French, German, Greek, Hindi, Hungarian, Indonesian, Italian, Japanese, Korean, Latvian, Lithuanian, Malay, Norwegian, Polish, Portuguese, Romanian, Russian, Slovak, Spanish, Swedish, Thai, Turkish, Ukrainian, and Vietnamese. English offers the best accuracy."
  },
  {
    "question": "Can Omi automatically switch between languages during a conversation?",
    "answer": "No, Omi cannot automatically switch between languages during a conversation. If you switch languages, you need to manually change the language in settings. Omi also cannot detect multiple languages in a single conversation."
  },
  {
    "question": "What should I do if my Omi device is not responding?",
    "answer": "First, press the device button to initiate response. Place device on charger correctly until lights turn on. Check charging cables, adapter, and power outlet functionality. Inspect charging port for debris. If still unresponsive, contact Omi support team for return or replacement options."
  },
  {
    "question": "Why is English the most recommended language for Omi?",
    "answer": "English is the most stable and well-supported language in Omi, ensuring highly accurate transcripts. Other languages may occasionally miss a few words due to stability issues."
  },
  {
    "question": "How does the DevKit2 programmable button work?",
    "answer": "DevKit2 includes a programmable button that can be configured for various commands, such as 'Hey Omi, turn on the lights' for home automation. While this functionality is not fully available yet, developers can contribute features and earn bounties."
  },
  {
    "question": "What makes DevKit2 different from Friend V1?",
    "answer": "DevKit2 doesn't need constant app connection, has onboard SD card memory, includes a programmable button, features a small speaker for audio feedback, and uses a custom PCB designed specifically for the product's requirements."
  },
  {
    "question": "When will I receive tracking information for my order?",
    "answer": "You'll receive an email confirmation with a tracking link after your order has shipped. This link allows you to follow your package in real time and view the estimated delivery date."
  },
  {
    "question": "What should I expect for delivery times?",
    "answer": "Delivery times vary by region and carrier. Use the tracking link for the most accurate updates. You can subscribe to email notifications on the tracking page for key updates like arrival at local facilities or delivery status."
  },
  {
    "question": "What happens if my package is delayed in customs?",
    "answer": "Some shipments take longer depending on customs and local delivery processes. Allow at least 10 days for updates. After 10 days with no update, contact help@omi.me with order details for replacement or refund."
  },
  {
    "question": "How do I know if my Friend device firmware needs updating?",
    "answer": "If you're seeing error messages in the app and your current firmware version is 1.0.2, you need to manually update to the latest version. Future updates will be available through the app with just a button press."
  },
  {
    "question": "What files do I need to update Friend device firmware?",
    "answer": "You need two files: bootloader0.9.0.uf2 and firmware1.0.4.uf2. Download both files to your computer before starting the update process."
  },
  {
    "question": "How do I know if my Friend device entered reset mode successfully?",
    "answer": "After pressing the reset button twice, your computer should recognize the device and you should see a drive named '/Volumes/XIAO-SENSE'. This indicates the device has successfully entered reset mode."
  },
  {
    "question": "What is the proper order for installing firmware files?",
    "answer": "First drag and drop the bootloader .uf2 file, wait for automatic ejection, then set device back to reset mode by double-tapping the button, and finally drag and drop the firmware file."
  },
  {
    "question": "Why does my Friend device automatically eject during firmware update?",
    "answer": "The device automatically ejects itself once the bootloader flashing process is complete. This is normal behavior - you need to set it back to reset mode for the firmware installation."
  },
  {
    "question": "What should I do after successfully updating firmware?",
    "answer": "As a final step, restart the app and you should be good to go with the latest device update. Future updates will be available through the app interface."
  },
  {
    "question": "Why doesn't my charging indicator show accurate percentage?",
    "answer": "The charging indicator in the app may not always be accurate. If you notice the percentage doesn't change while connected to charger, don't worry - this is a known issue and doesn't affect actual charging."
  },
  {
    "question": "What should I do if my DevKit2 doesn't show green charging light?",
    "answer": "If device is completely new and firmware version is 1.0.5, you might not see green light. Instead, a red light may appear, which is expected behavior for this firmware version."
  },
  {
    "question": "How long should I hold the DevKit2 center button for first use?",
    "answer": "For first-time users, press and hold at the center of the device for at least 2-3 seconds. You should hear a buzzer sound and feel vibration with a red light appearing."
  },
  {
    "question": "What does it mean when DevKit2 shows both green and red/blue lights?",
    "answer": "If the device is already connected to the app or turned on (red or blue light), you will see a green blinking light alongside the red or blue light when charging."
  },
  {
    "question": "How do I access DevKit2's SD card recordings?",
    "answer": "Connect DevKit2 to the app, navigate to Settings > Device Settings > SD Card Sync to import all audio files stored on the onboard SD card and convert them into memories."
  },
  {
    "question": "What are External Integration apps in Omi?",
    "answer": "External Integrations connect third-party services to Omi. Currently supported platforms include Zapier (automate actions triggered by specific words), Notion (save conversation details), and BookWatch."
  },
  {
    "question": "What are Chat Apps in Omi?",
    "answer": "Chat apps are designed to mimic specific personalities (like Elon Musk) or perform functions like giving feedback, offering advice, and answering questions through conversational interface."
  },
  {
    "question": "What are Memory Apps in Omi?",
    "answer": "Memory apps use prompts to mimic personalities or perform specific tasks, but are triggered when a memory is created. Example: Insight Extractor analyzes conversations and extracts valuable insights after memory formation."
  },
  {
    "question": "How can developers create custom Omi apps?",
    "answer": "Developers interested in creating custom plugins can check the documentation on how to create apps. There are opportunities to earn bounties for contributing features, especially for DevKit2 functionalities."
  },
  {
    "question": "What is the Insight Extractor app?",
    "answer": "The Insight Extractor is a Memory App that analyzes conversations and extracts valuable insights after a memory is formed, helping you understand important patterns and information from your conversations."
  },
  {
    "question": "How does Zapier integration work with Omi?",
    "answer": "The Zapier integration allows you to automate actions triggered by specific words or phrases in a memory, enabling you to connect Omi conversations with hundreds of other applications and services."
  },
  {
    "question": "How does Notion integration work with Omi?",
    "answer": "The Notion integration allows you to save key details from conversations directly into your Notion workspace, making it easy to organize and reference important information from your Omi memories."
  },
  {
    "question": "What happens when I stop talking during an Omi conversation?",
    "answer": "When you stop talking, the app waits for 2 minutes to check if the communication has ended. If there's no voice after that time, the app finalizes that communication is over and begins creating a Conversation."
  },
  {
    "question": "Can I continue talking after a pause in Omi conversations?",
    "answer": "Yes, you can continue talking as much as you like. The app will keep recording for as long as there's active communication without interrupting your ongoing conversations."
  },
  {
    "question": "What information is highlighted in Omi Conversations?",
    "answer": "Important action items and events are highlighted to form a 'Conversation' in Omi. These help you revisit past communications or discussions whenever you need to recall something important."
  },
  {
    "question": "What should I do if my Omi device firmware version is 1.0.2?",
    "answer": "If your firmware version is 1.0.2, you need to manually update as this was shipped before app-based updates were available. Follow the manual firmware update process, and future updates will be available through the app."
  },
  {
    "question": "What USB cable do I need for DevKit2 firmware updates?",
    "answer": "You need a USB-C cable that supports data transfer (not just charging) to connect DevKit2 to your computer for firmware updates."
  },
  {
    "question": "How do I open the DevKit2 case for firmware updates?",
    "answer": "Open the case by pulling up the top, starting from the USB side makes it easier. Then locate the reset button on the board highlighted by a white circle around the red-colored reset button."
  },
  {
    "question": "What files do I need for DevKit2 firmware update?",
    "answer": "You need bootloader 0.9.0.uf2 and Omi_DK2_v2.0.10.uf2 files. Download both files to your computer before starting the update process."
  },
  {
    "question": "What is the latest DevKit2 firmware version?",
    "answer": "The latest DevKit2 firmware version mentioned is 2.0.10 (Omi_DK2_v2.0.10.uf2), which should be installed after the bootloader update."
  },
  {
    "question": "Why do I need to press the reset button twice?",
    "answer": "Pressing the reset button twice in quick succession puts the device into reset mode, which is necessary for the computer to recognize it as a drive for firmware installation."
  },
  {
    "question": "What should I do if my computer doesn't recognize the device after reset?",
    "answer": "Make sure you're using a USB-C cable that supports data transfer, not just charging. Try pressing the reset button twice quickly again, and ensure the device is properly connected."
  },
  {
    "question": "Can I use Omi in multiple languages during one conversation?",
    "answer": "No, Omi cannot detect or switch between multiple languages in a single conversation. If speakers use different languages, you'll need to manually adjust the language settings accordingly."
  },
  {
    "question": "What should I do if my Omi device doesn't vibrate when pressed?",
    "answer": "If the device doesn't vibrate or show a light when pressed, the battery may have discharged during transit. Connect it directly to a charger and wait for the charging light to appear."
  },
  {
    "question": "How do I know if my Omi device is properly paired with the app?",
    "answer": "When pairing is successful, the device's light will turn blue, indicating it's connected to the Omi AI app and ready for use."
  },
  {
    "question": "What should I check if my Omi device won't charge?",
    "answer": "Check the charging cables, adapter, power outlet functionality, and inspect the charging port for debris. Ensure the device is turned on and properly positioned on the charger."
  },
  {
    "question": "How long does it take for the charging light to appear on Omi device?",
    "answer": "For first-time charging, the light may take a few seconds to up to 2-3 minutes to appear. An orange light indicates the device is charging properly."
  },
  {
    "question": "What platforms support the Omi AI app?",
    "answer": "The Omi AI app is available on App Store for iOS devices and Play Store for Android devices."
  },
  {
    "question": "What should I do if I can't find the reset button on my device?",
    "answer": "On Friend V1, locate the small hole on your device. On DevKit2, open the case from the USB side and look for the red-colored reset button highlighted by a white circle on the board."
  },
  {
    "question": "What happens during the bootloader flashing process?",
    "answer": "During bootloader flashing, the device will automatically eject itself once the process is complete. This is normal behavior and indicates the bootloader installation was successful."
  },
  {
    "question": "Can I use any pin to press the reset button?",
    "answer": "Yes, find a small pin or similar thin tool to press the tiny reset button. The tool should be thin enough to fit into the small hole or press the button accurately."
  },
  {
    "question": "What does XIAO-SENSE mean when updating firmware?",
    "answer": "XIAO-SENSE is the name of the drive that appears when your Omi device successfully enters reset mode. Look for '/Volumes/XIAO-SENSE' on your computer to confirm reset mode."
  },
  {
    "question": "Why can't I see my order tracking updates immediately?",
    "answer": "Tracking updates may pause, especially when packages move between carriers or countries. This is normal and doesn't indicate a problem with your shipment."
  },
  {
    "question": "How can I get updates about my shipment status?",
    "answer": "You can subscribe to email notifications on the tracking page to receive regular updates about key milestones like arrival at local facilities, out-for-delivery status, or successful delivery."
  },
  {
    "question": "What information can I find on the tracking page?",
    "answer": "The tracking page shows which carrier is handling your order, shipment progress monitoring, carrier contact details including customer service phone number, and estimated delivery date based on your location."
  },
  {
    "question": "When should I be concerned about shipping delays?",
    "answer": "Allow at least 10 days for tracking updates before being concerned. Some shipments take longer due to customs and local delivery processes, which is normal."
  },
  {
    "question": "What are my options if my package is lost or significantly delayed?",
    "answer": "If tracking hasn't updated after 10 days, contact help@omi.me with your order details. Omi will arrange either a replacement shipment or issue a refund, whichever you prefer."
  },
  {
    "question": "How do I contact Omi support for shipping issues?",
    "answer": "For shipping issues after 10 days of no tracking updates, reach out to help@omi.me with your order details. The support team will help resolve the issue promptly."
  },
  {
    "question": "What should I do if my local carrier has my package but tracking stopped?",
    "answer": "If tracking shows your package arrived in your country but isn't updating, contact your local carrier directly with the tracking number for more specific delivery details."
  },
  {
    "question": "Can I track my package through multiple carriers?",
    "answer": "Yes, the tracking page will show which carrier is currently handling your order and provide their contact details. Packages may transfer between international and local carriers during delivery."
  },
  {
    "question": "What does it mean when my package is 'in transit'?",
    "answer": "When a package is in transit, it's moving between facilities or awaiting its next scan. This can cause gaps in tracking updates, which is normal behavior in the shipping process."
  },
  {
    "question": "How can I prepare for DevKit2 firmware updates?",
    "answer": "Before starting, ensure you have a data-capable USB-C cable, download the required bootloader and firmware files, and have a small pin or tool ready to press the reset button."
  },
  {
    "question": "What happens if I drag the firmware file before the bootloader?",
    "answer": "Always drag the bootloader file first, wait for automatic ejection, then set the device back to reset mode before dragging the firmware file. The correct order is crucial for successful updates."
  },
  {
    "question": "How do I know when DevKit2 firmware update is complete?",
    "answer": "After dragging the firmware file onto the XIAO-SENSE drive, the update process will complete automatically. Restart the Omi app as the final step to confirm the update was successful."
  },
  {
    "question": "Can I use DevKit2 while it's charging?",
    "answer": "Yes, you can use DevKit2 while charging. If the device is connected to the app, you'll see both the green charging light and the blue connection light simultaneously."
  },
  {
    "question": "What should I do if DevKit2 doesn't respond after firmware update?",
    "answer": "After firmware update, restart the Omi app completely. If the device still doesn't respond, try the reset process again or contact support for assistance."
  },
  {
    "question": "Why does DevKit2 have better features than Friend V1?",
    "answer": "DevKit2 was developed to address Friend V1's limitations. It includes onboard memory storage, doesn't require constant app connection, has a programmable button, includes a speaker, and uses a custom PCB design."
  },
  {
    "question": "What can I do with DevKit2's programmable button in the future?",
    "answer": "Future versions will allow the programmable button to control various smart home functions, voice commands, and custom actions. Developers can contribute to these features and earn bounties."
  },
  {
    "question": "How does DevKit2's speaker enhance the experience?",
    "answer": "The small speaker allows DevKit2 to provide audio feedback, confirmations, and responses directly from the device, making interactions more intuitive and immediate."
  },
  {
    "question": "What is SD Card Sync in DevKit2?",
    "answer": "SD Card Sync is a feature that allows you to import audio recordings stored on DevKit2's onboard SD card when the device wasn't connected to the app, then convert them into memories."
  },
  {
    "question": "How much storage does DevKit2's SD card provide?",
    "answer": "The documentation doesn't specify the exact storage capacity, but DevKit2 includes an inbuilt SD card for storing audio recordings when not connected to the app."
  },
  {
    "question": "Can I record conversations with DevKit2 without the app?",
    "answer": "Yes, unlike Friend V1, DevKit2 can record conversations independently using its onboard SD card storage. Later, you can sync these recordings with the app to create memories."
  }
]