import 'dart:io';

import 'package:archive/archive_io.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:friend_private/backend/database/memory.dart';
import 'package:path_provider/path_provider.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:share_plus/share_plus.dart';

const String header = "GENERATED BY FRIEND, basedhardware.com\n\n";

enum BottomSheetView { share, exportTranscript, exportSummary }

enum ExportType { txt, docx, srt, pdf, markdown }

void _copyTranscript(BuildContext context, Memory memory) {
  Clipboard.setData(ClipboardData(text: memory.transcript));
  ScaffoldMessenger.of(context).showSnackBar(
    const SnackBar(content: Text('Transcript copied to clipboard')),
  );
  HapticFeedback.lightImpact();
}

void _copySummary(BuildContext context, Memory memory) {
  if (memory.structured.target != null) {
    final summary = memory.structured.target!.toString();
    Clipboard.setData(ClipboardData(text: summary));
    HapticFeedback.lightImpact();

    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(content: Text('Summary copied to clipboard')),
    );
  }
}

void showShareBottomSheet(
  BuildContext context,
  Memory memory,
  StateSetter setState,
) async {
  BottomSheetView currentView = BottomSheetView.share;

  ExportType? exportType;

  bool includeTimestamps = false;

  showModalBottomSheet(
    context: context,
    isScrollControlled: true,
    shape: const RoundedRectangleBorder(
      borderRadius: BorderRadius.only(
        topLeft: Radius.circular(16),
        topRight: Radius.circular(16),
      ),
    ),
    builder: (ctx) {
      return StatefulBuilder(
        builder: (BuildContext context, StateSetter setModalState) {
          void updateView(BottomSheetView view) {
            setModalState(() {
              currentView = view;
              debugPrint("View Set to: ${view.name}");
            });
          }

          void updateType(ExportType type) {
            setModalState(() {
              exportType = type;
              debugPrint("Type Set to: ${type.name}");
            });
          }

          debugPrint("Current View: $currentView");

          return Container(
            decoration: BoxDecoration(
              color: Theme.of(context).colorScheme.surface,
              borderRadius: const BorderRadius.only(
                topLeft: Radius.circular(16),
                topRight: Radius.circular(16),
              ),
            ),
            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 16),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                if (currentView == BottomSheetView.share) ...[
                  ListTile(
                    title: Text(
                      '${memory.structured.target?.title}',
                      style: Theme.of(context).textTheme.labelLarge,
                    ),
                    leading: const Icon(Icons.description),
                    trailing: CircleAvatar(
                      child: Center(
                        child: IconButton(
                          icon: const Icon(Icons.cancel_outlined),
                          onPressed: () {
                            Navigator.of(ctx).pop();
                          },
                        ),
                      ),
                    ),
                  ),
                  const SizedBox(height: 10),
                  // Card(
                  //   shape: const RoundedRectangleBorder(
                  //     borderRadius: BorderRadius.all(Radius.circular(8)),
                  //   ),
                  //   child: _buildListTile(
                  //     context,
                  //     title: 'Share Link',
                  //     icon: Icons.link,
                  //     onTap: () => _shareLink(context, memory),
                  //   ),
                  // ),
                  Card(
                    shape: const RoundedRectangleBorder(
                      borderRadius: BorderRadius.all(Radius.circular(8)),
                    ),
                    child: Column(
                      children: [
                        _buildListTile(
                          context,
                          title: 'Copy Transcript',
                          icon: Icons.copy,
                          onTap: () => {Navigator.pop(ctx), _copyTranscript(context, memory)},
                        ),
                        _buildListTile(
                          context,
                          title: 'Copy Summary',
                          icon: Icons.file_copy,
                          onTap: () => {
                            Navigator.pop(ctx),
                            _copySummary(context, memory),
                          },
                        ),
                      ],
                    ),
                  ),
                  const SizedBox(height: 8),
                  Card(
                    shape: const RoundedRectangleBorder(
                      borderRadius: BorderRadius.all(Radius.circular(16)),
                    ),
                    child: Column(
                      children: [
                        // _buildListTile(
                        //   context,
                        //   title: 'Export Audio',
                        //   icon: Icons.graphic_eq,
                        //   onTap: () => {Navigator.pop(ctx), _exportAudio(context, memory)},
                        // ),
                        _buildListTile(
                          context,
                          title: 'Export Transcript',
                          icon: Icons.description,
                          onTap: () {
                            updateView(BottomSheetView.exportTranscript);
                          },
                        ),
                        _buildListTile(
                          context,
                          title: 'Export Summary',
                          icon: Icons.summarize,
                          onTap: () {
                            updateView(BottomSheetView.exportSummary);
                          },
                        ),
                      ],
                    ),
                  ),
                  const SizedBox(height: 10)
                ] else if (currentView == BottomSheetView.exportTranscript) ...[
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Text('Export Transcript', style: Theme.of(context).textTheme.labelLarge),
                      IconButton(
                        icon: const Icon(Icons.cancel_outlined),
                        onPressed: () {
                          updateView(BottomSheetView.share);
                        },
                      ),
                    ],
                  ),
                  const SizedBox(height: 10),
                  Container(
                    alignment: Alignment.centerLeft,
                    child: Text('Export as',
                        style: Theme.of(context).textTheme.bodySmall?.copyWith(color: Colors.grey.shade400)),
                  ),
                  Card(
                    child: Column(
                      children: [
                        ListTile(
                          leading: const Icon(Icons.text_snippet),
                          title: const Text('TXT'),
                          trailing: SizedBox(
                              width: 60,
                              child: exportType == ExportType.txt ? const Icon(Icons.check_outlined) : Container()),
                          onTap: () {
                            updateType(ExportType.txt);
                          },
                        ),
                        ListTile(
                          leading: const Icon(Icons.picture_as_pdf),
                          title: const Text('PDF'),
                          trailing: SizedBox(
                              width: 60,
                              child: exportType == ExportType.pdf ? const Icon(Icons.check_outlined) : Container()),
                          onTap: () {
                            updateType(ExportType.pdf);
                          },
                        ),
                      ],
                    ),
                  ),
                  const SizedBox(height: 10),
                  Container(
                    alignment: Alignment.centerLeft,
                    child: Text('Share Content',
                        style: Theme.of(context).textTheme.bodySmall?.copyWith(color: Colors.grey.shade400)),
                  ),
                  Card(
                    child: SwitchListTile(
                      title: const Text('Include Timestamps'),
                      value: includeTimestamps,
                      onChanged: (bool value) {
                        setModalState(() {
                          includeTimestamps = value;
                        });
                      },
                    ),
                  ),
                  const SizedBox(height: 10),
                  SizedBox(
                    width: double.infinity,
                    height: 60,
                    child: ElevatedButton(
                      onPressed: () {
                        switch (exportType) {
                          case ExportType.pdf:
                            _exportPDF(memory, true);
                            break;
                          case ExportType.srt:
                            _exportSRT(memory, true);
                            break;
                          case ExportType.txt:
                            _exportTranscript(memory);
                            break;
                          default:
                            _fullExport(memory, context, true);
                        }
                      },
                      child: Text(
                        'Export',
                        style: Theme.of(context).textTheme.bodyLarge,
                      ),
                    ),
                  ),
                ] else if (currentView == BottomSheetView.exportSummary) ...[
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Text('Export Summary', style: Theme.of(context).textTheme.labelLarge),
                      IconButton(
                        icon: const Icon(Icons.cancel_outlined),
                        onPressed: () {
                          updateView(BottomSheetView.share);
                        },
                      ),
                    ],
                  ),
                  const SizedBox(height: 10),
                  Container(
                    alignment: Alignment.centerLeft,
                    child: Text(
                      'Export as',
                      style: Theme.of(context).textTheme.bodySmall,
                    ),
                  ),
                  Card(
                    child: Column(
                      children: [
                        ListTile(
                          leading: const Icon(Icons.text_snippet),
                          title: const Text('TXT'),
                          onTap: () {
                            updateType(ExportType.txt);
                          },
                          trailing: SizedBox(
                              width: 60,
                              child: exportType == ExportType.txt ? const Icon(Icons.check_outlined) : Container()),
                        ),
                        ListTile(
                          leading: const Icon(Icons.subtitles),
                          title: const Text('Markdown'),
                          onTap: () {
                            updateType(ExportType.markdown);
                          },
                          trailing: SizedBox(
                              width: 60,
                              child:
                                  exportType == ExportType.markdown ? const Icon(Icons.check_outlined) : Container()),
                        ),
                        ListTile(
                          leading: const Icon(Icons.picture_as_pdf),
                          title: const Text('PDF'),
                          onTap: () {
                            updateType(ExportType.pdf);
                          },
                          trailing: SizedBox(
                              width: 60,
                              child: exportType == ExportType.pdf ? const Icon(Icons.check_outlined) : Container()),
                        ),
                      ],
                    ),
                  ),
                  const SizedBox(height: 10),
                  SizedBox(
                    height: 60,
                    width: double.infinity,
                    child: ElevatedButton(
                      onPressed: () {
                        switch (exportType) {
                          case ExportType.pdf:
                            _exportPDF(memory, false);
                            break;
                          case ExportType.markdown:
                            _exportMarkdown(memory);
                            break;
                          case ExportType.txt:
                            _exportSummary(memory);
                            break;
                          default:
                            _fullExport(memory, context, true);
                        }
                      },
                      child: Text(
                        'Export',
                        style: Theme.of(context).textTheme.bodyLarge,
                      ),
                    ),
                  ),
                ]
              ],
            ),
          );
        },
      );
    },
  );
}

ListTile _buildListTile(
  BuildContext context, {
  required String title,
  required IconData icon,
  required Function onTap,
}) {
  return ListTile(
    title: Text(title),
    leading: Icon(icon),
    onTap: () {
      onTap();
    },
  );
}

// void _exportAudio(BuildContext context, Memory memory) async {
//   // FIXME
//   final audioPath = memory.recordingFilePath;
//   if (audioPath == null || audioPath.isEmpty) {
//     ScaffoldMessenger.of(context).showSnackBar(const SnackBar(
//       content: Text('Audio file not available'),
//     ));
//     return;
//   }
//
//   final audioFile = File(audioPath);
//   print('File $audioPath exists: ${audioFile.existsSync()}');
//   await Share.shareXFiles([XFile(audioFile.path)], text: header);
// }

void _exportPDF(Memory memory, bool isTranscript) async {
  final pdf = pw.Document();

  final structured = memory.structured.target!;

  if (isTranscript) {
    pdf.addPage(
      pw.Page(
        build: (pw.Context context) => pw.Column(
          crossAxisAlignment: pw.CrossAxisAlignment.start,
          children: [
            pw.Text('Memory Export', style: const pw.TextStyle(fontSize: 24)),
            pw.SizedBox(height: 12),
            pw.Text('Title: ${structured.title}', style: const pw.TextStyle(fontSize: 18)),
            pw.SizedBox(height: 12),
            pw.Text('Overview', style: const pw.TextStyle(fontSize: 18)),
            pw.Text(structured.overview),
            pw.SizedBox(height: 12),
            pw.Text('Action Items', style: const pw.TextStyle(fontSize: 18)),
            ...structured.actionItems.map((e) => pw.Text('- ${e.description}')),
            pw.SizedBox(height: 12),
            pw.Text('Transcript', style: const pw.TextStyle(fontSize: 18)),
            pw.Text(memory.getTranscript()),
          ],
        ),
      ),
    );
  } else {
    pdf.addPage(
      pw.Page(
        build: (pw.Context context) => pw.Column(
          crossAxisAlignment: pw.CrossAxisAlignment.start,
          children: [
            pw.Text('Memory Export', style: const pw.TextStyle(fontSize: 24)),
            pw.SizedBox(height: 12),
            pw.Text('Title: ${structured.title}', style: const pw.TextStyle(fontSize: 18)),
            pw.SizedBox(height: 12),
            pw.Text('Overview', style: const pw.TextStyle(fontSize: 18)),
            pw.Text(structured.overview),
            pw.SizedBox(height: 12),
            pw.Text('Action Items', style: const pw.TextStyle(fontSize: 18)),
            ...structured.actionItems.map((e) => pw.Text('- ${e.description}')),
            pw.SizedBox(height: 12),
            pw.Text('Summary', style: const pw.TextStyle(fontSize: 18)),
            pw.Text(structured.overview),
          ],
        ),
      ),
    );
  }

  final directory = await getApplicationDocumentsDirectory();
  final file = File('${directory.path}/memory_export.pdf');
  await file.writeAsBytes(await pdf.save());

  await Share.shareXFiles([XFile(file.path)], text: header);
}

void _exportTranscript(Memory memory) async {
  final directory = await getApplicationDocumentsDirectory();
  final transcriptFile = File('${directory.path}/memory_transcript.txt');
  final transcript = "$header ${memory.getTranscript()}";
  await transcriptFile.writeAsString(transcript);

  await Share.shareXFiles([XFile(transcriptFile.path)], text: header);
}

void _exportSummary(Memory memory) async {
  final directory = await getApplicationDocumentsDirectory();
  final transcriptFile = File('${directory.path}/summary.txt');
  final transcript = "$header ${memory.structured.target?.overview}";
  await transcriptFile.writeAsString(transcript);

  await Share.shareXFiles([XFile(transcriptFile.path)], text: header);
}

void _fullExport(Memory memory, BuildContext context, bool isTranscript) async {
  try {
    final directory = await getApplicationDocumentsDirectory();

    final audioPath = memory.recordingFilePath;
    File? audioFile;
    if (audioPath != null && audioPath.isNotEmpty) {
      audioFile = File(audioPath);
    }

    final transcriptFile = File('${directory.path}/memory_transcript.txt');
    final transcript = "$header ${memory.getTranscript()}";
    await transcriptFile.writeAsString(transcript);

    final summaryFile = File('${directory.path}/memory_summary.txt');
    final summary = "$header ${memory.structured.target!.overview}";
    await summaryFile.writeAsString(summary);

    final zipFile = File('${directory.path}/memory_export.zip');
    final encoder = ZipFileEncoder();
    encoder.create(zipFile.path);
    if (audioFile != null) encoder.addFile(audioFile);
    if (isTranscript) {
      encoder.addFile(transcriptFile);
    } else {
      encoder.addFile(summaryFile);
    }

    encoder.close();

    await Share.shareXFiles([XFile(zipFile.path)], text: header);
  } catch (e) {
    if (!context.mounted) {
      return;
    }
    if (context.mounted) {
      ScaffoldMessenger.of(context).showSnackBar(const SnackBar(
        content: Text('Failed to export full memory'),
      ));
    }
  }
}

void _exportMarkdown(Memory memory) async {
  final directory = await getApplicationDocumentsDirectory();
  final markdownFile = File('${directory.path}/memory_export.md');
  final structured = memory.structured.target!;
  final markdown = """
    # Summary Export

    ## Title: ${structured.title}


    ### Action Items
    ${structured.actionItems.map((e) => '- ${e.description}').join('\n')}

    ### summary
    ${memory.structured.target?.overview}
    """;
  await markdownFile.writeAsString(markdown);

  await Share.shareXFiles([XFile(markdownFile.path)], text: header);
}

Future<void> _exportSRT(Memory memory, bool includeTimestamps) async {
  final buffer = StringBuffer();

  for (int i = 0; i < memory.transcriptSegments.length; i++) {
    final segment = memory.transcriptSegments[i];

    String startTime = _formatTime(segment.start);
    String endTime = _formatTime(segment.end);

    buffer.writeln('${i + 1}');
    buffer.writeln('$startTime --> $endTime');

    if (includeTimestamps) {
      buffer.writeln(segment.text);
    } else {
      buffer.writeln('Speaker ${segment.speakerId}: ${segment.text}');
    }

    buffer.writeln();
  }

  final directory = await getApplicationDocumentsDirectory();
  final filePath = '${directory.path}/memory_${memory.id}.srt';
  final file = File(filePath);

  await file.writeAsString(buffer.toString());

  Share.shareXFiles([XFile(file.path)]);
}

String _formatTime(double time) {
  final hours = (time ~/ 3600).toString().padLeft(2, '0');
  final minutes = ((time % 3600) ~/ 60).toString().padLeft(2, '0');
  final seconds = (time % 60).toString().padLeft(2, '0');
  final milliseconds = ((time % 1) * 1000).toInt().toString().padLeft(3, '0');

  return '$hours:$minutes:$seconds,$milliseconds';
}
