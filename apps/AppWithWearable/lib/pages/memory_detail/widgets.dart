import 'dart:convert';
import 'dart:io';

import 'package:archive/archive_io.dart';
import 'package:collection/collection.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:friend_private/backend/database/memory.dart';
import 'package:friend_private/backend/database/memory_provider.dart';
import 'package:friend_private/backend/mixpanel.dart';
import 'package:friend_private/backend/preferences.dart';
import 'package:friend_private/backend/schema/plugin.dart';
import 'package:friend_private/pages/memories/widgets/confirm_deletion_widget.dart';
import 'package:friend_private/pages/plugins/page.dart';
import 'package:friend_private/pages/settings/calendar.dart';
import 'package:friend_private/utils/features/calendar.dart';
import 'package:friend_private/utils/other/temp.dart';
import 'package:friend_private/widgets/exapandable_text.dart';
import 'package:gradient_borders/box_borders/gradient_box_border.dart';
import 'package:share_plus/share_plus.dart';
import 'package:path_provider/path_provider.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:docx_template/docx_template.dart';

const String header = "GENERATED BY FRIEND, basedhardware.com\n\n";

enum BottomSheetView { share, exportTranscript, exportSummary }

enum ExportType { txt, docx, srt, pdf, markdown }

List<Widget> getSummaryWidgets(
  BuildContext context,
  Memory memory,
  TextEditingController overviewController,
  bool editingOverview,
  FocusNode focusOverviewField,
  StateSetter setState,
) {
  var structured = memory.structured.target!;
  String time = memory.startedAt == null
      ? dateTimeFormat('h:mm a', memory.createdAt)
      : '${dateTimeFormat('h:mm a', memory.startedAt)} to ${dateTimeFormat('h:mm a', memory.finishedAt)}';
  return [
    const SizedBox(height: 24),
    Text(
      memory.discarded ? 'Discarded Memory' : structured.title,
      style: Theme.of(context).textTheme.titleLarge!.copyWith(fontSize: 32),
    ),
    const SizedBox(height: 16),
    Text(
      '${dateTimeFormat('MMM d,  yyyy', memory.createdAt)} ${memory.startedAt == null ? 'at' : 'from'} $time',
      style: const TextStyle(color: Colors.grey, fontSize: 16),
    ),
    const SizedBox(height: 16),
    Row(
      children: [
        Container(
          decoration: BoxDecoration(
            color: Colors.grey.shade800,
            borderRadius: BorderRadius.circular(16),
          ),
          padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
          child: Text(
            structured.category.isEmpty ? ' ' : structured.category[0].toUpperCase() + structured.category.substring(1),
            style: Theme.of(context).textTheme.titleLarge,
          ),
        )
      ],
    ),
    const SizedBox(height: 40),
    memory.discarded
        ? const SizedBox.shrink()
        : Text(
            'Overview',
            style: Theme.of(context).textTheme.titleLarge!.copyWith(fontSize: 26),
          ),
    memory.discarded ? const SizedBox.shrink() : const SizedBox(height: 8),
    memory.discarded
        ? const SizedBox.shrink()
        : _getEditTextField(memory, overviewController, editingOverview, focusOverviewField),
    memory.discarded ? const SizedBox.shrink() : const SizedBox(height: 40),
    structured.actionItems.isNotEmpty
        ? Row(
            crossAxisAlignment: CrossAxisAlignment.center,
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Text(
                'Action Items',
                style: Theme.of(context).textTheme.titleLarge!.copyWith(fontSize: 26),
              ),
              IconButton(
                  onPressed: () {
                    Clipboard.setData(
                        ClipboardData(text: '- ${structured.actionItems.map((e) => e.description).join('\n- ')}'));
                    ScaffoldMessenger.of(context).showSnackBar(const SnackBar(
                      content: Text('Action items copied to clipboard'),
                      duration: Duration(seconds: 2),
                    ));
                    MixpanelManager().copiedMemoryDetails(memory, source: 'Action Items');
                  },
                  icon: const Icon(Icons.copy_rounded, color: Colors.white, size: 20))
            ],
          )
        : const SizedBox.shrink(),
    ...structured.actionItems.map<Widget>((item) {
      return Padding(
        padding: const EdgeInsets.only(top: 10),
        child: Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Padding(
                padding: const EdgeInsets.only(top: 4.0),
                child: Icon(Icons.task_alt, color: Colors.grey.shade300, size: 20)),
            const SizedBox(width: 12),
            Expanded(
              child: SelectionArea(
                child: Text(
                  item.description,
                  style: TextStyle(color: Colors.grey.shade300, fontSize: 16, height: 1.3),
                ),
              ),
            ),
          ],
        ),
      );
    }),
    structured.actionItems.isNotEmpty ? const SizedBox(height: 40) : const SizedBox.shrink(),
    structured.events.isNotEmpty
        ? Row(
            children: [
              Icon(Icons.event, color: Colors.grey.shade300),
              const SizedBox(width: 8),
              Text(
                'Events',
                style: Theme.of(context).textTheme.titleLarge!.copyWith(fontSize: 26),
              )
            ],
          )
        : const SizedBox.shrink(),
    ...structured.events.map<Widget>((event) {
      return ListTile(
        contentPadding: EdgeInsets.zero,
        title: Text(
          event.title,
          style: const TextStyle(color: Colors.white, fontSize: 16, fontWeight: FontWeight.w600),
        ),
        subtitle: Padding(
          padding: const EdgeInsets.only(top: 4.0),
          child: Text(
            '${dateTimeFormat('MMM d, yyyy', event.startsAt)} at ${dateTimeFormat('h:mm a', event.startsAt)} ~ ${event.duration} minutes.',
            style: const TextStyle(color: Colors.grey, fontSize: 15),
          ),
        ),
        trailing: IconButton(
          onPressed: event.created
              ? null
              : () {
                  var calEnabled = SharedPreferencesUtil().calendarEnabled;
                  var calSelected = SharedPreferencesUtil().calendarId.isNotEmpty;
                  if (!calEnabled || !calSelected) {
                    routeToPage(context, const CalendarPage());
                    ScaffoldMessenger.of(context).showSnackBar(SnackBar(
                      content: Text(!calEnabled
                          ? 'Enable calendar integration to add events'
                          : 'Select a calendar to add events to'),
                    ));
                    return;
                  }
                  MemoryProvider().setEventCreated(event);
                  setState(() => event.created = true);
                  CalendarUtil().createEvent(
                    event.title,
                    event.startsAt,
                    event.duration,
                    description: event.description,
                  );
                  ScaffoldMessenger.of(context).showSnackBar(const SnackBar(
                    content: Text('Event added to calendar'),
                  ));
                },
          icon: Icon(event.created ? Icons.check : Icons.add, color: Colors.white),
        ),
      );
    }),
    structured.events.isNotEmpty ? const SizedBox(height: 40) : const SizedBox.shrink(),
  ];
}

_getEditTextField(Memory memory, TextEditingController controller, bool enabled, FocusNode focusNode) {
  if (memory.discarded) return const SizedBox.shrink();
  return enabled
      ? TextField(
          controller: controller,
          keyboardType: TextInputType.multiline,
          focusNode: focusNode,
          maxLines: null,
          decoration: const InputDecoration(
            border: OutlineInputBorder(borderSide: BorderSide.none),
            contentPadding: EdgeInsets.all(0),
          ),
          enabled: enabled,
          style: TextStyle(color: Colors.grey.shade300, fontSize: 15, height: 1.3),
        )
      : SelectionArea(
          child: Text(
          controller.text,
          style: TextStyle(color: Colors.grey.shade300, fontSize: 15, height: 1.3),
        ));
}

List<Widget> getPluginsWidgets(
  BuildContext context,
  Memory memory,
  List<Plugin> pluginsList,
  List<bool> pluginResponseExpanded,
  Function(int) onItemToggled,
) {
  if (memory.pluginsResponse.isEmpty) {
    return [
      const SizedBox(height: 32),
      Text(
        'No plugins were triggered\nfor this memory.',
        style: Theme.of(context).textTheme.titleLarge!.copyWith(fontSize: 20),
        textAlign: TextAlign.center,
      ),
      const SizedBox(height: 24),
      Row(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Container(
            decoration: BoxDecoration(
              border: const GradientBoxBorder(
                gradient: LinearGradient(colors: [
                  Color.fromARGB(127, 208, 208, 208),
                  Color.fromARGB(127, 188, 99, 121),
                  Color.fromARGB(127, 86, 101, 182),
                  Color.fromARGB(127, 126, 190, 236)
                ]),
                width: 2,
              ),
              borderRadius: BorderRadius.circular(12),
            ),
            child: MaterialButton(
              onPressed: () {
                Navigator.of(context).push(MaterialPageRoute(builder: (c) => const PluginsPage()));
              },
              shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),
              child: const Padding(
                  padding: EdgeInsets.symmetric(horizontal: 16, vertical: 0),
                  child: Text('Enable Plugins', style: TextStyle(color: Colors.white, fontSize: 16))),
            ),
          ),
        ],
      ),
      const SizedBox(height: 32),
    ];
  }
  return [
    // TODO: include a way to trigger specific plugins
    if (memory.pluginsResponse.isNotEmpty && !memory.discarded) ...[
      memory.structured.target!.actionItems.isEmpty ? const SizedBox(height: 40) : const SizedBox.shrink(),
      Text(
        'Plugins 🧑‍💻',
        style: Theme.of(context).textTheme.titleLarge!.copyWith(fontSize: 26),
      ),
      const SizedBox(height: 24),
      ...memory.pluginsResponse.mapIndexed((i, pluginResponse) {
        if (pluginResponse.content.length < 5) return const SizedBox.shrink();
        Plugin? plugin = pluginsList.firstWhereOrNull((element) => element.id == pluginResponse.pluginId);
        return Container(
          margin: const EdgeInsets.only(bottom: 40),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.start,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              plugin != null
                  ? ListTile(
                      contentPadding: EdgeInsets.zero,
                      leading: CircleAvatar(
                        backgroundColor: Colors.white,
                        maxRadius: 16,
                        backgroundImage: NetworkImage(plugin.getImageUrl()),
                      ),
                      title: Text(
                        plugin.name,
                        maxLines: 1,
                        style: const TextStyle(
                          fontWeight: FontWeight.w600,
                          color: Colors.white,
                          fontSize: 16,
                        ),
                      ),
                      subtitle: Padding(
                        padding: const EdgeInsets.only(top: 4.0),
                        child: Text(
                          plugin.description,
                          maxLines: 1,
                          overflow: TextOverflow.ellipsis,
                          style: const TextStyle(color: Colors.grey, fontSize: 14),
                        ),
                      ),
                      trailing: IconButton(
                        icon: const Icon(Icons.copy_rounded, color: Colors.white, size: 20),
                        onPressed: () {
                          Clipboard.setData(ClipboardData(text: utf8.decode(pluginResponse.content.trim().codeUnits)));
                          ScaffoldMessenger.of(context).showSnackBar(const SnackBar(
                            content: Text('Plugin response copied to clipboard'),
                          ));
                          MixpanelManager().copiedMemoryDetails(memory, source: 'Plugin Response');
                        },
                      ),
                    )
                  : const SizedBox.shrink(),
              ExpandableTextWidget(
                text: utf8.decode(pluginResponse.content.trim().codeUnits),
                isExpanded: pluginResponseExpanded[i],
                toggleExpand: () {
                  if (!pluginResponseExpanded[i]) {
                    MixpanelManager().pluginResultExpanded(memory, pluginResponse.pluginId ?? '');
                  }
                  onItemToggled(i);
                },
                style: TextStyle(color: Colors.grey.shade300, fontSize: 15, height: 1.3),
                maxLines: 6,
                // Change this to 6 if you want the initial max lines to be 6
                linkColor: Colors.white,
              ),
            ],
          ),
        );
      }),
    ],
    const SizedBox(height: 8)
  ];
}

void _shareLink(BuildContext context, Memory memory) {
  if (memory.structured.target != null) {
    final title = memory.structured.target!.title;
    final overview = memory.structured.target!.overview;
    final link = memory.structured.target!.toString();
    final shareContent = 'Title: $title\n\nSummary: $overview\n\nLink: $link';

    Share.share(shareContent);

    HapticFeedback.lightImpact();
  }
}

void _copyTranscript(BuildContext context, Memory memory) {
  Clipboard.setData(ClipboardData(text: memory.transcript));
  ScaffoldMessenger.of(context).showSnackBar(
    const SnackBar(content: Text('Transcript copied to clipboard')),
  );
  HapticFeedback.lightImpact();
}

void _copySummary(BuildContext context, Memory memory) {
  if (memory.structured.target != null) {
    final summary = memory.structured.target!.overview;
    Clipboard.setData(ClipboardData(text: summary));
    HapticFeedback.lightImpact();

    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(content: Text('Summary copied to clipboard')),
    );
  }
}

Future<void> _exportMindMap(BuildContext context, Memory memory) async {
  final directory = await getApplicationDocumentsDirectory();
  final filePath = '${directory.path}/mind_map_${memory.id}.txt';
  final mindMapContent = _generateMindMapContent(memory);

  final file = File(filePath);
  await file.writeAsString(mindMapContent);

  Share.shareXFiles([XFile(filePath)], text: 'Mind Map for ${memory.structured.target?.title ?? 'Memory'}');

  HapticFeedback.lightImpact();
}

String _generateMindMapContent(Memory memory) {
  if (memory.structured.target != null) {
    final structured = memory.structured.target!;
    final title = structured.title;
    final overview = structured.overview;
    final actionItems = structured.actionItems.map((item) => item.description).join('\n- ');

    return '''
Mind Map
========

Title: $title

Summary: $overview

Action Items:
- $actionItems
    ''';
  }
  return 'No structured data available for this memory.';
}

void showShareBottomSheet(
  BuildContext context,
  Memory memory,
  StateSetter setState,
) async {
  BottomSheetView currentView = BottomSheetView.share;

  ExportType? exportType;

  bool includeTimestamps = false;

  showModalBottomSheet(
    context: context,
    isScrollControlled: true,
    shape: const RoundedRectangleBorder(
      borderRadius: BorderRadius.only(
        topLeft: Radius.circular(16),
        topRight: Radius.circular(16),
      ),
    ),
    builder: (ctx) {
      return StatefulBuilder(
        builder: (BuildContext context, StateSetter setModalState) {
          void updateView(BottomSheetView view) {
            setModalState(() {
              currentView = view;
              debugPrint("View Set to: ${view.name}");
            });
          }

          void updateType(ExportType type) {
            setModalState(() {
              exportType = type;
              debugPrint("Type Set to: ${type.name}");
            });
          }

          debugPrint("Current View: $currentView");

          return Container(
            decoration: BoxDecoration(
              color: Theme.of(context).colorScheme.surface,
              borderRadius: const BorderRadius.only(
                topLeft: Radius.circular(16),
                topRight: Radius.circular(16),
              ),
            ),
            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 16),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                if (currentView == BottomSheetView.share) ...[
                  ListTile(
                    title: Text(
                      '${memory.structured.target?.title}',
                      style: Theme.of(context).textTheme.labelLarge,
                    ),
                    leading: const Icon(Icons.description),
                    trailing: CircleAvatar(
                      child: Center(
                        child: IconButton(
                          icon: const Icon(Icons.cancel_outlined),
                          onPressed: () {
                            Navigator.of(ctx).pop();
                          },
                        ),
                      ),
                    ),
                  ),
                  const SizedBox(height: 10),
                  Card(
                    shape: const RoundedRectangleBorder(
                      borderRadius: BorderRadius.all(Radius.circular(8)),
                    ),
                    child: _buildListTile(
                      context,
                      title: 'Share Link',
                      icon: Icons.link,
                      onTap: () => _shareLink(context, memory),
                    ),
                  ),
                  Card(
                    shape: const RoundedRectangleBorder(
                      borderRadius: BorderRadius.all(Radius.circular(8)),
                    ),
                    child: Column(
                      children: [
                        _buildListTile(
                          context,
                          title: 'Copy Transcript',
                          icon: Icons.copy,
                          onTap: () => {Navigator.pop(ctx), _copyTranscript(context, memory)},
                        ),
                        _buildListTile(
                          context,
                          title: 'Copy Summary',
                          icon: Icons.file_copy,
                          onTap: () => {
                            Navigator.pop(ctx),
                            _copySummary(context, memory),
                          },
                        ),
                      ],
                    ),
                  ),
                  Card(
                    shape: const RoundedRectangleBorder(
                      borderRadius: BorderRadius.only(
                        topLeft: Radius.circular(16),
                        topRight: Radius.circular(16),
                        bottomRight: Radius.circular(16),
                        bottomLeft: Radius.circular(16),
                      ),
                    ),
                    child: Column(
                      children: [
                        _buildListTile(
                          context,
                          title: 'Export Audio',
                          icon: Icons.graphic_eq,
                          onTap: () => {Navigator.pop(ctx), _exportAudio(context, memory)},
                        ),
                        _buildListTile(
                          context,
                          title: 'Export Transcript',
                          icon: Icons.description,
                          onTap: () {
                            updateView(BottomSheetView.exportTranscript);
                          },
                        ),
                        _buildListTile(
                          context,
                          title: 'Export Summary',
                          icon: Icons.summarize,
                          onTap: () {
                            updateView(BottomSheetView.exportSummary);
                          },
                        ),
                        _buildListTile(
                          context,
                          title: 'Export Mind-map',
                          icon: Icons.tune,
                          onTap: () => _exportMindMap(context, memory),
                        ),
                      ],
                    ),
                  ),
                  const SizedBox(height: 10)
                ] else if (currentView == BottomSheetView.exportTranscript) ...[
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Text('Export Transcript', style: Theme.of(context).textTheme.labelLarge),
                      IconButton(
                        icon: const Icon(Icons.cancel_outlined),
                        onPressed: () {
                          updateView(BottomSheetView.share);
                        },
                      ),
                    ],
                  ),
                  const SizedBox(height: 10),
                  Container(
                    alignment: Alignment.centerLeft,
                    child: Text('Export as',
                        style: Theme.of(context).textTheme.bodySmall?.copyWith(color: Colors.grey.shade400)),
                  ),
                  Card(
                    child: Column(
                      children: [
                        ListTile(
                          leading: const Icon(Icons.text_snippet),
                          title: const Text('TXT'),
                          trailing: SizedBox(
                              width: 60,
                              child: exportType == ExportType.txt ? const Icon(Icons.check_outlined) : Container()),
                          onTap: () {
                            updateType(ExportType.txt);
                          },
                        ),
                        ListTile(
                          leading: const Icon(Icons.description),
                          title: const Text('DOCX'),
                          trailing: SizedBox(
                              width: 60,
                              child: exportType == ExportType.docx ? const Icon(Icons.check_outlined) : Container()),
                          onTap: () {
                            updateType(ExportType.docx);
                          },
                        ),
                        ListTile(
                          leading: const Icon(Icons.subtitles),
                          title: const Text('SRT'),
                          trailing: SizedBox(
                              width: 60,
                              child: exportType == ExportType.srt ? const Icon(Icons.check_outlined) : Container()),
                          onTap: () {
                            updateType(ExportType.srt);
                          },
                        ),
                        ListTile(
                          leading: const Icon(Icons.picture_as_pdf),
                          title: const Text('PDF'),
                          trailing: SizedBox(
                              width: 60,
                              child: exportType == ExportType.pdf ? const Icon(Icons.check_outlined) : Container()),
                          onTap: () {
                            updateType(ExportType.pdf);
                          },
                        ),
                      ],
                    ),
                  ),
                  const SizedBox(height: 10),
                  Container(
                    alignment: Alignment.centerLeft,
                    child: Text('Share Content',
                        style: Theme.of(context).textTheme.bodySmall?.copyWith(color: Colors.grey.shade400)),
                  ),
                  Card(
                    child: SwitchListTile(
                      title: const Text('Include Timestamps'),
                      value: includeTimestamps,
                      onChanged: (bool value) {
                        setModalState(() {
                          includeTimestamps = value;
                        });
                      },
                    ),
                  ),
                  const SizedBox(height: 10),
                  SizedBox(
                    width: double.infinity,
                    height: 60,
                    child: ElevatedButton(
                      onPressed: () {
                        switch (exportType) {
                          case ExportType.docx:
                            _exportDocx(context, memory, true);
                            break;
                          case ExportType.pdf:
                            _exportPDF(memory, true);
                            break;
                          case ExportType.srt:
                            _exportSRT(memory, true);
                            break;
                          case ExportType.txt:
                            _exportTranscript(memory);
                            break;
                          default:
                            _fullExport(memory, context, true);
                        }
                      },
                      child: Text(
                        'Export',
                        style: Theme.of(context).textTheme.bodyLarge,
                      ),
                    ),
                  ),
                ] else if (currentView == BottomSheetView.exportSummary) ...[
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Text('Export Summary', style: Theme.of(context).textTheme.labelLarge),
                      IconButton(
                        icon: const Icon(Icons.cancel_outlined),
                        onPressed: () {
                          updateView(BottomSheetView.share);
                        },
                      ),
                    ],
                  ),
                  const SizedBox(height: 10),
                  Container(
                    alignment: Alignment.centerLeft,
                    child: Text(
                      'Export as',
                      style: Theme.of(context).textTheme.bodySmall,
                    ),
                  ),
                  Card(
                    child: Column(
                      children: [
                        ListTile(
                          leading: const Icon(Icons.text_snippet),
                          title: const Text('TXT'),
                          onTap: () {
                            updateType(ExportType.txt);
                          },
                          trailing: SizedBox(
                              width: 60,
                              child: exportType == ExportType.txt ? const Icon(Icons.check_outlined) : Container()),
                        ),
                        ListTile(
                          leading: const Icon(Icons.subtitles),
                          title: const Text('Markdown'),
                          onTap: () {
                            updateType(ExportType.markdown);
                          },
                          trailing: SizedBox(
                              width: 60,
                              child:
                                  exportType == ExportType.markdown ? const Icon(Icons.check_outlined) : Container()),
                        ),
                        ListTile(
                          leading: const Icon(Icons.description),
                          title: const Text('DOCX'),
                          onTap: () {
                            updateType(ExportType.docx);
                          },
                          trailing: SizedBox(
                              width: 60,
                              child: exportType == ExportType.docx ? const Icon(Icons.check_outlined) : Container()),
                        ),
                        ListTile(
                          leading: const Icon(Icons.picture_as_pdf),
                          title: const Text('PDF'),
                          onTap: () {
                            updateType(ExportType.pdf);
                          },
                          trailing: SizedBox(
                              width: 60,
                              child: exportType == ExportType.pdf ? const Icon(Icons.check_outlined) : Container()),
                        ),
                      ],
                    ),
                  ),
                  const SizedBox(height: 10),
                  SizedBox(
                    height: 60,
                    width: double.infinity,
                    child: ElevatedButton(
                      onPressed: () {
                        switch (exportType) {
                          case ExportType.docx:
                            _exportDocx(context, memory, false);
                            break;
                          case ExportType.pdf:
                            _exportPDF(memory, false);
                            break;
                          case ExportType.markdown:
                            _exportMarkdown(memory);
                            break;
                          case ExportType.txt:
                            _exportSummary(memory);
                            break;
                          default:
                            _fullExport(memory, context, true);
                        }
                      },
                      child: Text(
                        'Export',
                        style: Theme.of(context).textTheme.bodyLarge,
                      ),
                    ),
                  ),
                ]
              ],
            ),
          );
        },
      );
    },
  );
}

ListTile _buildListTile(
  BuildContext context, {
  required String title,
  required IconData icon,
  required Function onTap,
}) {
  return ListTile(
    title: Text(title),
    leading: Icon(icon),
    onTap: () {
      onTap();
    },
  );
}

void _exportAudio(BuildContext context, Memory memory) async {
  final audioPath = memory.recordingFilePath;
  if (audioPath == null || audioPath.isEmpty) {
    ScaffoldMessenger.of(context).showSnackBar(const SnackBar(
      content: Text('Audio file not available'),
    ));
    return;
  }

  final audioFile = File(audioPath);
  await Share.shareXFiles([XFile(audioFile.path)], text: header);
}

void _exportPDF(Memory memory, bool isTranscript) async {
  final pdf = pw.Document();

  final structured = memory.structured.target!;

  if (isTranscript) {
    pdf.addPage(
      pw.Page(
        build: (pw.Context context) => pw.Column(
          crossAxisAlignment: pw.CrossAxisAlignment.start,
          children: [
            pw.Text('Memory Export', style: const pw.TextStyle(fontSize: 24)),
            pw.SizedBox(height: 12),
            pw.Text('Title: ${structured.title}', style: const pw.TextStyle(fontSize: 18)),
            pw.SizedBox(height: 12),
            pw.Text('Overview', style: const pw.TextStyle(fontSize: 18)),
            pw.Text(structured.overview),
            pw.SizedBox(height: 12),
            pw.Text('Action Items', style: const pw.TextStyle(fontSize: 18)),
            ...structured.actionItems.map((e) => pw.Text('- ${e.description}')),
            pw.SizedBox(height: 12),
            pw.Text('Transcript', style: const pw.TextStyle(fontSize: 18)),
            pw.Text(memory.getTranscript()),
          ],
        ),
      ),
    );
  } else {
    pdf.addPage(
      pw.Page(
        build: (pw.Context context) => pw.Column(
          crossAxisAlignment: pw.CrossAxisAlignment.start,
          children: [
            pw.Text('Memory Export', style: const pw.TextStyle(fontSize: 24)),
            pw.SizedBox(height: 12),
            pw.Text('Title: ${structured.title}', style: const pw.TextStyle(fontSize: 18)),
            pw.SizedBox(height: 12),
            pw.Text('Overview', style: const pw.TextStyle(fontSize: 18)),
            pw.Text(structured.overview),
            pw.SizedBox(height: 12),
            pw.Text('Action Items', style: const pw.TextStyle(fontSize: 18)),
            ...structured.actionItems.map((e) => pw.Text('- ${e.description}')),
            pw.SizedBox(height: 12),
            pw.Text('Summary', style: const pw.TextStyle(fontSize: 18)),
            pw.Text(structured.overview),
          ],
        ),
      ),
    );
  }

  final directory = await getApplicationDocumentsDirectory();
  final file = File('${directory.path}/memory_export.pdf');
  await file.writeAsBytes(await pdf.save());

  await Share.shareXFiles([XFile(file.path)], text: header);
}

void _exportTranscript(Memory memory) async {
  final directory = await getApplicationDocumentsDirectory();
  final transcriptFile = File('${directory.path}/memory_transcript.txt');
  final transcript = "$header ${memory.getTranscript()}";
  await transcriptFile.writeAsString(transcript);

  await Share.shareXFiles([XFile(transcriptFile.path)], text: header);
}

void _exportSummary(Memory memory) async {
  final directory = await getApplicationDocumentsDirectory();
  final transcriptFile = File('${directory.path}/summary.txt');
  final transcript = "$header ${memory.structured.target?.overview}";
  await transcriptFile.writeAsString(transcript);

  await Share.shareXFiles([XFile(transcriptFile.path)], text: header);
}

void _fullExport(Memory memory, BuildContext context, bool isTranscript) async {
  try {
    final directory = await getApplicationDocumentsDirectory();

    final audioPath = memory.recordingFilePath;
    File? audioFile;
    if (audioPath != null && audioPath.isNotEmpty) {
      audioFile = File(audioPath);
    }

    final transcriptFile = File('${directory.path}/memory_transcript.txt');
    final transcript = "$header ${memory.getTranscript()}";
    await transcriptFile.writeAsString(transcript);

    final summaryFile = File('${directory.path}/memory_summary.txt');
    final summary = "$header ${memory.structured.target!.overview}";
    await summaryFile.writeAsString(summary);

    final zipFile = File('${directory.path}/memory_export.zip');
    final encoder = ZipFileEncoder();
    encoder.create(zipFile.path);
    if (audioFile != null) encoder.addFile(audioFile);
    if (isTranscript) {
      encoder.addFile(transcriptFile);
    } else {
      encoder.addFile(summaryFile);
    }

    encoder.close();

    await Share.shareXFiles([XFile(zipFile.path)], text: header);
  } catch (e) {
    if (!context.mounted) {
      return;
    }
    if (context.mounted) {
      ScaffoldMessenger.of(context).showSnackBar(const SnackBar(
        content: Text('Failed to export full memory'),
      ));
    }
  }
}

void _exportMarkdown(Memory memory) async {
  final directory = await getApplicationDocumentsDirectory();
  final markdownFile = File('${directory.path}/memory_export.md');
  final structured = memory.structured.target!;
  final markdown = """
    # Summary Export

    ## Title: ${structured.title}

   

    ### Action Items
    ${structured.actionItems.map((e) => '- ${e.description}').join('\n')}

    ### summary
    ${memory.structured.target?.overview}
    """;
  await markdownFile.writeAsString(markdown);

  await Share.shareXFiles([XFile(markdownFile.path)], text: header);
}

Future<void> _exportSRT(Memory memory, bool includeTimestamps) async {
  final buffer = StringBuffer();

  for (int i = 0; i < memory.transcriptSegments.length; i++) {
    final segment = memory.transcriptSegments[i];

    String startTime = _formatTime(segment.start);
    String endTime = _formatTime(segment.end);

    buffer.writeln('${i + 1}');
    buffer.writeln('$startTime --> $endTime');

    if (includeTimestamps) {
      buffer.writeln(segment.text);
    } else {
      buffer.writeln('Speaker ${segment.speakerId}: ${segment.text}');
    }

    buffer.writeln();
  }

  final directory = await getApplicationDocumentsDirectory();
  final filePath = '${directory.path}/memory_${memory.id}.srt';
  final file = File(filePath);

  await file.writeAsString(buffer.toString());

  Share.shareXFiles([XFile(file.path)]);
}

String _formatTime(double time) {
  final hours = (time ~/ 3600).toString().padLeft(2, '0');
  final minutes = ((time % 3600) ~/ 60).toString().padLeft(2, '0');
  final seconds = (time % 60).toString().padLeft(2, '0');
  final milliseconds = ((time % 1) * 1000).toInt().toString().padLeft(3, '0');

  return '$hours:$minutes:$seconds,$milliseconds';
}

void _exportDocx(BuildContext context, Memory memory, bool isTranscript) async {
  try {
    
    final ByteData data = await rootBundle.load('assets/documents/template.docx');
    final Uint8List bytes = data.buffer.asUint8List();
    final docx = await DocxTemplate.fromBytes(bytes);

   
    Content content = Content();

    String docName = "GENERATED BY FRIEND, basedhardware.com";
    content.add(TextContent("docname", docName));
    

 
    final title = memory.structured.target?.title ?? "Untitled";
    content.add(TextContent("title", title));
    


    final transcriptOrSummary = isTranscript ? memory.transcript : "";
    content.add(TextContent("transcript", transcriptOrSummary));
    

    final summary = !isTranscript ? memory.transcript : "";
    content.add(TextContent("Summary", summary));
  

  
    final actionItems = memory.structured.target?.actionItems;
    if (actionItems != null && actionItems.isNotEmpty) {
      List<Content> actionItemsList = [];
      for (var item in actionItems) {
        actionItemsList.add(Content()..add(TextContent("item", item.description!)));
        print('Adding Action Item: ${item.description}');
            }
      content.add(ListContent("actionItems", actionItemsList));
    }

   
    final generatedBytes = await docx.generate(content);
    if (generatedBytes == null) {
      throw Exception("Failed to generate DOCX file: generatedBytes is null.");
    }

  
    final directory = await getApplicationDocumentsDirectory();
    final filePath = '${directory.path}/memory_${memory.id}.docx';
    final file = File(filePath);
    await file.writeAsBytes(generatedBytes);

    // Share the generated DOCX file
    Share.shareXFiles([XFile(filePath)], text: 'Memory DOCX for ${memory.structured.target?.title ?? 'Memory'}');
   
  } catch (e) {
    if(!context.mounted) {
      return;
    }
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('Failed to export document: $e')),
    );
  }
}

showOptionsBottomSheet(
  BuildContext context,
  StateSetter setState,
  Memory memory,
  Function(BuildContext, StateSetter, Memory, Function) reprocessMemory,
) async {
  bool loadingReprocessMemory = false;
  var result = await showModalBottomSheet(
      context: context,
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.only(
          topLeft: Radius.circular(16),
          topRight: Radius.circular(16),
        ),
      ),
      builder: (context) => StatefulBuilder(builder: (context, setModalState) {
            return Container(
              height: 216,
              decoration: BoxDecoration(
                color: Theme.of(context).colorScheme.surface,
                borderRadius: const BorderRadius.only(
                  topLeft: Radius.circular(16),
                  topRight: Radius.circular(16),
                ),
              ),
              padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 16),
              child: Column(
                children: [
                  ListTile(
                    title: const Text('Share memory'),
                    leading: const Icon(Icons.send),
                    onTap: loadingReprocessMemory
                        ? null
                        : () {
                            // share loading
                            MixpanelManager().memoryShareButtonClick(memory);
                            Share.share(memory.structured.target!.toString());
                            HapticFeedback.lightImpact();
                          },
                  ),
                  ListTile(
                    title: const Text('Re-summarize'),
                    leading: loadingReprocessMemory
                        ? const SizedBox(
                            width: 24,
                            height: 24,
                            child: CircularProgressIndicator(
                              valueColor: AlwaysStoppedAnimation<Color>(Colors.deepPurple),
                            ))
                        : const Icon(Icons.refresh, color: Colors.deepPurple),
                    onTap: loadingReprocessMemory
                        ? null
                        : () => reprocessMemory(context, setModalState, memory, () {
                              setModalState(() {
                                loadingReprocessMemory = !loadingReprocessMemory;
                              });
                            }),
                  ),
                  ListTile(
                    title: const Text('Delete'),
                    leading: const Icon(
                      Icons.delete,
                      color: Colors.red,
                    ),
                    onTap: loadingReprocessMemory
                        ? null
                        : () {
                            showDialog(
                              context: context,
                              builder: (dialogContext) {
                                return Dialog(
                                  elevation: 0,
                                  insetPadding: EdgeInsets.zero,
                                  backgroundColor: Colors.transparent,
                                  alignment: const AlignmentDirectional(0.0, 0.0).resolve(Directionality.of(context)),
                                  child: ConfirmDeletionWidget(
                                      memory: memory,
                                      onDelete: () {
                                        Navigator.pop(context, true);
                                        Navigator.pop(context, true);
                                      }),
                                );
                              },
                            );
                          },
                  )
                ],
              ),
            );
          }));
  if (result == true) setState(() {});
  debugPrint('showBottomSheet result: $result');
}
