# Uncomment this line to define a global platform for your project
platform :ios, '15.0'

# Move these to the top level, before any target definitions
use_frameworks! :linkage => :static
use_modular_headers!

# CocoaPods analytics sends network stats synchronously affecting flutter build latency.
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

# Add script to download XCFrameworks
def download_xcframework(url, name)
  require 'shellwords'
  require 'uri'

  # Validate inputs
  raise "Invalid URL" unless url =~ URI::regexp
  raise "Invalid name" unless name =~ /^[a-zA-Z0-9_-]+$/

  escaped_url = Shellwords.escape(url)
  escaped_name = Shellwords.escape(name)
  system("echo downloading #{url}")
  download_success = system("curl -L #{escaped_url} -o #{escaped_name}.xcframework.zip")
  raise "Download failed" unless download_success

  unzip_success = system("unzip -o #{escaped_name}.xcframework.zip")
  raise "Extraction failed" unless unzip_success

  framework_path = "#{escaped_name}.xcframework"
  raise "Framework not found after extraction" unless Dir.exist?(framework_path)

  File.delete("#{escaped_name}.xcframework.zip")
end

project 'Runner', {
  'Debug-prod' => :debug,
  'Profile-prod' => :release,
  'Release-prod' => :release,
  'Debug-dev' => :debug,
  'Profile-dev' => :release,
  'Release-dev' => :release,
}

def flutter_root
	generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
	unless File.exist?(generated_xcode_build_settings_path)
		raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
	end

	File.foreach(generated_xcode_build_settings_path) do |line|
		matches = line.match(/FLUTTER_ROOT\=(.*)/)
		return matches[1].strip if matches
	end
	raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

flutter_ios_podfile_setup

# Add Firebase pods with explicit modular headers setting
pod 'Firebase/Core', :modular_headers => true
pod 'Firebase/Analytics', :modular_headers => true
pod 'GoogleUtilities', :modular_headers => true
pod 'FirebaseCoreInternal', :modular_headers => true

# Download XCFrameworks before installing pods
download_xcframework("https://github.com/sbooth/opus-binary-xcframework/releases/download/0.2.0/opus.xcframework.zip", "opus")
download_xcframework("https://github.com/sbooth/ogg-binary-xcframework/releases/download/0.1.0/ogg.xcframework.zip", "ogg")

target 'Runner' do
	flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
end

post_install do |installer|
	installer.pods_project.targets.each do |target|
		flutter_additional_ios_build_settings(target)

		# Force Swift modules for all pods
		target.build_configurations.each do |config|
			config.build_settings['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'YES'
			config.build_settings['DEFINES_MODULE'] = 'YES'
			config.build_settings.delete 'IPHONEOS_DEPLOYMENT_TARGET'

			# Add framework search paths for manually added XCFrameworks
			config.build_settings['FRAMEWORK_SEARCH_PATHS'] ||= ['$(inherited)']
			config.build_settings['FRAMEWORK_SEARCH_PATHS'] << '$(PROJECT_DIR)'

			# Add specific settings for opus and ogg
			config.build_settings['OTHER_LDFLAGS'] ||= ['$(inherited)']
			config.build_settings['OTHER_LDFLAGS'] << '-framework opus'
			config.build_settings['OTHER_LDFLAGS'] << '-framework ogg'

			config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= [
				'$(inherited)',

				# dart: PermissionGroup.notification
				'PERMISSION_NOTIFICATIONS=1',

				# dart: PermissionGroup.bluetooth
				'PERMISSION_BLUETOOTH=1',

				## The 'PERMISSION_LOCATION' macro enables the `locationWhenInUse` and `locationAlways` permission. If
				## the application only requires `locationWhenInUse`, only specify the `PERMISSION_LOCATION_WHENINUSE`
				## macro.
				##
				## dart: [PermissionGroup.location, PermissionGroup.locationAlways, PermissionGroup.locationWhenInUse]
				'PERMISSION_LOCATION=1',
				'PERMISSION_LOCATION_WHENINUSE=1',
				'PERMISSION_LOCATION_ALWAYS=1',

				## dart: PermissionGroup.calendarFullAccess
				'PERMISSION_EVENTS_FULL_ACCESS=1',

				## dart: PermissionGroup.calendar
				'PERMISSION_EVENTS=1',
			]
		end
	end
end
