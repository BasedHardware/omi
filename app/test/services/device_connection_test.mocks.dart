// Mocks generated by Mockito 5.4.4 from annotations
// in friend_private/test/services/device_connection_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:friend_private/backend/schema/bt_device/bt_device.dart' as _i3;
import 'package:friend_private/services/devices.dart' as _i2;
import 'package:friend_private/services/devices/device_connection.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [DeviceService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeviceService extends _i1.Mock implements _i2.DeviceService {
  MockDeviceService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get mutex => (super.noSuchMethod(
        Invocation.getter(#mutex),
        returnValue: false,
      ) as bool);

  @override
  set mutex(bool? _mutex) => super.noSuchMethod(
        Invocation.setter(
          #mutex,
          _mutex,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i3.BtDevice> get devices => (super.noSuchMethod(
        Invocation.getter(#devices),
        returnValue: <_i3.BtDevice>[],
      ) as List<_i3.BtDevice>);

  @override
  _i2.DeviceServiceStatus get status => (super.noSuchMethod(
        Invocation.getter(#status),
        returnValue: _i2.DeviceServiceStatus.init,
      ) as _i2.DeviceServiceStatus);

  @override
  _i4.Future<void> discover({
    String? desirableDeviceId,
    int? timeout = 5,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #discover,
          [],
          {
            #desirableDeviceId: desirableDeviceId,
            #timeout: timeout,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void subscribe(
    _i2.IDeviceServiceSubsciption? subscription,
    Object? context,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #subscribe,
          [
            subscription,
            context,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void unsubscribe(Object? context) => super.noSuchMethod(
        Invocation.method(
          #unsubscribe,
          [context],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void start() => super.noSuchMethod(
        Invocation.method(
          #start,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void stop() => super.noSuchMethod(
        Invocation.method(
          #stop,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onStatusChanged(_i2.DeviceServiceStatus? status) => super.noSuchMethod(
        Invocation.method(
          #onStatusChanged,
          [status],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onDeviceConnectionStateChanged(
    String? deviceId,
    _i2.DeviceConnectionState? state,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onDeviceConnectionStateChanged,
          [
            deviceId,
            state,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onDevices(List<_i3.BtDevice>? devices) => super.noSuchMethod(
        Invocation.method(
          #onDevices,
          [devices],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<_i5.DeviceConnection?> ensureConnection(
    String? deviceId, {
    bool? force = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #ensureConnection,
          [deviceId],
          {#force: force},
        ),
        returnValue: _i4.Future<_i5.DeviceConnection?>.value(),
      ) as _i4.Future<_i5.DeviceConnection?>);
}
