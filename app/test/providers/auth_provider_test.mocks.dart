// Mocks generated by Mockito 5.4.4 from annotations
// in friend_private/test/providers/auth_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i5;

import 'package:firebase_auth/firebase_auth.dart' as _i3;
import 'package:friend_private/providers/auth_provider.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [AuthenticationProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthenticationProvider extends _i1.Mock
    implements _i2.AuthenticationProvider {
  MockAuthenticationProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set user(_i3.User? _user) => super.noSuchMethod(
        Invocation.setter(
          #user,
          _user,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set authToken(String? _authToken) => super.noSuchMethod(
        Invocation.setter(
          #authToken,
          _authToken,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get loading => (super.noSuchMethod(
        Invocation.getter(#loading),
        returnValue: false,
      ) as bool);

  @override
  set loading(bool? _loading) => super.noSuchMethod(
        Invocation.setter(
          #loading,
          _loading,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  bool isSignedIn() => (super.noSuchMethod(
        Invocation.method(
          #isSignedIn,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<void> onGoogleSignIn(dynamic Function()? onSignIn) =>
      (super.noSuchMethod(
        Invocation.method(
          #onGoogleSignIn,
          [onSignIn],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> onAppleSignIn(dynamic Function()? onSignIn) =>
      (super.noSuchMethod(
        Invocation.method(
          #onAppleSignIn,
          [onSignIn],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void openTermsOfService() => super.noSuchMethod(
        Invocation.method(
          #openTermsOfService,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void openPrivacyPolicy() => super.noSuchMethod(
        Invocation.method(
          #openPrivacyPolicy,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setLoadingState(bool? value) => super.noSuchMethod(
        Invocation.method(
          #setLoadingState,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
