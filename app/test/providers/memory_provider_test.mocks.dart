// Mocks generated by Mockito 5.4.4 from annotations
// in friend_private/test/providers/memory_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:ui' as _i7;

import 'package:friend_private/backend/schema/memory.dart' as _i3;
import 'package:friend_private/providers/memory_provider.dart' as _i2;
import 'package:friend_private/services/wals.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDateTime_0 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MemoryProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockMemoryProvider extends _i1.Mock implements _i2.MemoryProvider {
  MockMemoryProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i3.ServerMemory> get memories => (super.noSuchMethod(
        Invocation.getter(#memories),
        returnValue: <_i3.ServerMemory>[],
      ) as List<_i3.ServerMemory>);

  @override
  set memories(List<_i3.ServerMemory>? _memories) => super.noSuchMethod(
        Invocation.setter(
          #memories,
          _memories,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<DateTime, List<_i3.ServerMemory>> get groupedMemories =>
      (super.noSuchMethod(
        Invocation.getter(#groupedMemories),
        returnValue: <DateTime, List<_i3.ServerMemory>>{},
      ) as Map<DateTime, List<_i3.ServerMemory>>);

  @override
  set groupedMemories(
          Map<DateTime, List<_i3.ServerMemory>>? _groupedMemories) =>
      super.noSuchMethod(
        Invocation.setter(
          #groupedMemories,
          _groupedMemories,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isLoadingMemories => (super.noSuchMethod(
        Invocation.getter(#isLoadingMemories),
        returnValue: false,
      ) as bool);

  @override
  set isLoadingMemories(bool? _isLoadingMemories) => super.noSuchMethod(
        Invocation.setter(
          #isLoadingMemories,
          _isLoadingMemories,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasNonDiscardedMemories => (super.noSuchMethod(
        Invocation.getter(#hasNonDiscardedMemories),
        returnValue: false,
      ) as bool);

  @override
  set hasNonDiscardedMemories(bool? _hasNonDiscardedMemories) =>
      super.noSuchMethod(
        Invocation.setter(
          #hasNonDiscardedMemories,
          _hasNonDiscardedMemories,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get showDiscardedMemories => (super.noSuchMethod(
        Invocation.getter(#showDiscardedMemories),
        returnValue: false,
      ) as bool);

  @override
  set showDiscardedMemories(bool? _showDiscardedMemories) => super.noSuchMethod(
        Invocation.setter(
          #showDiscardedMemories,
          _showDiscardedMemories,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get previousQuery => (super.noSuchMethod(
        Invocation.getter(#previousQuery),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#previousQuery),
        ),
      ) as String);

  @override
  set previousQuery(String? _previousQuery) => super.noSuchMethod(
        Invocation.setter(
          #previousQuery,
          _previousQuery,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i3.ServerMemory> get processingMemories => (super.noSuchMethod(
        Invocation.getter(#processingMemories),
        returnValue: <_i3.ServerMemory>[],
      ) as List<_i3.ServerMemory>);

  @override
  set processingMemories(List<_i3.ServerMemory>? _processingMemories) =>
      super.noSuchMethod(
        Invocation.setter(
          #processingMemories,
          _processingMemories,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isSyncing => (super.noSuchMethod(
        Invocation.getter(#isSyncing),
        returnValue: false,
      ) as bool);

  @override
  set isSyncing(bool? _isSyncing) => super.noSuchMethod(
        Invocation.setter(
          #isSyncing,
          _isSyncing,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get syncCompleted => (super.noSuchMethod(
        Invocation.getter(#syncCompleted),
        returnValue: false,
      ) as bool);

  @override
  set syncCompleted(bool? _syncCompleted) => super.noSuchMethod(
        Invocation.setter(
          #syncCompleted,
          _syncCompleted,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<bool> get multipleSyncs => (super.noSuchMethod(
        Invocation.getter(#multipleSyncs),
        returnValue: <bool>[],
      ) as List<bool>);

  @override
  set multipleSyncs(List<bool>? _multipleSyncs) => super.noSuchMethod(
        Invocation.setter(
          #multipleSyncs,
          _multipleSyncs,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isFetchingMemories => (super.noSuchMethod(
        Invocation.getter(#isFetchingMemories),
        returnValue: false,
      ) as bool);

  @override
  set isFetchingMemories(bool? _isFetchingMemories) => super.noSuchMethod(
        Invocation.setter(
          #isFetchingMemories,
          _isFetchingMemories,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i3.SyncedMemoryPointer> get syncedMemoriesPointers =>
      (super.noSuchMethod(
        Invocation.getter(#syncedMemoriesPointers),
        returnValue: <_i3.SyncedMemoryPointer>[],
      ) as List<_i3.SyncedMemoryPointer>);

  @override
  set syncedMemoriesPointers(
          List<_i3.SyncedMemoryPointer>? _syncedMemoriesPointers) =>
      super.noSuchMethod(
        Invocation.setter(
          #syncedMemoriesPointers,
          _syncedMemoriesPointers,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<String, _i3.ServerMemory> get memoriesToDelete => (super.noSuchMethod(
        Invocation.getter(#memoriesToDelete),
        returnValue: <String, _i3.ServerMemory>{},
      ) as Map<String, _i3.ServerMemory>);

  @override
  set memoriesToDelete(Map<String, _i3.ServerMemory>? _memoriesToDelete) =>
      super.noSuchMethod(
        Invocation.setter(
          #memoriesToDelete,
          _memoriesToDelete,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i5.Wal> get missingWals => (super.noSuchMethod(
        Invocation.getter(#missingWals),
        returnValue: <_i5.Wal>[],
      ) as List<_i5.Wal>);

  @override
  int get missingWalsInSeconds => (super.noSuchMethod(
        Invocation.getter(#missingWalsInSeconds),
        returnValue: 0,
      ) as int);

  @override
  double get walsSyncedProgress => (super.noSuchMethod(
        Invocation.getter(#walsSyncedProgress),
        returnValue: 0.0,
      ) as double);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void addProcessingMemory(_i3.ServerMemory? memory) => super.noSuchMethod(
        Invocation.method(
          #addProcessingMemory,
          [memory],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeProcessingMemory(String? memoryId) => super.noSuchMethod(
        Invocation.method(
          #removeProcessingMemory,
          [memoryId],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onMemoryTap(int? idx) => super.noSuchMethod(
        Invocation.method(
          #onMemoryTap,
          [idx],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void toggleDiscardMemories() => super.noSuchMethod(
        Invocation.method(
          #toggleDiscardMemories,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setLoadingMemories(bool? value) => super.noSuchMethod(
        Invocation.method(
          #setLoadingMemories,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<dynamic> getInitialMemories() => (super.noSuchMethod(
        Invocation.method(
          #getInitialMemories,
          [],
        ),
        returnValue: _i6.Future<dynamic>.value(),
      ) as _i6.Future<dynamic>);

  @override
  void groupMemoriesByDate() => super.noSuchMethod(
        Invocation.method(
          #groupMemoriesByDate,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void filterGroupedMemories(String? query) => super.noSuchMethod(
        Invocation.method(
          #filterGroupedMemories,
          [query],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<dynamic> getMemoriesFromServer() => (super.noSuchMethod(
        Invocation.method(
          #getMemoriesFromServer,
          [],
        ),
        returnValue: _i6.Future<dynamic>.value(),
      ) as _i6.Future<dynamic>);

  @override
  _i6.Future<dynamic> getMoreMemoriesFromServer() => (super.noSuchMethod(
        Invocation.method(
          #getMoreMemoriesFromServer,
          [],
        ),
        returnValue: _i6.Future<dynamic>.value(),
      ) as _i6.Future<dynamic>);

  @override
  void addMemory(_i3.ServerMemory? memory) => super.noSuchMethod(
        Invocation.method(
          #addMemory,
          [memory],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void upsertMemory(_i3.ServerMemory? memory) => super.noSuchMethod(
        Invocation.method(
          #upsertMemory,
          [memory],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addMemoryToGroupedMemories(_i3.ServerMemory? memory) =>
      super.noSuchMethod(
        Invocation.method(
          #addMemoryToGroupedMemories,
          [memory],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateMemoryInSortedList(_i3.ServerMemory? memory) => super.noSuchMethod(
        Invocation.method(
          #updateMemoryInSortedList,
          [memory],
        ),
        returnValueForMissingStub: null,
      );

  @override
  (int, DateTime) addMemoryWithDateGrouped(_i3.ServerMemory? memory) =>
      (super.noSuchMethod(
        Invocation.method(
          #addMemoryWithDateGrouped,
          [memory],
        ),
        returnValue: (
          0,
          _FakeDateTime_0(
            this,
            Invocation.method(
              #addMemoryWithDateGrouped,
              [memory],
            ),
          )
        ),
      ) as (int, DateTime));

  @override
  void updateMemory(
    _i3.ServerMemory? memory, [
    int? index,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #updateMemory,
          [
            memory,
            index,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void deleteMemoryLocally(
    _i3.ServerMemory? memory,
    int? index,
    DateTime? date,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #deleteMemoryLocally,
          [
            memory,
            index,
            date,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void deleteMemoryOnServer(String? memoryId) => super.noSuchMethod(
        Invocation.method(
          #deleteMemoryOnServer,
          [memoryId],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void undoDeleteMemory(
    String? memoryId,
    int? index,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #undoDeleteMemory,
          [
            memoryId,
            index,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void deleteMemory(
    _i3.ServerMemory? memory,
    int? index,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #deleteMemory,
          [
            memory,
            index,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onMissingWalUpdated() => super.noSuchMethod(
        Invocation.method(
          #onMissingWalUpdated,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onWalSynced(
    _i5.Wal? wal, {
    _i3.ServerMemory? memory,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #onWalSynced,
          [wal],
          {#memory: memory},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onStatusChanged(_i5.WalServiceStatus? status) => super.noSuchMethod(
        Invocation.method(
          #onStatusChanged,
          [status],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onWalSyncedProgress(double? percentage) => super.noSuchMethod(
        Invocation.method(
          #onWalSyncedProgress,
          [percentage],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<dynamic> syncWals() => (super.noSuchMethod(
        Invocation.method(
          #syncWals,
          [],
        ),
        returnValue: _i6.Future<dynamic>.value(),
      ) as _i6.Future<dynamic>);

  @override
  _i6.Future<dynamic> syncWal(_i5.Wal? wal) => (super.noSuchMethod(
        Invocation.method(
          #syncWal,
          [wal],
        ),
        returnValue: _i6.Future<dynamic>.value(),
      ) as _i6.Future<dynamic>);

  @override
  void setSyncCompleted(bool? value) => super.noSuchMethod(
        Invocation.method(
          #setSyncCompleted,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<dynamic> getSyncedMemoriesData(
          _i3.SyncLocalFilesResponse? syncResult) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSyncedMemoriesData,
          [syncResult],
        ),
        returnValue: _i6.Future<dynamic>.value(),
      ) as _i6.Future<dynamic>);

  @override
  void addSyncedMemoriesToGroupedMemories(
          Map<dynamic, dynamic>? syncedMemories) =>
      super.noSuchMethod(
        Invocation.method(
          #addSyncedMemoriesToGroupedMemories,
          [syncedMemories],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateSyncedMemoryPointerIndex(
    _i3.SyncedMemoryPointer? mem,
    int? index,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #updateSyncedMemoryPointerIndex,
          [
            mem,
            index,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateSyncedMemory(_i3.ServerMemory? memory) => super.noSuchMethod(
        Invocation.method(
          #updateSyncedMemory,
          [memory],
        ),
        returnValueForMissingStub: null,
      );

  @override
  (DateTime, int) getMemoryDateAndIndex(_i3.ServerMemory? memory) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMemoryDateAndIndex,
          [memory],
        ),
        returnValue: (
          _FakeDateTime_0(
            this,
            Invocation.method(
              #getMemoryDateAndIndex,
              [memory],
            ),
          ),
          0
        ),
      ) as (DateTime, int));

  @override
  _i6.Future<_i3.ServerMemory?> getMemoryDetails(String? memoryId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMemoryDetails,
          [memoryId],
        ),
        returnValue: _i6.Future<_i3.ServerMemory?>.value(),
      ) as _i6.Future<_i3.ServerMemory?>);

  @override
  void clearSyncResult() => super.noSuchMethod(
        Invocation.method(
          #clearSyncResult,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setIsSyncing(bool? value) => super.noSuchMethod(
        Invocation.method(
          #setIsSyncing,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void appendMultipleSyncs(bool? value) => super.noSuchMethod(
        Invocation.method(
          #appendMultipleSyncs,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeMultipleSyncs() => super.noSuchMethod(
        Invocation.method(
          #removeMultipleSyncs,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clearMultipleSyncs() => super.noSuchMethod(
        Invocation.method(
          #clearMultipleSyncs,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setIsFetchingMemories(bool? value) => super.noSuchMethod(
        Invocation.method(
          #setIsFetchingMemories,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
