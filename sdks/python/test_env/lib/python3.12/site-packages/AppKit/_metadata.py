# This file is generated by objective.metadata
#
# Last update: Sat May 18 09:19:02 2024
#
# flake8: noqa

import objc, sys
from typing import NewType

if sys.maxsize > 2**32:

    def sel32or64(a, b):
        return b

else:

    def sel32or64(a, b):
        return a


if objc.arch == "arm64":

    def selAorI(a, b):
        return a

else:

    def selAorI(a, b):
        return b


misc = {}
misc.update(
    {
        "NSDirectionalEdgeInsets": objc.createStructType(
            "AppKit.NSDirectionalEdgeInsets",
            b"{NSDirectionalEdgeInsets=dddd}",
            ["top", "leading", "bottom", "trailing"],
        ),
        "NSOpenGLPixelFormatAuxiliary": objc.createStructType(
            "AppKit.NSOpenGLPixelFormatAuxiliary", b"{_CGLPixelFormatObject=}", []
        ),
        "NSScreenAuxiliaryOpaque": objc.createStructType(
            "AppKit.NSScreenAuxiliaryOpaque", b"{NSScreenAuxiliary=}", []
        ),
        "NSOpenGLContextAuxiliary": objc.createStructType(
            "AppKit.NSOpenGLContextAuxiliary", b"{_CGLContextObject=}", []
        ),
    }
)
constants = """$NSAbortModalException$NSAbortPrintingException$NSAboutPanelOptionApplicationIcon$NSAboutPanelOptionApplicationName$NSAboutPanelOptionApplicationVersion$NSAboutPanelOptionCredits$NSAboutPanelOptionVersion$NSAccessibilityActivationPointAttribute$NSAccessibilityAllowedValuesAttribute$NSAccessibilityAlternateUIVisibleAttribute$NSAccessibilityAnnotationElement$NSAccessibilityAnnotationLabel$NSAccessibilityAnnotationLocation$NSAccessibilityAnnotationTextAttribute$NSAccessibilityAnnouncementKey$NSAccessibilityAnnouncementRequestedNotification$NSAccessibilityApplicationActivatedNotification$NSAccessibilityApplicationDeactivatedNotification$NSAccessibilityApplicationHiddenNotification$NSAccessibilityApplicationRole$NSAccessibilityApplicationShownNotification$NSAccessibilityAscendingSortDirectionValue$NSAccessibilityAttachmentTextAttribute$NSAccessibilityAttributedStringForRangeParameterizedAttribute$NSAccessibilityAutocorrectedTextAttribute$NSAccessibilityBackgroundColorTextAttribute$NSAccessibilityBoundsForRangeParameterizedAttribute$NSAccessibilityBrowserRole$NSAccessibilityBusyIndicatorRole$NSAccessibilityButtonRole$NSAccessibilityCancelAction$NSAccessibilityCancelButtonAttribute$NSAccessibilityCellForColumnAndRowParameterizedAttribute$NSAccessibilityCellRole$NSAccessibilityCenterTabStopMarkerTypeValue$NSAccessibilityCentimetersUnitValue$NSAccessibilityCheckBoxRole$NSAccessibilityChildrenAttribute$NSAccessibilityClearButtonAttribute$NSAccessibilityCloseButtonAttribute$NSAccessibilityCloseButtonSubrole$NSAccessibilityCollectionListSubrole$NSAccessibilityColorWellRole$NSAccessibilityColumnCountAttribute$NSAccessibilityColumnHeaderUIElementsAttribute$NSAccessibilityColumnIndexRangeAttribute$NSAccessibilityColumnRole$NSAccessibilityColumnTitlesAttribute$NSAccessibilityColumnsAttribute$NSAccessibilityComboBoxRole$NSAccessibilityConfirmAction$NSAccessibilityContainsProtectedContentAttribute$NSAccessibilityContentListSubrole$NSAccessibilityContentsAttribute$NSAccessibilityCreatedNotification$NSAccessibilityCriticalValueAttribute$NSAccessibilityCustomTextAttribute$NSAccessibilityDecimalTabStopMarkerTypeValue$NSAccessibilityDecrementAction$NSAccessibilityDecrementArrowSubrole$NSAccessibilityDecrementButtonAttribute$NSAccessibilityDecrementPageSubrole$NSAccessibilityDefaultButtonAttribute$NSAccessibilityDefinitionListSubrole$NSAccessibilityDeleteAction$NSAccessibilityDescendingSortDirectionValue$NSAccessibilityDescriptionAttribute$NSAccessibilityDescriptionListSubrole$NSAccessibilityDialogSubrole$NSAccessibilityDisclosedByRowAttribute$NSAccessibilityDisclosedRowsAttribute$NSAccessibilityDisclosingAttribute$NSAccessibilityDisclosureLevelAttribute$NSAccessibilityDisclosureTriangleRole$NSAccessibilityDocumentAttribute$NSAccessibilityDrawerCreatedNotification$NSAccessibilityDrawerRole$NSAccessibilityEditedAttribute$NSAccessibilityEnabledAttribute$NSAccessibilityErrorCodeExceptionInfo$NSAccessibilityException$NSAccessibilityExpandedAttribute$NSAccessibilityExtrasMenuBarAttribute$NSAccessibilityFilenameAttribute$NSAccessibilityFirstLineIndentMarkerTypeValue$NSAccessibilityFloatingWindowSubrole$NSAccessibilityFocusedAttribute$NSAccessibilityFocusedUIElementAttribute$NSAccessibilityFocusedUIElementChangedNotification$NSAccessibilityFocusedWindowAttribute$NSAccessibilityFocusedWindowChangedNotification$NSAccessibilityFontFamilyKey$NSAccessibilityFontNameKey$NSAccessibilityFontSizeKey$NSAccessibilityFontTextAttribute$NSAccessibilityForegroundColorTextAttribute$NSAccessibilityFrontmostAttribute$NSAccessibilityFullScreenButtonAttribute$NSAccessibilityFullScreenButtonSubrole$NSAccessibilityGridRole$NSAccessibilityGroupRole$NSAccessibilityGrowAreaAttribute$NSAccessibilityGrowAreaRole$NSAccessibilityHandleRole$NSAccessibilityHandlesAttribute$NSAccessibilityHeadIndentMarkerTypeValue$NSAccessibilityHeaderAttribute$NSAccessibilityHelpAttribute$NSAccessibilityHelpTagCreatedNotification$NSAccessibilityHelpTagRole$NSAccessibilityHiddenAttribute$NSAccessibilityHorizontalOrientationValue$NSAccessibilityHorizontalScrollBarAttribute$NSAccessibilityHorizontalUnitDescriptionAttribute$NSAccessibilityHorizontalUnitsAttribute$NSAccessibilityHorizontialUnitDescriptionAttribute$NSAccessibilityHorizontialUnitsAttribute$NSAccessibilityIdentifierAttribute$NSAccessibilityImageRole$NSAccessibilityInchesUnitValue$NSAccessibilityIncrementAction$NSAccessibilityIncrementArrowSubrole$NSAccessibilityIncrementButtonAttribute$NSAccessibilityIncrementPageSubrole$NSAccessibilityIncrementorRole$NSAccessibilityIndexAttribute$NSAccessibilityInsertionPointLineNumberAttribute$NSAccessibilityLabelUIElementsAttribute$NSAccessibilityLabelValueAttribute$NSAccessibilityLanguageTextAttribute$NSAccessibilityLayoutAreaRole$NSAccessibilityLayoutChangedNotification$NSAccessibilityLayoutItemRole$NSAccessibilityLayoutPointForScreenPointParameterizedAttribute$NSAccessibilityLayoutSizeForScreenSizeParameterizedAttribute$NSAccessibilityLeftTabStopMarkerTypeValue$NSAccessibilityLevelIndicatorRole$NSAccessibilityLineForIndexParameterizedAttribute$NSAccessibilityLinkRole$NSAccessibilityLinkTextAttribute$NSAccessibilityLinkedUIElementsAttribute$NSAccessibilityListItemIndexTextAttribute$NSAccessibilityListItemLevelTextAttribute$NSAccessibilityListItemPrefixTextAttribute$NSAccessibilityListRole$NSAccessibilityMainAttribute$NSAccessibilityMainWindowAttribute$NSAccessibilityMainWindowChangedNotification$NSAccessibilityMarkedMisspelledTextAttribute$NSAccessibilityMarkerGroupUIElementAttribute$NSAccessibilityMarkerTypeAttribute$NSAccessibilityMarkerTypeDescriptionAttribute$NSAccessibilityMarkerUIElementsAttribute$NSAccessibilityMarkerValuesAttribute$NSAccessibilityMatteContentUIElementAttribute$NSAccessibilityMatteHoleAttribute$NSAccessibilityMatteRole$NSAccessibilityMaxValueAttribute$NSAccessibilityMenuBarAttribute$NSAccessibilityMenuBarItemRole$NSAccessibilityMenuBarRole$NSAccessibilityMenuButtonRole$NSAccessibilityMenuItemRole$NSAccessibilityMenuRole$NSAccessibilityMinValueAttribute$NSAccessibilityMinimizeButtonAttribute$NSAccessibilityMinimizeButtonSubrole$NSAccessibilityMinimizedAttribute$NSAccessibilityMisspelledTextAttribute$NSAccessibilityModalAttribute$NSAccessibilityMovedNotification$NSAccessibilityNextContentsAttribute$NSAccessibilityNumberOfCharactersAttribute$NSAccessibilityOrderedByRowAttribute$NSAccessibilityOrientationAttribute$NSAccessibilityOutlineRole$NSAccessibilityOutlineRowSubrole$NSAccessibilityOverflowButtonAttribute$NSAccessibilityPageRole$NSAccessibilityParentAttribute$NSAccessibilityPicasUnitValue$NSAccessibilityPickAction$NSAccessibilityPlaceholderValueAttribute$NSAccessibilityPointsUnitValue$NSAccessibilityPopUpButtonRole$NSAccessibilityPopoverRole$NSAccessibilityPositionAttribute$NSAccessibilityPressAction$NSAccessibilityPreviousContentsAttribute$NSAccessibilityPriorityKey$NSAccessibilityProgressIndicatorRole$NSAccessibilityProxyAttribute$NSAccessibilityRTFForRangeParameterizedAttribute$NSAccessibilityRadioButtonRole$NSAccessibilityRadioGroupRole$NSAccessibilityRaiseAction$NSAccessibilityRangeForIndexParameterizedAttribute$NSAccessibilityRangeForLineParameterizedAttribute$NSAccessibilityRangeForPositionParameterizedAttribute$NSAccessibilityRatingIndicatorSubrole$NSAccessibilityRelevanceIndicatorRole$NSAccessibilityRequiredAttribute$NSAccessibilityResizedNotification$NSAccessibilityRightTabStopMarkerTypeValue$NSAccessibilityRoleAttribute$NSAccessibilityRoleDescriptionAttribute$NSAccessibilityRowCollapsedNotification$NSAccessibilityRowCountAttribute$NSAccessibilityRowCountChangedNotification$NSAccessibilityRowExpandedNotification$NSAccessibilityRowHeaderUIElementsAttribute$NSAccessibilityRowIndexRangeAttribute$NSAccessibilityRowRole$NSAccessibilityRowsAttribute$NSAccessibilityRulerMarkerRole$NSAccessibilityRulerRole$NSAccessibilityScreenPointForLayoutPointParameterizedAttribute$NSAccessibilityScreenSizeForLayoutSizeParameterizedAttribute$NSAccessibilityScrollAreaRole$NSAccessibilityScrollBarRole$NSAccessibilitySearchButtonAttribute$NSAccessibilitySearchFieldSubrole$NSAccessibilitySearchMenuAttribute$NSAccessibilitySectionListSubrole$NSAccessibilitySecureTextFieldSubrole$NSAccessibilitySelectedAttribute$NSAccessibilitySelectedCellsAttribute$NSAccessibilitySelectedCellsChangedNotification$NSAccessibilitySelectedChildrenAttribute$NSAccessibilitySelectedChildrenChangedNotification$NSAccessibilitySelectedChildrenMovedNotification$NSAccessibilitySelectedColumnsAttribute$NSAccessibilitySelectedColumnsChangedNotification$NSAccessibilitySelectedRowsAttribute$NSAccessibilitySelectedRowsChangedNotification$NSAccessibilitySelectedTextAttribute$NSAccessibilitySelectedTextChangedNotification$NSAccessibilitySelectedTextRangeAttribute$NSAccessibilitySelectedTextRangesAttribute$NSAccessibilityServesAsTitleForUIElementsAttribute$NSAccessibilityShadowTextAttribute$NSAccessibilitySharedCharacterRangeAttribute$NSAccessibilitySharedFocusElementsAttribute$NSAccessibilitySharedTextUIElementsAttribute$NSAccessibilitySheetCreatedNotification$NSAccessibilitySheetRole$NSAccessibilityShowAlternateUIAction$NSAccessibilityShowDefaultUIAction$NSAccessibilityShowMenuAction$NSAccessibilityShownMenuAttribute$NSAccessibilitySizeAttribute$NSAccessibilitySliderRole$NSAccessibilitySortButtonRole$NSAccessibilitySortButtonSubrole$NSAccessibilitySortDirectionAttribute$NSAccessibilitySplitGroupRole$NSAccessibilitySplitterRole$NSAccessibilitySplittersAttribute$NSAccessibilityStandardWindowSubrole$NSAccessibilityStaticTextRole$NSAccessibilityStrikethroughColorTextAttribute$NSAccessibilityStrikethroughTextAttribute$NSAccessibilityStringForRangeParameterizedAttribute$NSAccessibilityStyleRangeForIndexParameterizedAttribute$NSAccessibilitySubroleAttribute$NSAccessibilitySuperscriptTextAttribute$NSAccessibilitySwitchSubrole$NSAccessibilitySystemDialogSubrole$NSAccessibilitySystemFloatingWindowSubrole$NSAccessibilitySystemWideRole$NSAccessibilityTabButtonSubrole$NSAccessibilityTabGroupRole$NSAccessibilityTableRole$NSAccessibilityTableRowSubrole$NSAccessibilityTabsAttribute$NSAccessibilityTailIndentMarkerTypeValue$NSAccessibilityTextAlignmentAttribute$NSAccessibilityTextAreaRole$NSAccessibilityTextAttachmentSubrole$NSAccessibilityTextFieldRole$NSAccessibilityTextLinkSubrole$NSAccessibilityTimelineSubrole$NSAccessibilityTitleAttribute$NSAccessibilityTitleChangedNotification$NSAccessibilityTitleUIElementAttribute$NSAccessibilityToggleSubrole$NSAccessibilityToolbarButtonAttribute$NSAccessibilityToolbarButtonSubrole$NSAccessibilityToolbarRole$NSAccessibilityTopLevelUIElementAttribute$NSAccessibilityUIElementDestroyedNotification$NSAccessibilityUIElementsKey$NSAccessibilityURLAttribute$NSAccessibilityUnderlineColorTextAttribute$NSAccessibilityUnderlineTextAttribute$NSAccessibilityUnitDescriptionAttribute$NSAccessibilityUnitsAttribute$NSAccessibilityUnitsChangedNotification$NSAccessibilityUnknownMarkerTypeValue$NSAccessibilityUnknownOrientationValue$NSAccessibilityUnknownRole$NSAccessibilityUnknownSortDirectionValue$NSAccessibilityUnknownSubrole$NSAccessibilityUnknownUnitValue$NSAccessibilityValueAttribute$NSAccessibilityValueChangedNotification$NSAccessibilityValueDescriptionAttribute$NSAccessibilityValueIndicatorRole$NSAccessibilityVerticalOrientationValue$NSAccessibilityVerticalScrollBarAttribute$NSAccessibilityVerticalUnitDescriptionAttribute$NSAccessibilityVerticalUnitsAttribute$NSAccessibilityVisibleCellsAttribute$NSAccessibilityVisibleCharacterRangeAttribute$NSAccessibilityVisibleChildrenAttribute$NSAccessibilityVisibleColumnsAttribute$NSAccessibilityVisibleNameKey$NSAccessibilityVisibleRowsAttribute$NSAccessibilityWarningValueAttribute$NSAccessibilityWindowAttribute$NSAccessibilityWindowCreatedNotification$NSAccessibilityWindowDeminiaturizedNotification$NSAccessibilityWindowMiniaturizedNotification$NSAccessibilityWindowMovedNotification$NSAccessibilityWindowResizedNotification$NSAccessibilityWindowRole$NSAccessibilityWindowsAttribute$NSAccessibilityZoomButtonAttribute$NSAccessibilityZoomButtonSubrole$NSAlignmentBinding$NSAllRomanInputSourcesLocaleIdentifier$NSAllowsEditingMultipleValuesSelectionBindingOption$NSAllowsNullArgumentBindingOption$NSAlternateImageBinding$NSAlternateTitleBinding$NSAlwaysPresentsApplicationModalAlertsBindingOption$NSAnimateBinding$NSAnimationDelayBinding$NSAnimationProgressMark$NSAnimationProgressMarkNotification$NSAnimationTriggerOrderIn$NSAnimationTriggerOrderOut$NSAntialiasThresholdChangedNotification$NSApp$NSAppKitIgnoredException$NSAppKitVersionNumber@d$NSAppKitVirtualMemoryException$NSAppearanceDocumentAttribute$NSAppearanceNameAccessibilityHighContrastAqua$NSAppearanceNameAccessibilityHighContrastDarkAqua$NSAppearanceNameAccessibilityHighContrastVibrantDark$NSAppearanceNameAccessibilityHighContrastVibrantLight$NSAppearanceNameAqua$NSAppearanceNameDarkAqua$NSAppearanceNameLightContent$NSAppearanceNameVibrantDark$NSAppearanceNameVibrantLight$NSApplicationDidBecomeActiveNotification$NSApplicationDidChangeOcclusionStateNotification$NSApplicationDidChangeScreenParametersNotification$NSApplicationDidFinishLaunchingNotification$NSApplicationDidFinishRestoringWindowsNotification$NSApplicationDidHideNotification$NSApplicationDidResignActiveNotification$NSApplicationDidUnhideNotification$NSApplicationDidUpdateNotification$NSApplicationFileType$NSApplicationLaunchIsDefaultLaunchKey$NSApplicationLaunchRemoteNotificationKey$NSApplicationLaunchUserNotificationKey$NSApplicationProtectedDataDidBecomeAvailableNotification$NSApplicationProtectedDataWillBecomeUnavailableNotification$NSApplicationWillBecomeActiveNotification$NSApplicationWillFinishLaunchingNotification$NSApplicationWillHideNotification$NSApplicationWillResignActiveNotification$NSApplicationWillTerminateNotification$NSApplicationWillUnhideNotification$NSApplicationWillUpdateNotification$NSArgumentBinding$NSAttachmentAttributeName$NSAttributedStringBinding$NSAuthorDocumentAttribute$NSBackgroundColorAttributeName$NSBackgroundColorDocumentAttribute$NSBackingPropertyOldColorSpaceKey$NSBackingPropertyOldScaleFactorKey$NSBadBitmapParametersException$NSBadComparisonException$NSBadRTFColorTableException$NSBadRTFDirectiveException$NSBadRTFFontTableException$NSBadRTFStyleSheetException$NSBaseURLDocumentOption$NSBaselineOffsetAttributeName$NSBlack@d$NSBottomMarginDocumentAttribute$NSBrowserColumnConfigurationDidChangeNotification$NSBrowserIllegalDelegateException$NSCalibratedBlackColorSpace$NSCalibratedRGBColorSpace$NSCalibratedWhiteColorSpace$NSCategoryDocumentAttribute$NSCharacterEncodingDocumentAttribute$NSCharacterEncodingDocumentOption$NSCharacterShapeAttributeName$NSCocoaVersionDocumentAttribute$NSCollectionElementKindInterItemGapIndicator$NSCollectionElementKindSectionFooter$NSCollectionElementKindSectionHeader$NSColorListDidChangeNotification$NSColorListIOException$NSColorListNotEditableException$NSColorPanelColorDidChangeNotification$NSColorPboardType$NSComboBoxSelectionDidChangeNotification$NSComboBoxSelectionIsChangingNotification$NSComboBoxWillDismissNotification$NSComboBoxWillPopUpNotification$NSCommentDocumentAttribute$NSCompanyDocumentAttribute$NSConditionallySetsEditableBindingOption$NSConditionallySetsEnabledBindingOption$NSConditionallySetsHiddenBindingOption$NSContentArrayBinding$NSContentArrayForMultipleSelectionBinding$NSContentBinding$NSContentDictionaryBinding$NSContentHeightBinding$NSContentObjectBinding$NSContentObjectsBinding$NSContentPlacementTagBindingOption$NSContentSetBinding$NSContentValuesBinding$NSContentWidthBinding$NSContextHelpModeDidActivateNotification$NSContextHelpModeDidDeactivateNotification$NSContinuouslyUpdatesValueBindingOption$NSControlTextDidBeginEditingNotification$NSControlTextDidChangeNotification$NSControlTextDidEndEditingNotification$NSControlTintDidChangeNotification$NSConvertedDocumentAttribute$NSCopyrightDocumentAttribute$NSCreatesSortDescriptorBindingOption$NSCreationTimeDocumentAttribute$NSCriticalValueBinding$NSCursorAttributeName$NSCustomColorSpace$NSDarkGray@d$NSDataBinding$NSDefaultAttributesDocumentAttribute$NSDefaultAttributesDocumentOption$NSDefaultFontExcludedDocumentAttribute$NSDefaultTabIntervalDocumentAttribute$NSDefinitionPresentationTypeDictionaryApplication$NSDefinitionPresentationTypeKey$NSDefinitionPresentationTypeOverlay$NSDeletesObjectsOnRemoveBindingsOption$NSDeviceBitsPerSample$NSDeviceBlackColorSpace$NSDeviceCMYKColorSpace$NSDeviceColorSpaceName$NSDeviceIsPrinter$NSDeviceIsScreen$NSDeviceRGBColorSpace$NSDeviceResolution$NSDeviceSize$NSDeviceWhiteColorSpace$NSDirectionalEdgeInsetsZero@{NSDirectionalEdgeInsets=dddd}$NSDirectoryFileType$NSDisplayNameBindingOption$NSDisplayPatternBindingOption$NSDisplayPatternTitleBinding$NSDisplayPatternValueBinding$NSDocFormatTextDocumentType$NSDocumentEditedBinding$NSDocumentTypeDocumentAttribute$NSDocumentTypeDocumentOption$NSDoubleClickArgumentBinding$NSDoubleClickTargetBinding$NSDragPboard$NSDraggingException$NSDraggingImageComponentIconKey$NSDraggingImageComponentLabelKey$NSDrawerDidCloseNotification$NSDrawerDidOpenNotification$NSDrawerWillCloseNotification$NSDrawerWillOpenNotification$NSEditableBinding$NSEditorDocumentAttribute$NSEnabledBinding$NSEventTrackingRunLoopMode$NSExcludedElementsDocumentAttribute$NSExcludedKeysBinding$NSExpansionAttributeName$NSFileContentsPboardType$NSFileTypeDocumentAttribute$NSFileTypeDocumentOption$NSFilenamesPboardType$NSFilesPromisePboardType$NSFilesystemFileType$NSFilterPredicateBinding$NSFindPanelCaseInsensitiveSearch$NSFindPanelSearchOptionsPboardType$NSFindPanelSubstringMatch$NSFindPboard$NSFontAttributeName$NSFontBinding$NSFontBoldBinding$NSFontCascadeListAttribute$NSFontCharacterSetAttribute$NSFontCollectionActionKey$NSFontCollectionAllFonts$NSFontCollectionDidChangeNotification$NSFontCollectionDisallowAutoActivationOption$NSFontCollectionFavorites$NSFontCollectionIncludeDisabledFontsOption$NSFontCollectionNameKey$NSFontCollectionOldNameKey$NSFontCollectionRecentlyUsed$NSFontCollectionRemoveDuplicatesOption$NSFontCollectionUser$NSFontCollectionVisibilityKey$NSFontCollectionWasHidden$NSFontCollectionWasRenamed$NSFontCollectionWasShown$NSFontColorAttribute$NSFontDescriptorSystemDesignDefault$NSFontDescriptorSystemDesignMonospaced$NSFontDescriptorSystemDesignRounded$NSFontDescriptorSystemDesignSerif$NSFontFaceAttribute$NSFontFamilyAttribute$NSFontFamilyNameBinding$NSFontFeatureSelectorIdentifierKey$NSFontFeatureSettingsAttribute$NSFontFeatureTypeIdentifierKey$NSFontFixedAdvanceAttribute$NSFontIdentityMatrix@^d$NSFontItalicBinding$NSFontMatrixAttribute$NSFontNameAttribute$NSFontNameBinding$NSFontPboard$NSFontPboardType$NSFontSetChangedNotification$NSFontSizeAttribute$NSFontSizeBinding$NSFontSlantTrait$NSFontSymbolicTrait$NSFontTextStyleBody$NSFontTextStyleCallout$NSFontTextStyleCaption1$NSFontTextStyleCaption2$NSFontTextStyleFootnote$NSFontTextStyleHeadline$NSFontTextStyleLargeTitle$NSFontTextStyleSubheadline$NSFontTextStyleTitle1$NSFontTextStyleTitle2$NSFontTextStyleTitle3$NSFontTraitsAttribute$NSFontUnavailableException$NSFontVariationAttribute$NSFontVariationAxisDefaultValueKey$NSFontVariationAxisIdentifierKey$NSFontVariationAxisMaximumValueKey$NSFontVariationAxisMinimumValueKey$NSFontVariationAxisNameKey$NSFontVisibleNameAttribute$NSFontWeightBlack@d$NSFontWeightBold@d$NSFontWeightHeavy@d$NSFontWeightLight@d$NSFontWeightMedium@d$NSFontWeightRegular@d$NSFontWeightSemibold@d$NSFontWeightThin@d$NSFontWeightTrait$NSFontWeightUltraLight@d$NSFontWidthCompressed@d$NSFontWidthCondensed@d$NSFontWidthExpanded@d$NSFontWidthStandard@d$NSFontWidthTrait$NSForegroundColorAttributeName$NSFullScreenModeAllScreens$NSFullScreenModeApplicationPresentationOptions$NSFullScreenModeSetting$NSFullScreenModeWindowLevel$NSGeneralPboard$NSGlyphInfoAttributeName$NSGraphicsContextDestinationAttributeName$NSGraphicsContextPDFFormat$NSGraphicsContextPSFormat$NSGraphicsContextRepresentationFormatAttributeName$NSGridViewSizeForContent@d$NSHTMLPboardType$NSHTMLTextDocumentType$NSHandlesContentAsCompoundValueBindingOption$NSHeaderTitleBinding$NSHiddenBinding$NSHyphenationFactorDocumentAttribute$NSIllegalSelectorException$NSImageBinding$NSImageCacheException$NSImageColorSyncProfileData$NSImageCompressionFactor$NSImageCompressionMethod$NSImageCurrentFrame$NSImageCurrentFrameDuration$NSImageDitherTransparency$NSImageEXIFData$NSImageFallbackBackgroundColor$NSImageFrameCount$NSImageGamma$NSImageHintCTM$NSImageHintInterpolation$NSImageHintUserInterfaceLayoutDirection$NSImageIPTCData$NSImageInterlaced$NSImageLoopCount$NSImageNameActionTemplate$NSImageNameAddTemplate$NSImageNameAdvanced$NSImageNameApplicationIcon$NSImageNameBluetoothTemplate$NSImageNameBonjour$NSImageNameBookmarksTemplate$NSImageNameCaution$NSImageNameColorPanel$NSImageNameColumnViewTemplate$NSImageNameComputer$NSImageNameDotMac$NSImageNameEnterFullScreenTemplate$NSImageNameEveryone$NSImageNameExitFullScreenTemplate$NSImageNameFlowViewTemplate$NSImageNameFolder$NSImageNameFolderBurnable$NSImageNameFolderSmart$NSImageNameFollowLinkFreestandingTemplate$NSImageNameFontPanel$NSImageNameGoBackTemplate$NSImageNameGoForwardTemplate$NSImageNameGoLeftTemplate$NSImageNameGoRightTemplate$NSImageNameHomeTemplate$NSImageNameIChatTheaterTemplate$NSImageNameIconViewTemplate$NSImageNameInfo$NSImageNameInvalidDataFreestandingTemplate$NSImageNameLeftFacingTriangleTemplate$NSImageNameListViewTemplate$NSImageNameLockLockedTemplate$NSImageNameLockUnlockedTemplate$NSImageNameMenuMixedStateTemplate$NSImageNameMenuOnStateTemplate$NSImageNameMobileMe$NSImageNameMultipleDocuments$NSImageNameNetwork$NSImageNamePathTemplate$NSImageNamePreferencesGeneral$NSImageNameQuickLookTemplate$NSImageNameRefreshFreestandingTemplate$NSImageNameRefreshTemplate$NSImageNameRemoveTemplate$NSImageNameRevealFreestandingTemplate$NSImageNameRightFacingTriangleTemplate$NSImageNameShareTemplate$NSImageNameSlideshowTemplate$NSImageNameSmartBadgeTemplate$NSImageNameStatusAvailable$NSImageNameStatusNone$NSImageNameStatusPartiallyAvailable$NSImageNameStatusUnavailable$NSImageNameStopProgressFreestandingTemplate$NSImageNameStopProgressTemplate$NSImageNameTouchBarAddDetailTemplate$NSImageNameTouchBarAddTemplate$NSImageNameTouchBarAlarmTemplate$NSImageNameTouchBarAudioInputMuteTemplate$NSImageNameTouchBarAudioInputTemplate$NSImageNameTouchBarAudioOutputMuteTemplate$NSImageNameTouchBarAudioOutputVolumeHighTemplate$NSImageNameTouchBarAudioOutputVolumeLowTemplate$NSImageNameTouchBarAudioOutputVolumeMediumTemplate$NSImageNameTouchBarAudioOutputVolumeOffTemplate$NSImageNameTouchBarBookmarksTemplate$NSImageNameTouchBarColorPickerFill$NSImageNameTouchBarColorPickerFont$NSImageNameTouchBarColorPickerStroke$NSImageNameTouchBarCommunicationAudioTemplate$NSImageNameTouchBarCommunicationVideoTemplate$NSImageNameTouchBarComposeTemplate$NSImageNameTouchBarDeleteTemplate$NSImageNameTouchBarDownloadTemplate$NSImageNameTouchBarEnterFullScreenTemplate$NSImageNameTouchBarExitFullScreenTemplate$NSImageNameTouchBarFastForwardTemplate$NSImageNameTouchBarFolderCopyToTemplate$NSImageNameTouchBarFolderMoveToTemplate$NSImageNameTouchBarFolderTemplate$NSImageNameTouchBarGetInfoTemplate$NSImageNameTouchBarGoBackTemplate$NSImageNameTouchBarGoDownTemplate$NSImageNameTouchBarGoForwardTemplate$NSImageNameTouchBarGoUpTemplate$NSImageNameTouchBarHistoryTemplate$NSImageNameTouchBarIconViewTemplate$NSImageNameTouchBarListViewTemplate$NSImageNameTouchBarMailTemplate$NSImageNameTouchBarNewFolderTemplate$NSImageNameTouchBarNewMessageTemplate$NSImageNameTouchBarOpenInBrowserTemplate$NSImageNameTouchBarPauseTemplate$NSImageNameTouchBarPlayPauseTemplate$NSImageNameTouchBarPlayTemplate$NSImageNameTouchBarPlayheadTemplate$NSImageNameTouchBarQuickLookTemplate$NSImageNameTouchBarRecordStartTemplate$NSImageNameTouchBarRecordStopTemplate$NSImageNameTouchBarRefreshTemplate$NSImageNameTouchBarRemoveTemplate$NSImageNameTouchBarRewindTemplate$NSImageNameTouchBarRotateLeftTemplate$NSImageNameTouchBarRotateRightTemplate$NSImageNameTouchBarSearchTemplate$NSImageNameTouchBarShareTemplate$NSImageNameTouchBarSidebarTemplate$NSImageNameTouchBarSkipAhead15SecondsTemplate$NSImageNameTouchBarSkipAhead30SecondsTemplate$NSImageNameTouchBarSkipAheadTemplate$NSImageNameTouchBarSkipBack15SecondsTemplate$NSImageNameTouchBarSkipBack30SecondsTemplate$NSImageNameTouchBarSkipBackTemplate$NSImageNameTouchBarSkipToEndTemplate$NSImageNameTouchBarSkipToStartTemplate$NSImageNameTouchBarSlideshowTemplate$NSImageNameTouchBarTagIconTemplate$NSImageNameTouchBarTextBoldTemplate$NSImageNameTouchBarTextBoxTemplate$NSImageNameTouchBarTextCenterAlignTemplate$NSImageNameTouchBarTextItalicTemplate$NSImageNameTouchBarTextJustifiedAlignTemplate$NSImageNameTouchBarTextLeftAlignTemplate$NSImageNameTouchBarTextListTemplate$NSImageNameTouchBarTextRightAlignTemplate$NSImageNameTouchBarTextStrikethroughTemplate$NSImageNameTouchBarTextUnderlineTemplate$NSImageNameTouchBarUserAddTemplate$NSImageNameTouchBarUserGroupTemplate$NSImageNameTouchBarUserTemplate$NSImageNameTouchBarVolumeDownTemplate$NSImageNameTouchBarVolumeUpTemplate$NSImageNameTrashEmpty$NSImageNameTrashFull$NSImageNameUser$NSImageNameUserAccounts$NSImageNameUserGroup$NSImageNameUserGuest$NSImageProgressive$NSImageRGBColorTable$NSImageRepRegistryDidChangeNotification$NSIncludedKeysBinding$NSInitialKeyBinding$NSInitialValueBinding$NSInkTextPboardType$NSInsertsNullPlaceholderBindingOption$NSInterfaceStyleDefault$NSInvokesSeparatelyWithArrayObjectsBindingOption$NSIsIndeterminateBinding$NSKernAttributeName$NSKeywordsDocumentAttribute$NSLabelBinding$NSLeftMarginDocumentAttribute$NSLigatureAttributeName$NSLightGray@d$NSLinkAttributeName$NSLocalizedKeyDictionaryBinding$NSMacSimpleTextDocumentType$NSManagedObjectContextBinding$NSManagerDocumentAttribute$NSMarkedClauseSegmentAttributeName$NSMaxValueBinding$NSMaxWidthBinding$NSMaximumRecentsBinding$NSMenuDidAddItemNotification$NSMenuDidBeginTrackingNotification$NSMenuDidChangeItemNotification$NSMenuDidEndTrackingNotification$NSMenuDidRemoveItemNotification$NSMenuDidSendActionNotification$NSMenuItemImportFromDeviceIdentifier$NSMenuWillSendActionNotification$NSMinValueBinding$NSMinWidthBinding$NSMixedStateImageBinding$NSModalPanelRunLoopMode$NSModificationTimeDocumentAttribute$NSMultipleTextSelectionPboardType$NSMultipleValuesMarker$NSMultipleValuesPlaceholderBindingOption$NSNamedColorSpace$NSNibLoadingException$NSNibOwner$NSNibTopLevelObjects$NSNoSelectionMarker$NSNoSelectionPlaceholderBindingOption$NSNotApplicableMarker$NSNotApplicablePlaceholderBindingOption$NSNullPlaceholderBindingOption$NSObliquenessAttributeName$NSObservedKeyPathKey$NSObservedObjectKey$NSOffStateImageBinding$NSOfficeOpenXMLTextDocumentType$NSOnStateImageBinding$NSOpenDocumentTextDocumentType$NSOptionsKey$NSOutlineViewColumnDidMoveNotification$NSOutlineViewColumnDidResizeNotification$NSOutlineViewDisclosureButtonKey$NSOutlineViewItemDidCollapseNotification$NSOutlineViewItemDidExpandNotification$NSOutlineViewItemWillCollapseNotification$NSOutlineViewItemWillExpandNotification$NSOutlineViewSelectionDidChangeNotification$NSOutlineViewSelectionIsChangingNotification$NSOutlineViewShowHideButtonKey$NSPDFPboardType$NSPICTPboardType$NSPPDIncludeNotFoundException$NSPPDIncludeStackOverflowException$NSPPDIncludeStackUnderflowException$NSPPDParseException$NSPaperSizeDocumentAttribute$NSParagraphStyleAttributeName$NSPasteboardCommunicationException$NSPasteboardNameDrag$NSPasteboardNameFind$NSPasteboardNameFont$NSPasteboardNameGeneral$NSPasteboardNameRuler$NSPasteboardTypeColor$NSPasteboardTypeFileURL$NSPasteboardTypeFindPanelSearchOptions$NSPasteboardTypeFont$NSPasteboardTypeHTML$NSPasteboardTypeMultipleTextSelection$NSPasteboardTypePDF$NSPasteboardTypePNG$NSPasteboardTypeRTF$NSPasteboardTypeRTFD$NSPasteboardTypeRuler$NSPasteboardTypeSound$NSPasteboardTypeString$NSPasteboardTypeTIFF$NSPasteboardTypeTabularText$NSPasteboardTypeTextFinderOptions$NSPasteboardTypeURL$NSPasteboardURLReadingContentsConformToTypesKey$NSPasteboardURLReadingFileURLsOnlyKey$NSPatternColorSpace$NSPlainFileType$NSPlainTextDocumentType$NSPopUpButtonCellWillPopUpNotification$NSPopUpButtonWillPopUpNotification$NSPopoverCloseReasonDetachToWindow$NSPopoverCloseReasonKey$NSPopoverCloseReasonStandard$NSPopoverDidCloseNotification$NSPopoverDidShowNotification$NSPopoverWillCloseNotification$NSPopoverWillShowNotification$NSPositioningRectBinding$NSPostScriptPboardType$NSPredicateBinding$NSPredicateFormatBindingOption$NSPreferredScrollerStyleDidChangeNotification$NSPrefixSpacesDocumentAttribute$NSPrintAllPages$NSPrintAllPresetsJobStyleHint$NSPrintBottomMargin$NSPrintCancelJob$NSPrintCopies$NSPrintDetailedErrorReporting$NSPrintFaxCoverSheetName$NSPrintFaxHighResolution$NSPrintFaxJob$NSPrintFaxModem$NSPrintFaxNumber$NSPrintFaxReceiverNames$NSPrintFaxReceiverNumbers$NSPrintFaxReturnReceipt$NSPrintFaxSendTime$NSPrintFaxTrimPageEnds$NSPrintFaxUseCoverSheet$NSPrintFirstPage$NSPrintFormName$NSPrintHeaderAndFooter$NSPrintHorizontalPagination$NSPrintHorizontallyCentered$NSPrintJobDisposition$NSPrintJobFeatures$NSPrintJobSavingFileNameExtensionHidden$NSPrintJobSavingURL$NSPrintLastPage$NSPrintLeftMargin$NSPrintManualFeed$NSPrintMustCollate$NSPrintNoPresetsJobStyleHint$NSPrintOperationExistsException$NSPrintOrientation$NSPrintPackageException$NSPrintPagesAcross$NSPrintPagesDown$NSPrintPagesPerSheet$NSPrintPanelAccessorySummaryItemDescriptionKey$NSPrintPanelAccessorySummaryItemNameKey$NSPrintPaperFeed$NSPrintPaperName$NSPrintPaperSize$NSPrintPhotoJobStyleHint$NSPrintPreviewJob$NSPrintPrinter$NSPrintPrinterName$NSPrintReversePageOrder$NSPrintRightMargin$NSPrintSaveJob$NSPrintSavePath$NSPrintScalingFactor$NSPrintSelectionOnly$NSPrintSpoolJob$NSPrintTime$NSPrintTopMargin$NSPrintVerticalPagination$NSPrintVerticallyCentered$NSPrintingCommunicationException$NSRTFDPboardType$NSRTFDTextDocumentType$NSRTFPboardType$NSRTFPropertyStackOverflowException$NSRTFTextDocumentType$NSRaisesForNotApplicableKeysBindingOption$NSReadOnlyDocumentAttribute$NSRecentSearchesBinding$NSRepresentedFilenameBinding$NSRightMarginDocumentAttribute$NSRowHeightBinding$NSRuleEditorPredicateComparisonModifier$NSRuleEditorPredicateCompoundType$NSRuleEditorPredicateCustomSelector$NSRuleEditorPredicateLeftExpression$NSRuleEditorPredicateOperatorType$NSRuleEditorPredicateOptions$NSRuleEditorPredicateRightExpression$NSRuleEditorRowsDidChangeNotification$NSRulerPboard$NSRulerPboardType$NSRulerViewUnitCentimeters$NSRulerViewUnitInches$NSRulerViewUnitPicas$NSRulerViewUnitPoints$NSScreenColorSpaceDidChangeNotification$NSScrollViewDidEndLiveMagnifyNotification$NSScrollViewDidEndLiveScrollNotification$NSScrollViewDidLiveScrollNotification$NSScrollViewWillStartLiveMagnifyNotification$NSScrollViewWillStartLiveScrollNotification$NSSelectedIdentifierBinding$NSSelectedIndexBinding$NSSelectedLabelBinding$NSSelectedObjectBinding$NSSelectedObjectsBinding$NSSelectedTagBinding$NSSelectedValueBinding$NSSelectedValuesBinding$NSSelectionIndexPathsBinding$NSSelectionIndexesBinding$NSSelectorNameBindingOption$NSSelectsAllWhenSettingContentBindingOption$NSShadowAttributeName$NSSharingServiceNameAddToAperture$NSSharingServiceNameAddToIPhoto$NSSharingServiceNameAddToSafariReadingList$NSSharingServiceNameCloudSharing$NSSharingServiceNameComposeEmail$NSSharingServiceNameComposeMessage$NSSharingServiceNamePostImageOnFlickr$NSSharingServiceNamePostOnFacebook$NSSharingServiceNamePostOnLinkedIn$NSSharingServiceNamePostOnSinaWeibo$NSSharingServiceNamePostOnTencentWeibo$NSSharingServiceNamePostOnTwitter$NSSharingServiceNamePostVideoOnTudou$NSSharingServiceNamePostVideoOnVimeo$NSSharingServiceNamePostVideoOnYouku$NSSharingServiceNameSendViaAirDrop$NSSharingServiceNameUseAsDesktopPicture$NSSharingServiceNameUseAsFacebookProfileImage$NSSharingServiceNameUseAsLinkedInProfileImage$NSSharingServiceNameUseAsTwitterProfileImage$NSShellCommandFileType$NSSliderAccessoryWidthDefault@d$NSSliderAccessoryWidthWide@d$NSSortDescriptorsBinding$NSSoundPboardType$NSSourceTextScalingDocumentAttribute$NSSourceTextScalingDocumentOption$NSSpeechCharacterModeProperty$NSSpeechCommandDelimiterProperty$NSSpeechCommandPrefix$NSSpeechCommandSuffix$NSSpeechCurrentVoiceProperty$NSSpeechDictionaryAbbreviations$NSSpeechDictionaryEntryPhonemes$NSSpeechDictionaryEntrySpelling$NSSpeechDictionaryLocaleIdentifier$NSSpeechDictionaryModificationDate$NSSpeechDictionaryPronunciations$NSSpeechErrorCount$NSSpeechErrorNewestCharacterOffset$NSSpeechErrorNewestCode$NSSpeechErrorOldestCharacterOffset$NSSpeechErrorOldestCode$NSSpeechErrorsProperty$NSSpeechInputModeProperty$NSSpeechModeLiteral$NSSpeechModeNormal$NSSpeechModePhoneme$NSSpeechModeText$NSSpeechNumberModeProperty$NSSpeechOutputToFileURLProperty$NSSpeechPhonemeInfoExample$NSSpeechPhonemeInfoHiliteEnd$NSSpeechPhonemeInfoHiliteStart$NSSpeechPhonemeInfoOpcode$NSSpeechPhonemeInfoSymbol$NSSpeechPhonemeSymbolsProperty$NSSpeechPitchBaseProperty$NSSpeechPitchModProperty$NSSpeechRateProperty$NSSpeechRecentSyncProperty$NSSpeechResetProperty$NSSpeechStatusNumberOfCharactersLeft$NSSpeechStatusOutputBusy$NSSpeechStatusOutputPaused$NSSpeechStatusPhonemeCode$NSSpeechStatusProperty$NSSpeechSynthesizerInfoIdentifier$NSSpeechSynthesizerInfoProperty$NSSpeechSynthesizerInfoVersion$NSSpeechVolumeProperty$NSSpellCheckerDidChangeAutomaticCapitalizationNotification$NSSpellCheckerDidChangeAutomaticDashSubstitutionNotification$NSSpellCheckerDidChangeAutomaticInlinePredictionNotification$NSSpellCheckerDidChangeAutomaticPeriodSubstitutionNotification$NSSpellCheckerDidChangeAutomaticQuoteSubstitutionNotification$NSSpellCheckerDidChangeAutomaticSpellingCorrectionNotification$NSSpellCheckerDidChangeAutomaticTextCompletionNotification$NSSpellCheckerDidChangeAutomaticTextReplacementNotification$NSSpellingStateAttributeName$NSSplitViewControllerAutomaticDimension@d$NSSplitViewDidResizeSubviewsNotification$NSSplitViewItemUnspecifiedDimension@d$NSSplitViewWillResizeSubviewsNotification$NSStrikethroughColorAttributeName$NSStrikethroughStyleAttributeName$NSStringPboardType$NSStrokeColorAttributeName$NSStrokeWidthAttributeName$NSSubjectDocumentAttribute$NSSuperscriptAttributeName$NSSystemColorsDidChangeNotification$NSTIFFException$NSTIFFPboardType$NSTabColumnTerminatorsAttributeName$NSTableViewColumnDidMoveNotification$NSTableViewColumnDidResizeNotification$NSTableViewRowViewKey$NSTableViewSelectionDidChangeNotification$NSTableViewSelectionIsChangingNotification$NSTabularTextPboardType$NSTargetBinding$NSTargetTextScalingDocumentOption$NSTextAlternativesAttributeName$NSTextAlternativesSelectedAlternativeStringNotification$NSTextCheckingDocumentAuthorKey$NSTextCheckingDocumentTitleKey$NSTextCheckingDocumentURLKey$NSTextCheckingGenerateInlinePredictionsKey$NSTextCheckingOrthographyKey$NSTextCheckingQuotesKey$NSTextCheckingReferenceDateKey$NSTextCheckingReferenceTimeZoneKey$NSTextCheckingRegularExpressionsKey$NSTextCheckingReplacementsKey$NSTextCheckingSelectedRangeKey$NSTextColorBinding$NSTextContentStorageUnsupportedAttributeAddedNotification$NSTextContentTypeAddressCity$NSTextContentTypeAddressCityAndState$NSTextContentTypeAddressState$NSTextContentTypeBirthdate$NSTextContentTypeBirthdateDay$NSTextContentTypeBirthdateMonth$NSTextContentTypeBirthdateYear$NSTextContentTypeCountryName$NSTextContentTypeCreditCardExpiration$NSTextContentTypeCreditCardExpirationMonth$NSTextContentTypeCreditCardExpirationYear$NSTextContentTypeCreditCardFamilyName$NSTextContentTypeCreditCardGivenName$NSTextContentTypeCreditCardMiddleName$NSTextContentTypeCreditCardName$NSTextContentTypeCreditCardNumber$NSTextContentTypeCreditCardSecurityCode$NSTextContentTypeCreditCardType$NSTextContentTypeDateTime$NSTextContentTypeEmailAddress$NSTextContentTypeFamilyName$NSTextContentTypeFlightNumber$NSTextContentTypeFullStreetAddress$NSTextContentTypeGivenName$NSTextContentTypeJobTitle$NSTextContentTypeLocation$NSTextContentTypeMiddleName$NSTextContentTypeName$NSTextContentTypeNamePrefix$NSTextContentTypeNameSuffix$NSTextContentTypeNewPassword$NSTextContentTypeNickname$NSTextContentTypeOneTimeCode$NSTextContentTypeOrganizationName$NSTextContentTypePassword$NSTextContentTypePostalCode$NSTextContentTypeShipmentTrackingNumber$NSTextContentTypeStreetAddressLine1$NSTextContentTypeStreetAddressLine2$NSTextContentTypeSublocality$NSTextContentTypeTelephoneNumber$NSTextContentTypeURL$NSTextContentTypeUsername$NSTextDidBeginEditingNotification$NSTextDidChangeNotification$NSTextDidEndEditingNotification$NSTextEffectAttributeName$NSTextEffectLetterpressStyle$NSTextEncodingNameDocumentAttribute$NSTextEncodingNameDocumentOption$NSTextFinderCaseInsensitiveKey$NSTextFinderMatchingTypeKey$NSTextInputContextKeyboardSelectionDidChangeNotification$NSTextLayoutSectionOrientation$NSTextLayoutSectionRange$NSTextLayoutSectionsAttribute$NSTextLineTooLongException$NSTextListMarkerBox$NSTextListMarkerCheck$NSTextListMarkerCircle$NSTextListMarkerDecimal$NSTextListMarkerDiamond$NSTextListMarkerDisc$NSTextListMarkerHyphen$NSTextListMarkerLowercaseAlpha$NSTextListMarkerLowercaseHexadecimal$NSTextListMarkerLowercaseLatin$NSTextListMarkerLowercaseRoman$NSTextListMarkerOctal$NSTextListMarkerSquare$NSTextListMarkerUppercaseAlpha$NSTextListMarkerUppercaseHexadecimal$NSTextListMarkerUppercaseLatin$NSTextListMarkerUppercaseRoman$NSTextMovementUserInfoKey$NSTextNoSelectionException$NSTextReadException$NSTextScalingDocumentAttribute$NSTextSizeMultiplierDocumentOption$NSTextStorageDidProcessEditingNotification$NSTextStorageWillProcessEditingNotification$NSTextViewDidChangeSelectionNotification$NSTextViewDidChangeTypingAttributesNotification$NSTextViewDidSwitchToNSLayoutManagerNotification$NSTextViewWillChangeNotifyingTextViewNotification$NSTextViewWillSwitchToNSLayoutManagerNotification$NSTextWriteException$NSTimeoutDocumentOption$NSTitleBinding$NSTitleDocumentAttribute$NSToolTipAttributeName$NSToolTipBinding$NSToolbarCloudSharingItemIdentifier$NSToolbarCustomizeToolbarItemIdentifier$NSToolbarDidRemoveItemNotification$NSToolbarFlexibleSpaceItemIdentifier$NSToolbarInspectorTrackingSeparatorItemIdentifier$NSToolbarItemKey$NSToolbarPrintItemIdentifier$NSToolbarSeparatorItemIdentifier$NSToolbarShowColorsItemIdentifier$NSToolbarShowFontsItemIdentifier$NSToolbarSidebarTrackingSeparatorItemIdentifier$NSToolbarSpaceItemIdentifier$NSToolbarToggleInspectorItemIdentifier$NSToolbarToggleSidebarItemIdentifier$NSToolbarWillAddItemNotification$NSTopMarginDocumentAttribute$NSTouchBarItemIdentifierCandidateList$NSTouchBarItemIdentifierCharacterPicker$NSTouchBarItemIdentifierFixedSpaceLarge$NSTouchBarItemIdentifierFixedSpaceSmall$NSTouchBarItemIdentifierFlexibleSpace$NSTouchBarItemIdentifierOtherItemsProxy$NSTouchBarItemIdentifierTextAlignment$NSTouchBarItemIdentifierTextColorPicker$NSTouchBarItemIdentifierTextFormat$NSTouchBarItemIdentifierTextList$NSTouchBarItemIdentifierTextStyle$NSTrackingAttributeName$NSTransparentBinding$NSTypeIdentifierAddressText$NSTypeIdentifierDateText$NSTypeIdentifierPhoneNumberText$NSTypeIdentifierTransitInformationText$NSTypedStreamVersionException$NSURLPboardType$NSUnderlineByWordMask@Q$NSUnderlineColorAttributeName$NSUnderlineStrikethroughMask@Q$NSUnderlineStyleAttributeName$NSUserActivityDocumentURLKey$NSUsesScreenFontsDocumentAttribute$NSVCardPboardType$NSValidatesImmediatelyBindingOption$NSValueBinding$NSValuePathBinding$NSValueTransformerBindingOption$NSValueTransformerNameBindingOption$NSValueURLBinding$NSVerticalGlyphFormAttributeName$NSViewAnimationEffectKey$NSViewAnimationEndFrameKey$NSViewAnimationFadeInEffect$NSViewAnimationFadeOutEffect$NSViewAnimationStartFrameKey$NSViewAnimationTargetKey$NSViewBoundsDidChangeNotification$NSViewDidUpdateTrackingAreasNotification$NSViewFocusDidChangeNotification$NSViewFrameDidChangeNotification$NSViewGlobalFrameDidChangeNotification$NSViewModeDocumentAttribute$NSViewNoInstrinsicMetric@d$NSViewNoIntrinsicMetric@d$NSViewSizeDocumentAttribute$NSViewZoomDocumentAttribute$NSVisibleBinding$NSVoiceAge$NSVoiceDemoText$NSVoiceGender$NSVoiceGenderFemale$NSVoiceGenderMale$NSVoiceGenderNeuter$NSVoiceGenderNeutral$NSVoiceIdentifier$NSVoiceIndividuallySpokenCharacters$NSVoiceLanguage$NSVoiceLocaleIdentifier$NSVoiceName$NSVoiceSupportedCharacters$NSWarningValueBinding$NSWebArchiveTextDocumentType$NSWebPreferencesDocumentOption$NSWebResourceLoadDelegateDocumentOption$NSWhite@d$NSWidthBinding$NSWindowDidBecomeKeyNotification$NSWindowDidBecomeMainNotification$NSWindowDidChangeBackingPropertiesNotification$NSWindowDidChangeOcclusionStateNotification$NSWindowDidChangeScreenNotification$NSWindowDidChangeScreenProfileNotification$NSWindowDidDeminiaturizeNotification$NSWindowDidEndLiveResizeNotification$NSWindowDidEndSheetNotification$NSWindowDidEnterFullScreenNotification$NSWindowDidEnterVersionBrowserNotification$NSWindowDidExitFullScreenNotification$NSWindowDidExitVersionBrowserNotification$NSWindowDidExposeNotification$NSWindowDidMiniaturizeNotification$NSWindowDidMoveNotification$NSWindowDidResignKeyNotification$NSWindowDidResignMainNotification$NSWindowDidResizeNotification$NSWindowDidUpdateNotification$NSWindowServerCommunicationException$NSWindowWillBeginSheetNotification$NSWindowWillCloseNotification$NSWindowWillEnterFullScreenNotification$NSWindowWillEnterVersionBrowserNotification$NSWindowWillExitFullScreenNotification$NSWindowWillExitVersionBrowserNotification$NSWindowWillMiniaturizeNotification$NSWindowWillMoveNotification$NSWindowWillStartLiveResizeNotification$NSWordMLTextDocumentType$NSWordTablesReadException$NSWordTablesWriteException$NSWorkspaceAccessibilityDisplayOptionsDidChangeNotification$NSWorkspaceActiveSpaceDidChangeNotification$NSWorkspaceApplicationKey$NSWorkspaceCompressOperation$NSWorkspaceCopyOperation$NSWorkspaceDecompressOperation$NSWorkspaceDecryptOperation$NSWorkspaceDesktopImageAllowClippingKey$NSWorkspaceDesktopImageFillColorKey$NSWorkspaceDesktopImageScalingKey$NSWorkspaceDestroyOperation$NSWorkspaceDidActivateApplicationNotification$NSWorkspaceDidChangeFileLabelsNotification$NSWorkspaceDidDeactivateApplicationNotification$NSWorkspaceDidHideApplicationNotification$NSWorkspaceDidLaunchApplicationNotification$NSWorkspaceDidMountNotification$NSWorkspaceDidPerformFileOperationNotification$NSWorkspaceDidRenameVolumeNotification$NSWorkspaceDidTerminateApplicationNotification$NSWorkspaceDidUnhideApplicationNotification$NSWorkspaceDidUnmountNotification$NSWorkspaceDidWakeNotification$NSWorkspaceDuplicateOperation$NSWorkspaceEncryptOperation$NSWorkspaceLaunchConfigurationAppleEvent$NSWorkspaceLaunchConfigurationArchitecture$NSWorkspaceLaunchConfigurationArguments$NSWorkspaceLaunchConfigurationEnvironment$NSWorkspaceLinkOperation$NSWorkspaceMoveOperation$NSWorkspaceRecycleOperation$NSWorkspaceScreensDidSleepNotification$NSWorkspaceScreensDidWakeNotification$NSWorkspaceSessionDidBecomeActiveNotification$NSWorkspaceSessionDidResignActiveNotification$NSWorkspaceVolumeLocalizedNameKey$NSWorkspaceVolumeOldLocalizedNameKey$NSWorkspaceVolumeOldURLKey$NSWorkspaceVolumeURLKey$NSWorkspaceWillLaunchApplicationNotification$NSWorkspaceWillPowerOffNotification$NSWorkspaceWillSleepNotification$NSWorkspaceWillUnmountNotification$NSWritingDirectionAttributeName$"""
enums = """$NS16BitBigEndianBitmapFormat@1024$NS16BitLittleEndianBitmapFormat@256$NS32BitBigEndianBitmapFormat@2048$NS32BitLittleEndianBitmapFormat@512$NSAWTEventType@16$NSAboveBottom@4$NSAboveTop@1$NSAcceleratorButton@8$NSAccessibilityAnnotationPositionEnd@2$NSAccessibilityAnnotationPositionFullRange@0$NSAccessibilityAnnotationPositionStart@1$NSAccessibilityCustomRotorSearchDirectionNext@1$NSAccessibilityCustomRotorSearchDirectionPrevious@0$NSAccessibilityCustomRotorTypeAnnotation@2$NSAccessibilityCustomRotorTypeAny@1$NSAccessibilityCustomRotorTypeAudiograph@21$NSAccessibilityCustomRotorTypeBoldText@3$NSAccessibilityCustomRotorTypeCustom@0$NSAccessibilityCustomRotorTypeHeading@4$NSAccessibilityCustomRotorTypeHeadingLevel1@5$NSAccessibilityCustomRotorTypeHeadingLevel2@6$NSAccessibilityCustomRotorTypeHeadingLevel3@7$NSAccessibilityCustomRotorTypeHeadingLevel4@8$NSAccessibilityCustomRotorTypeHeadingLevel5@9$NSAccessibilityCustomRotorTypeHeadingLevel6@10$NSAccessibilityCustomRotorTypeImage@11$NSAccessibilityCustomRotorTypeItalicText@12$NSAccessibilityCustomRotorTypeLandmark@13$NSAccessibilityCustomRotorTypeLink@14$NSAccessibilityCustomRotorTypeList@15$NSAccessibilityCustomRotorTypeMisspelledWord@16$NSAccessibilityCustomRotorTypeTable@17$NSAccessibilityCustomRotorTypeTextField@18$NSAccessibilityCustomRotorTypeUnderlinedText@19$NSAccessibilityCustomRotorTypeVisitedLink@20$NSAccessibilityOrientationHorizontal@2$NSAccessibilityOrientationUnknown@0$NSAccessibilityOrientationVertical@1$NSAccessibilityPriorityHigh@90$NSAccessibilityPriorityLow@10$NSAccessibilityPriorityMedium@50$NSAccessibilityRulerMarkerTypeIndentFirstLine@7$NSAccessibilityRulerMarkerTypeIndentHead@5$NSAccessibilityRulerMarkerTypeIndentTail@6$NSAccessibilityRulerMarkerTypeTabStopCenter@3$NSAccessibilityRulerMarkerTypeTabStopDecimal@4$NSAccessibilityRulerMarkerTypeTabStopLeft@1$NSAccessibilityRulerMarkerTypeTabStopRight@2$NSAccessibilityRulerMarkerTypeUnknown@0$NSAccessibilitySortDirectionAscending@1$NSAccessibilitySortDirectionDescending@2$NSAccessibilitySortDirectionUnknown@0$NSAccessibilityUnitsCentimeters@2$NSAccessibilityUnitsInches@1$NSAccessibilityUnitsPicas@4$NSAccessibilityUnitsPoints@3$NSAccessibilityUnitsUnknown@0$NSAddTraitFontAction@2$NSAdobeCNS1CharacterCollection@1$NSAdobeGB1CharacterCollection@2$NSAdobeJapan1CharacterCollection@3$NSAdobeJapan2CharacterCollection@4$NSAdobeKorea1CharacterCollection@5$NSAlertAlternateReturn@0$NSAlertDefaultReturn@1$NSAlertErrorReturn@-2$NSAlertFirstButtonReturn@1000$NSAlertOtherReturn@-1$NSAlertSecondButtonReturn@1001$NSAlertStyleCritical@2$NSAlertStyleInformational@1$NSAlertStyleWarning@0$NSAlertThirdButtonReturn@1002$NSAllScrollerParts@2$NSAlphaFirstBitmapFormat@1$NSAlphaNonpremultipliedBitmapFormat@2$NSAlphaShiftKeyMask@65536$NSAlternateKeyMask@524288$NSAnimationBlocking@0$NSAnimationEaseIn@1$NSAnimationEaseInOut@0$NSAnimationEaseOut@2$NSAnimationEffectDisappearingItemDefault@0$NSAnimationEffectPoof@10$NSAnimationLinear@3$NSAnimationNonblocking@1$NSAnimationNonblockingThreaded@2$NSAnyEventMask@18446744073709551615$NSAnyType@0$NSAppKitDefined@13$NSAppKitDefinedMask@8192$NSAppKitVersionNumber10_0@577$NSAppKitVersionNumber10_1@620$NSAppKitVersionNumber10_10@1343$NSAppKitVersionNumber10_10_2@1344$NSAppKitVersionNumber10_10_3@1347$NSAppKitVersionNumber10_10_4@1348$NSAppKitVersionNumber10_10_5@1348$NSAppKitVersionNumber10_10_Max@1349$NSAppKitVersionNumber10_11@1404.0$NSAppKitVersionNumber10_11_1@1404.13$NSAppKitVersionNumber10_11_2@1404.34$NSAppKitVersionNumber10_11_3@1404.34$NSAppKitVersionNumber10_12@1504$NSAppKitVersionNumber10_12_1@1504.6$NSAppKitVersionNumber10_12_2@1504.76$NSAppKitVersionNumber10_13@1561$NSAppKitVersionNumber10_13_1@1561.1$NSAppKitVersionNumber10_13_2@1561.2$NSAppKitVersionNumber10_13_4@1561.4$NSAppKitVersionNumber10_14@1671.0$NSAppKitVersionNumber10_14_1@1671.1$NSAppKitVersionNumber10_14_2@1671.2$NSAppKitVersionNumber10_14_3@1671.3$NSAppKitVersionNumber10_14_4@1671.4$NSAppKitVersionNumber10_14_5@1671.5$NSAppKitVersionNumber10_15@1894.0$NSAppKitVersionNumber10_15_1@1894.1$NSAppKitVersionNumber10_15_2@1894.2$NSAppKitVersionNumber10_15_3@1894.3$NSAppKitVersionNumber10_15_4@1894.4$NSAppKitVersionNumber10_15_5@1894.5$NSAppKitVersionNumber10_15_6@1894.6$NSAppKitVersionNumber10_2@663$NSAppKitVersionNumber10_3@743$NSAppKitVersionNumber10_4@824$NSAppKitVersionNumber10_5@949$NSAppKitVersionNumber10_6@1038$NSAppKitVersionNumber10_7@1138$NSAppKitVersionNumber10_8@1187$NSAppKitVersionNumber10_9@1265$NSAppKitVersionNumber11_0@2022.0$NSAppKitVersionNumber11_1@2022.2$NSAppKitVersionNumber11_2@2022.3$NSAppKitVersionNumber11_3@2022.4$NSAppKitVersionNumber11_4@2022.5$NSAppKitVersionNumber11_5@2022.6$NSAppKitVersionNumber12_0@2113.0$NSAppKitVersionNumber12_1@2113.2$NSAppKitVersionNumber12_2@2113.3$NSAppKitVersionNumber12_3@2113.4$NSAppKitVersionNumber12_4@2113.5$NSAppKitVersionNumber12_5@2113.6$NSAppKitVersionNumber13_0@2299.0$NSAppKitVersionNumber13_1@2299.3$NSAppKitVersionNumber13_2@2299.3$NSAppKitVersionNumber13_3@2299.4$NSAppKitVersionNumber13_4@2299.5$NSAppKitVersionNumber13_5@2299.6$NSAppKitVersionNumber13_6@2299.7$NSAppKitVersionNumber14_0@2487.0$NSAppKitVersionNumber14_1@2487.2$NSApplicationActivateAllWindows@1$NSApplicationActivateIgnoringOtherApps@2$NSApplicationActivatedEventType@1$NSApplicationActivationPolicyAccessory@1$NSApplicationActivationPolicyProhibited@2$NSApplicationActivationPolicyRegular@0$NSApplicationDeactivatedEventType@2$NSApplicationDefined@15$NSApplicationDefinedMask@32768$NSApplicationDelegateReplyCancel@1$NSApplicationDelegateReplyFailure@2$NSApplicationDelegateReplySuccess@0$NSApplicationOcclusionStateVisible@2$NSApplicationPresentationAutoHideDock@1$NSApplicationPresentationAutoHideMenuBar@4$NSApplicationPresentationAutoHideToolbar@2048$NSApplicationPresentationDefault@0$NSApplicationPresentationDisableAppleMenu@16$NSApplicationPresentationDisableCursorLocationAssistance@4096$NSApplicationPresentationDisableForceQuit@64$NSApplicationPresentationDisableHideApplication@256$NSApplicationPresentationDisableMenuBarTransparency@512$NSApplicationPresentationDisableProcessSwitching@32$NSApplicationPresentationDisableSessionTermination@128$NSApplicationPresentationFullScreen@1024$NSApplicationPresentationHideDock@2$NSApplicationPresentationHideMenuBar@8$NSAscendingPageOrder@1$NSAtBottom@5$NSAtTop@2$NSAutoPagination@0$NSAutosaveAsOperation@5$NSAutosaveElsewhereOperation@3$NSAutosaveInPlaceOperation@4$NSAutosaveOperation@3$NSBMPFileType@1$NSBackTabCharacter@25$NSBackgroundStyleDark@1$NSBackgroundStyleEmphasized@1$NSBackgroundStyleLight@0$NSBackgroundStyleLowered@3$NSBackgroundStyleNormal@0$NSBackgroundStyleRaised@2$NSBackgroundTab@1$NSBackingStoreBuffered@2$NSBackingStoreNonretained@1$NSBackingStoreRetained@0$NSBackspaceCharacter@8$NSBacktabTextMovement@18$NSBeginFunctionKey@63274$NSBelowBottom@6$NSBelowTop@3$NSBevelLineJoinStyle@2$NSBezelBorder@2$NSBezelStyleAccessoryBar@13$NSBezelStyleAccessoryBarAction@12$NSBezelStyleAutomatic@0$NSBezelStyleBadge@15$NSBezelStyleCircular@7$NSBezelStyleDisclosure@5$NSBezelStyleFlexiblePush@2$NSBezelStyleHelpButton@9$NSBezelStyleInline@15$NSBezelStylePush@1$NSBezelStylePushDisclosure@14$NSBezelStyleRecessed@13$NSBezelStyleRegularSquare@2$NSBezelStyleRoundRect@12$NSBezelStyleRounded@1$NSBezelStyleRoundedDisclosure@14$NSBezelStyleShadowlessSquare@6$NSBezelStyleSmallSquare@10$NSBezelStyleTexturedRounded@11$NSBezelStyleTexturedSquare@8$NSBezelStyleToolbar@11$NSBezierPathElementClosePath@3$NSBezierPathElementCubicCurveTo@2$NSBezierPathElementCurveTo@2$NSBezierPathElementLineTo@1$NSBezierPathElementMoveTo@0$NSBezierPathElementQuadraticCurveTo@4$NSBitmapFormatAlphaFirst@1$NSBitmapFormatAlphaNonpremultiplied@2$NSBitmapFormatFloatingPointSamples@4$NSBitmapFormatSixteenBitBigEndian@1024$NSBitmapFormatSixteenBitLittleEndian@256$NSBitmapFormatThirtyTwoBitBigEndian@2048$NSBitmapFormatThirtyTwoBitLittleEndian@512$NSBitmapImageFileTypeBMP@1$NSBitmapImageFileTypeGIF@2$NSBitmapImageFileTypeJPEG@3$NSBitmapImageFileTypeJPEG2000@5$NSBitmapImageFileTypePNG@4$NSBitmapImageFileTypeTIFF@0$NSBlueControlTint@1$NSBoldFontMask@2$NSBorderlessWindowMask@0$NSBottomTabsBezelBorder@2$NSBoxCustom@4$NSBoxOldStyle@3$NSBoxPrimary@0$NSBoxSecondary@1$NSBoxSeparator@2$NSBreakFunctionKey@63282$NSBrowserAutoColumnResizing@1$NSBrowserDropAbove@1$NSBrowserDropOn@0$NSBrowserNoColumnResizing@0$NSBrowserUserColumnResizing@2$NSButtLineCapStyle@0$NSButtonTypeAccelerator@8$NSButtonTypeMomentaryChange@5$NSButtonTypeMomentaryLight@0$NSButtonTypeMomentaryPushIn@7$NSButtonTypeMultiLevelAccelerator@9$NSButtonTypeOnOff@6$NSButtonTypePushOnPushOff@1$NSButtonTypeRadio@4$NSButtonTypeSwitch@3$NSButtonTypeToggle@2$NSCMYKColorSpaceModel@2$NSCMYKModeColorPanel@2$NSCancelButton@0$NSCancelTextMovement@23$NSCarriageReturnCharacter@13$NSCellAllowsMixedState@16$NSCellChangesContents@14$NSCellDisabled@0$NSCellEditable@3$NSCellHasImageHorizontal@12$NSCellHasImageOnLeftOrBottom@13$NSCellHasOverlappingImage@11$NSCellHighlighted@5$NSCellHitContentArea@1$NSCellHitEditableTextArea@2$NSCellHitNone@0$NSCellHitTrackableArea@4$NSCellIsBordered@10$NSCellIsInsetButton@15$NSCellLightsByBackground@9$NSCellLightsByContents@6$NSCellLightsByGray@7$NSCellState@1$NSCenterTabStopType@2$NSChangeAutosaved@4$NSChangeBackgroundCell@8$NSChangeBackgroundCellMask@8$NSChangeCleared@2$NSChangeDiscardable@256$NSChangeDone@0$NSChangeGrayCell@4$NSChangeGrayCellMask@4$NSChangeReadOtherContents@3$NSChangeRedone@5$NSChangeUndone@1$NSCircularBezelStyle@7$NSCircularSlider@1$NSClearControlTint@7$NSClearDisplayFunctionKey@63290$NSClearLineFunctionKey@63289$NSClipPagination@2$NSClockAndCalendarDatePickerStyle@1$NSClosableWindowMask@2$NSClosePathBezierPathElement@3$NSCloudKitSharingServiceAllowPrivate@2$NSCloudKitSharingServiceAllowPublic@1$NSCloudKitSharingServiceAllowReadOnly@16$NSCloudKitSharingServiceAllowReadWrite@32$NSCloudKitSharingServiceStandard@0$NSCollectionElementCategoryDecorationView@2$NSCollectionElementCategoryInterItemGap@3$NSCollectionElementCategoryItem@0$NSCollectionElementCategorySupplementaryView@1$NSCollectionLayoutSectionOrthogonalScrollingBehaviorContinuous@1$NSCollectionLayoutSectionOrthogonalScrollingBehaviorContinuousGroupLeadingBoundary@2$NSCollectionLayoutSectionOrthogonalScrollingBehaviorGroupPaging@4$NSCollectionLayoutSectionOrthogonalScrollingBehaviorGroupPagingCentered@5$NSCollectionLayoutSectionOrthogonalScrollingBehaviorNone@0$NSCollectionLayoutSectionOrthogonalScrollingBehaviorPaging@3$NSCollectionUpdateActionDelete@1$NSCollectionUpdateActionInsert@0$NSCollectionUpdateActionMove@3$NSCollectionUpdateActionNone@4$NSCollectionUpdateActionReload@2$NSCollectionViewDropBefore@1$NSCollectionViewDropOn@0$NSCollectionViewItemHighlightAsDropTarget@3$NSCollectionViewItemHighlightForDeselection@2$NSCollectionViewItemHighlightForSelection@1$NSCollectionViewItemHighlightNone@0$NSCollectionViewScrollDirectionHorizontal@1$NSCollectionViewScrollDirectionVertical@0$NSCollectionViewScrollPositionBottom@4$NSCollectionViewScrollPositionCenteredHorizontally@16$NSCollectionViewScrollPositionCenteredVertically@2$NSCollectionViewScrollPositionLeadingEdge@64$NSCollectionViewScrollPositionLeft@8$NSCollectionViewScrollPositionNearestHorizontalEdge@512$NSCollectionViewScrollPositionNearestVerticalEdge@256$NSCollectionViewScrollPositionNone@0$NSCollectionViewScrollPositionRight@32$NSCollectionViewScrollPositionTop@1$NSCollectionViewScrollPositionTrailingEdge@128$NSColorListModeColorPanel@5$NSColorPanelAllModesMask@65535$NSColorPanelCMYKModeMask@4$NSColorPanelColorListModeMask@32$NSColorPanelCrayonModeMask@128$NSColorPanelCustomPaletteModeMask@16$NSColorPanelGrayModeMask@1$NSColorPanelHSBModeMask@8$NSColorPanelModeCMYK@2$NSColorPanelModeColorList@5$NSColorPanelModeCrayon@7$NSColorPanelModeCustomPalette@4$NSColorPanelModeGray@0$NSColorPanelModeHSB@3$NSColorPanelModeNone@-1$NSColorPanelModeRGB@1$NSColorPanelModeWheel@6$NSColorPanelRGBModeMask@2$NSColorPanelWheelModeMask@64$NSColorRenderingIntentAbsoluteColorimetric@1$NSColorRenderingIntentDefault@0$NSColorRenderingIntentPerceptual@3$NSColorRenderingIntentRelativeColorimetric@2$NSColorRenderingIntentSaturation@4$NSColorSpaceModelCMYK@2$NSColorSpaceModelDeviceN@4$NSColorSpaceModelGray@0$NSColorSpaceModelIndexed@5$NSColorSpaceModelLAB@3$NSColorSpaceModelPatterned@6$NSColorSpaceModelRGB@1$NSColorSpaceModelUnknown@-1$NSColorSystemEffectDeepPressed@2$NSColorSystemEffectDisabled@3$NSColorSystemEffectNone@0$NSColorSystemEffectPressed@1$NSColorSystemEffectRollover@4$NSColorTypeCatalog@2$NSColorTypeComponentBased@0$NSColorTypePattern@1$NSColorWellStyleDefault@0$NSColorWellStyleExpanded@2$NSColorWellStyleMinimal@1$NSComboButtonStyleSplit@0$NSComboButtonStyleUnified@1$NSCommandKeyMask@1048576$NSCompositeClear@0$NSCompositeColor@27$NSCompositeColorBurn@20$NSCompositeColorDodge@19$NSCompositeCopy@1$NSCompositeDarken@17$NSCompositeDestinationAtop@9$NSCompositeDestinationIn@7$NSCompositeDestinationOut@8$NSCompositeDestinationOver@6$NSCompositeDifference@23$NSCompositeExclusion@24$NSCompositeHardLight@22$NSCompositeHighlight@12$NSCompositeHue@25$NSCompositeLighten@18$NSCompositeLuminosity@28$NSCompositeMultiply@14$NSCompositeOverlay@16$NSCompositePlusDarker@11$NSCompositePlusLighter@13$NSCompositeSaturation@26$NSCompositeScreen@15$NSCompositeSoftLight@21$NSCompositeSourceAtop@5$NSCompositeSourceIn@3$NSCompositeSourceOut@4$NSCompositeSourceOver@2$NSCompositeXOR@10$NSCompositingOperationClear@0$NSCompositingOperationColor@27$NSCompositingOperationColorBurn@20$NSCompositingOperationColorDodge@19$NSCompositingOperationCopy@1$NSCompositingOperationDarken@17$NSCompositingOperationDestinationAtop@9$NSCompositingOperationDestinationIn@7$NSCompositingOperationDestinationOut@8$NSCompositingOperationDestinationOver@6$NSCompositingOperationDifference@23$NSCompositingOperationExclusion@24$NSCompositingOperationHardLight@22$NSCompositingOperationHighlight@12$NSCompositingOperationHue@25$NSCompositingOperationLighten@18$NSCompositingOperationLuminosity@28$NSCompositingOperationMultiply@14$NSCompositingOperationOverlay@16$NSCompositingOperationPlusDarker@11$NSCompositingOperationPlusLighter@13$NSCompositingOperationSaturation@26$NSCompositingOperationScreen@15$NSCompositingOperationSoftLight@21$NSCompositingOperationSourceAtop@5$NSCompositingOperationSourceIn@3$NSCompositingOperationSourceOut@4$NSCompositingOperationSourceOver@2$NSCompositingOperationXOR@10$NSCompressedFontMask@512$NSCondensedFontMask@64$NSContentsCellMask@1$NSContinuousCapacityLevelIndicatorStyle@1$NSControlCharacterActionContainerBreak@32$NSControlCharacterActionHorizontalTab@4$NSControlCharacterActionLineBreak@8$NSControlCharacterActionParagraphBreak@16$NSControlCharacterActionWhitespace@2$NSControlCharacterActionZeroAdvancement@1$NSControlGlyph@16777215$NSControlKeyMask@262144$NSControlSizeLarge@3$NSControlSizeMini@2$NSControlSizeRegular@0$NSControlSizeSmall@1$NSControlStateMixed@-1$NSControlStateOff@0$NSControlStateOn@1$NSControlStateValueMixed@-1$NSControlStateValueOff@0$NSControlStateValueOn@1$NSCorrectionIndicatorTypeDefault@0$NSCorrectionIndicatorTypeGuesses@2$NSCorrectionIndicatorTypeReversion@1$NSCorrectionResponseAccepted@1$NSCorrectionResponseEdited@4$NSCorrectionResponseIgnored@3$NSCorrectionResponseNone@0$NSCorrectionResponseRejected@2$NSCorrectionResponseReverted@5$NSCrayonModeColorPanel@7$NSCriticalAlertStyle@2$NSCriticalRequest@0$NSCursorPointingDevice@2$NSCursorUpdate@17$NSCursorUpdateMask@131072$NSCurveToBezierPathElement@2$NSCustomPaletteModeColorPanel@4$NSDatePickerElementFlagEra@256$NSDatePickerElementFlagHourMinute@12$NSDatePickerElementFlagHourMinuteSecond@14$NSDatePickerElementFlagTimeZone@16$NSDatePickerElementFlagYearMonth@192$NSDatePickerElementFlagYearMonthDay@224$NSDatePickerModeRange@1$NSDatePickerModeSingle@0$NSDatePickerStyleClockAndCalendar@1$NSDatePickerStyleTextField@2$NSDatePickerStyleTextFieldAndStepper@0$NSDecimalTabStopType@3$NSDefaultControlTint@0$NSDefaultTokenStyle@0$NSDeleteCharFunctionKey@63294$NSDeleteCharacter@127$NSDeleteFunctionKey@63272$NSDeleteLineFunctionKey@63292$NSDescendingPageOrder@-1$NSDeviceIndependentModifierFlagsMask@4294901760$NSDeviceNColorSpaceModel@4$NSDirectSelection@0$NSDirectionalRectEdgeAll@15$NSDirectionalRectEdgeBottom@4$NSDirectionalRectEdgeLeading@2$NSDirectionalRectEdgeNone@0$NSDirectionalRectEdgeTop@1$NSDirectionalRectEdgeTrailing@8$NSDisclosureBezelStyle@5$NSDiscreteCapacityLevelIndicatorStyle@2$NSDisplayGamutP3@2$NSDisplayGamutSRGB@1$NSDisplayWindowRunLoopOrdering@600000$NSDocModalWindowMask@64$NSDockWindowLevel@20$NSDoubleType@6$NSDownArrowFunctionKey@63233$NSDownTextMovement@22$NSDragOperationAll@15$NSDragOperationAll_Obsolete@15$NSDragOperationCopy@1$NSDragOperationDelete@32$NSDragOperationEvery@18446744073709551615$NSDragOperationGeneric@4$NSDragOperationLink@2$NSDragOperationMove@16$NSDragOperationNone@0$NSDragOperationPrivate@8$NSDraggingContextOutsideApplication@0$NSDraggingContextWithinApplication@1$NSDraggingFormationDefault@0$NSDraggingFormationList@3$NSDraggingFormationNone@1$NSDraggingFormationPile@2$NSDraggingFormationStack@4$NSDraggingItemEnumerationClearNonenumeratedImages@65536$NSDraggingItemEnumerationConcurrent@1$NSDrawerClosedState@0$NSDrawerClosingState@3$NSDrawerOpenState@2$NSDrawerOpeningState@1$NSEndFunctionKey@63275$NSEnterCharacter@3$NSEraDatePickerElementFlag@256$NSEraserPointingDevice@3$NSEvenOddWindingRule@1$NSEventButtonMaskPenLowerSide@2$NSEventButtonMaskPenTip@1$NSEventButtonMaskPenUpperSide@4$NSEventGestureAxisHorizontal@1$NSEventGestureAxisNone@0$NSEventGestureAxisVertical@2$NSEventMaskAny@18446744073709551615$NSEventMaskAppKitDefined@8192$NSEventMaskApplicationDefined@32768$NSEventMaskBeginGesture@524288$NSEventMaskChangeMode@274877906944$NSEventMaskCursorUpdate@131072$NSEventMaskDirectTouch@137438953472$NSEventMaskEndGesture@1048576$NSEventMaskFlagsChanged@4096$NSEventMaskGesture@536870912$NSEventMaskKeyDown@1024$NSEventMaskKeyUp@2048$NSEventMaskLeftMouseDown@2$NSEventMaskLeftMouseDragged@64$NSEventMaskLeftMouseUp@4$NSEventMaskMagnify@1073741824$NSEventMaskMouseEntered@256$NSEventMaskMouseExited@512$NSEventMaskMouseMoved@32$NSEventMaskOtherMouseDown@33554432$NSEventMaskOtherMouseDragged@134217728$NSEventMaskOtherMouseUp@67108864$NSEventMaskPeriodic@65536$NSEventMaskPressure@17179869184$NSEventMaskRightMouseDown@8$NSEventMaskRightMouseDragged@128$NSEventMaskRightMouseUp@16$NSEventMaskRotate@262144$NSEventMaskScrollWheel@4194304$NSEventMaskSmartMagnify@4294967296$NSEventMaskSwipe@2147483648$NSEventMaskSystemDefined@16384$NSEventMaskTabletPoint@8388608$NSEventMaskTabletProximity@16777216$NSEventModifierFlagCapsLock@65536$NSEventModifierFlagCommand@1048576$NSEventModifierFlagControl@262144$NSEventModifierFlagDeviceIndependentFlagsMask@4294901760$NSEventModifierFlagFunction@8388608$NSEventModifierFlagHelp@4194304$NSEventModifierFlagNumericPad@2097152$NSEventModifierFlagOption@524288$NSEventModifierFlagShift@131072$NSEventPhaseBegan@1$NSEventPhaseCancelled@16$NSEventPhaseChanged@4$NSEventPhaseEnded@8$NSEventPhaseMayBegin@32$NSEventPhaseNone@0$NSEventPhaseStationary@2$NSEventSubtypeApplicationActivated@1$NSEventSubtypeApplicationDeactivated@2$NSEventSubtypeMouseEvent@0$NSEventSubtypePowerOff@1$NSEventSubtypeScreenChanged@8$NSEventSubtypeTabletPoint@1$NSEventSubtypeTabletProximity@2$NSEventSubtypeTouch@3$NSEventSubtypeWindowExposed@0$NSEventSubtypeWindowMoved@4$NSEventSwipeTrackingClampGestureAmount@2$NSEventSwipeTrackingLockDirection@1$NSEventTypeAppKitDefined@13$NSEventTypeApplicationDefined@15$NSEventTypeBeginGesture@19$NSEventTypeChangeMode@38$NSEventTypeCursorUpdate@17$NSEventTypeDirectTouch@37$NSEventTypeEndGesture@20$NSEventTypeFlagsChanged@12$NSEventTypeGesture@29$NSEventTypeKeyDown@10$NSEventTypeKeyUp@11$NSEventTypeLeftMouseDown@1$NSEventTypeLeftMouseDragged@6$NSEventTypeLeftMouseUp@2$NSEventTypeMagnify@30$NSEventTypeMouseEntered@8$NSEventTypeMouseExited@9$NSEventTypeMouseMoved@5$NSEventTypeOtherMouseDown@25$NSEventTypeOtherMouseDragged@27$NSEventTypeOtherMouseUp@26$NSEventTypePeriodic@16$NSEventTypePressure@34$NSEventTypeQuickLook@33$NSEventTypeRightMouseDown@3$NSEventTypeRightMouseDragged@7$NSEventTypeRightMouseUp@4$NSEventTypeRotate@18$NSEventTypeScrollWheel@22$NSEventTypeSmartMagnify@32$NSEventTypeSwipe@31$NSEventTypeSystemDefined@14$NSEventTypeTabletPoint@23$NSEventTypeTabletProximity@24$NSExclude10_4ElementsIconCreationOption@4$NSExcludeQuickDrawElementsIconCreationOption@2$NSExecuteFunctionKey@63298$NSExpandedFontMask@32$NSF10FunctionKey@63245$NSF11FunctionKey@63246$NSF12FunctionKey@63247$NSF13FunctionKey@63248$NSF14FunctionKey@63249$NSF15FunctionKey@63250$NSF16FunctionKey@63251$NSF17FunctionKey@63252$NSF18FunctionKey@63253$NSF19FunctionKey@63254$NSF1FunctionKey@63236$NSF20FunctionKey@63255$NSF21FunctionKey@63256$NSF22FunctionKey@63257$NSF23FunctionKey@63258$NSF24FunctionKey@63259$NSF25FunctionKey@63260$NSF26FunctionKey@63261$NSF27FunctionKey@63262$NSF28FunctionKey@63263$NSF29FunctionKey@63264$NSF2FunctionKey@63237$NSF30FunctionKey@63265$NSF31FunctionKey@63266$NSF32FunctionKey@63267$NSF33FunctionKey@63268$NSF34FunctionKey@63269$NSF35FunctionKey@63270$NSF3FunctionKey@63238$NSF4FunctionKey@63239$NSF5FunctionKey@63240$NSF6FunctionKey@63241$NSF7FunctionKey@63242$NSF8FunctionKey@63243$NSF9FunctionKey@63244$NSFPCurrentField@134$NSFPPreviewButton@131$NSFPPreviewField@128$NSFPRevertButton@130$NSFPSetButton@132$NSFPSizeField@129$NSFPSizeTitle@133$NSFileHandlingPanelCancelButton@0$NSFileHandlingPanelOKButton@1$NSFileWrapperReadingImmediate@1$NSFileWrapperReadingWithoutMapping@2$NSFileWrapperWritingAtomic@1$NSFileWrapperWritingWithNameUpdating@2$NSFindFunctionKey@63301$NSFindPanelActionNext@2$NSFindPanelActionPrevious@3$NSFindPanelActionReplace@5$NSFindPanelActionReplaceAll@4$NSFindPanelActionReplaceAllInSelection@8$NSFindPanelActionReplaceAndFind@6$NSFindPanelActionSelectAll@9$NSFindPanelActionSelectAllInSelection@10$NSFindPanelActionSetFindString@7$NSFindPanelActionShowFindPanel@1$NSFindPanelSubstringMatchTypeContains@0$NSFindPanelSubstringMatchTypeEndsWith@3$NSFindPanelSubstringMatchTypeFullWord@2$NSFindPanelSubstringMatchTypeStartsWith@1$NSFitPagination@1$NSFixedPitchFontMask@1024$NSFlagsChanged@12$NSFlagsChangedMask@4096$NSFloatType@3$NSFloatingPointSamplesBitmapFormat@4$NSFloatingWindowLevel@3$NSFocusRingAbove@2$NSFocusRingBelow@1$NSFocusRingOnly@0$NSFocusRingTypeDefault@0$NSFocusRingTypeExterior@2$NSFocusRingTypeNone@1$NSFontAntialiasedIntegerAdvancementsRenderingMode@3$NSFontAntialiasedRenderingMode@1$NSFontAssetDownloadError@66304$NSFontAssetRequestOptionUsesStandardUI@1$NSFontBoldTrait@2$NSFontClarendonSerifsClass@1073741824$NSFontCollectionApplicationOnlyMask@1$NSFontCollectionVisibilityComputer@4$NSFontCollectionVisibilityProcess@1$NSFontCollectionVisibilityUser@2$NSFontCondensedTrait@64$NSFontDefaultRenderingMode@0$NSFontDescriptorClassClarendonSerifs@1073741824$NSFontDescriptorClassFreeformSerifs@1879048192$NSFontDescriptorClassMask@4026531840$NSFontDescriptorClassModernSerifs@805306368$NSFontDescriptorClassOldStyleSerifs@268435456$NSFontDescriptorClassOrnamentals@2415919104$NSFontDescriptorClassSansSerif@2147483648$NSFontDescriptorClassScripts@2684354560$NSFontDescriptorClassSlabSerifs@1342177280$NSFontDescriptorClassSymbolic@3221225472$NSFontDescriptorClassTransitionalSerifs@536870912$NSFontDescriptorClassUnknown@0$NSFontDescriptorTraitBold@2$NSFontDescriptorTraitCondensed@64$NSFontDescriptorTraitEmphasized@2$NSFontDescriptorTraitExpanded@32$NSFontDescriptorTraitItalic@1$NSFontDescriptorTraitLooseLeading@65536$NSFontDescriptorTraitMonoSpace@1024$NSFontDescriptorTraitTightLeading@32768$NSFontDescriptorTraitUIOptimized@4096$NSFontDescriptorTraitVertical@2048$NSFontErrorMaximum@66335$NSFontErrorMinimum@66304$NSFontExpandedTrait@32$NSFontFamilyClassMask@4026531840$NSFontFreeformSerifsClass@1879048192$NSFontIntegerAdvancementsRenderingMode@2$NSFontItalicTrait@1$NSFontModernSerifsClass@805306368$NSFontMonoSpaceTrait@1024$NSFontOldStyleSerifsClass@268435456$NSFontOrnamentalsClass@2415919104$NSFontPanelAllEffectsModeMask@1048320$NSFontPanelAllModesMask@4294967295$NSFontPanelCollectionModeMask@4$NSFontPanelDocumentColorEffectModeMask@2048$NSFontPanelFaceModeMask@1$NSFontPanelModeMaskAllEffects@1048320$NSFontPanelModeMaskCollection@4$NSFontPanelModeMaskDocumentColorEffect@2048$NSFontPanelModeMaskFace@1$NSFontPanelModeMaskShadowEffect@4096$NSFontPanelModeMaskSize@2$NSFontPanelModeMaskStrikethroughEffect@512$NSFontPanelModeMaskTextColorEffect@1024$NSFontPanelModeMaskUnderlineEffect@256$NSFontPanelModesMaskAllModes@4294967295$NSFontPanelModesMaskStandardModes@65535$NSFontPanelShadowEffectModeMask@4096$NSFontPanelSizeModeMask@2$NSFontPanelStandardModesMask@65535$NSFontPanelStrikethroughEffectModeMask@512$NSFontPanelTextColorEffectModeMask@1024$NSFontPanelUnderlineEffectModeMask@256$NSFontSansSerifClass@2147483648$NSFontScriptsClass@2684354560$NSFontSlabSerifsClass@1342177280$NSFontSymbolicClass@3221225472$NSFontTransitionalSerifsClass@536870912$NSFontUIOptimizedTrait@4096$NSFontUnknownClass@0$NSFontVerticalTrait@2048$NSFormFeedCharacter@12$NSFullScreenWindowMask@16384$NSFullSizeContentViewWindowMask@32768$NSFunctionKeyMask@8388608$NSGIFFileType@2$NSGestureRecognizerStateBegan@1$NSGestureRecognizerStateCancelled@4$NSGestureRecognizerStateChanged@2$NSGestureRecognizerStateEnded@3$NSGestureRecognizerStateFailed@5$NSGestureRecognizerStatePossible@0$NSGestureRecognizerStateRecognized@3$NSGlyphAttributeBidiLevel@2$NSGlyphAttributeElastic@1$NSGlyphAttributeInscribe@5$NSGlyphAttributeSoft@0$NSGlyphInscribeAbove@2$NSGlyphInscribeBase@0$NSGlyphInscribeBelow@1$NSGlyphInscribeOverBelow@4$NSGlyphInscribeOverstrike@3$NSGlyphPropertyControlCharacter@2$NSGlyphPropertyElastic@4$NSGlyphPropertyNonBaseCharacter@8$NSGlyphPropertyNull@1$NSGradientConcaveStrong@2$NSGradientConcaveWeak@1$NSGradientConvexStrong@4$NSGradientConvexWeak@3$NSGradientDrawsAfterEndingLocation@2$NSGradientDrawsBeforeStartingLocation@1$NSGradientNone@0$NSGraphiteControlTint@6$NSGrayColorSpaceModel@0$NSGrayModeColorPanel@0$NSGridCellPlacementBottom@3$NSGridCellPlacementCenter@4$NSGridCellPlacementFill@5$NSGridCellPlacementInherited@0$NSGridCellPlacementLeading@2$NSGridCellPlacementNone@1$NSGridCellPlacementTop@2$NSGridCellPlacementTrailing@3$NSGridRowAlignmentFirstBaseline@2$NSGridRowAlignmentInherited@0$NSGridRowAlignmentLastBaseline@3$NSGridRowAlignmentNone@1$NSGrooveBorder@3$NSHSBModeColorPanel@3$NSHUDWindowMask@8192$NSHapticFeedbackPatternAlignment@1$NSHapticFeedbackPatternGeneric@0$NSHapticFeedbackPatternLevelChange@2$NSHapticFeedbackPerformanceTimeDefault@0$NSHapticFeedbackPerformanceTimeDrawCompleted@2$NSHapticFeedbackPerformanceTimeNow@1$NSHeavierFontAction@5$NSHelpButtonBezelStyle@9$NSHelpFunctionKey@63302$NSHelpKeyMask@4194304$NSHighlightModeMatrix@1$NSHomeFunctionKey@63273$NSHorizontalRuler@0$NSHourMinuteDatePickerElementFlag@12$NSHourMinuteSecondDatePickerElementFlag@14$NSIdentityMappingCharacterCollection@0$NSIllegalTextMovement@0$NSImageAbove@5$NSImageAlignBottom@5$NSImageAlignBottomLeft@6$NSImageAlignBottomRight@7$NSImageAlignCenter@0$NSImageAlignLeft@4$NSImageAlignRight@8$NSImageAlignTop@1$NSImageAlignTopLeft@2$NSImageAlignTopRight@3$NSImageBelow@4$NSImageCacheAlways@1$NSImageCacheBySize@2$NSImageCacheDefault@0$NSImageCacheNever@3$NSImageCellType@2$NSImageDynamicRangeConstrainedHigh@1$NSImageDynamicRangeHigh@2$NSImageDynamicRangeStandard@0$NSImageDynamicRangeUnspecified@-1$NSImageFrameButton@4$NSImageFrameGrayBezel@2$NSImageFrameGroove@3$NSImageFrameNone@0$NSImageFramePhoto@1$NSImageInterpolationDefault@0$NSImageInterpolationHigh@3$NSImageInterpolationLow@2$NSImageInterpolationMedium@4$NSImageInterpolationNone@1$NSImageLayoutDirectionLeftToRight@2$NSImageLayoutDirectionRightToLeft@3$NSImageLayoutDirectionUnspecified@-1$NSImageLeading@7$NSImageLeft@2$NSImageLoadStatusCancelled@1$NSImageLoadStatusCompleted@0$NSImageLoadStatusInvalidData@2$NSImageLoadStatusReadError@4$NSImageLoadStatusUnexpectedEOF@3$NSImageOnly@1$NSImageOverlaps@6$NSImageRepLoadStatusCompleted@-6$NSImageRepLoadStatusInvalidData@-4$NSImageRepLoadStatusReadingHeader@-2$NSImageRepLoadStatusUnexpectedEOF@-5$NSImageRepLoadStatusUnknownType@-1$NSImageRepLoadStatusWillNeedAllData@-3$NSImageRepMatchesDevice@0$NSImageRight@3$NSImageScaleAxesIndependently@1$NSImageScaleNone@2$NSImageScaleProportionallyDown@0$NSImageScaleProportionallyUpOrDown@3$NSImageSymbolScaleLarge@3$NSImageSymbolScaleMedium@2$NSImageSymbolScaleSmall@1$NSImageTrailing@8$NSIndexedColorSpaceModel@5$NSInformationalAlertStyle@1$NSInformationalRequest@10$NSInlineBezelStyle@15$NSInsertCharFunctionKey@63293$NSInsertFunctionKey@63271$NSInsertLineFunctionKey@63291$NSIntType@1$NSItalicFontMask@1$NSJPEG2000FileType@5$NSJPEGFileType@3$NSJustifiedTextAlignment@3$NSKeyDown@10$NSKeyDownMask@1024$NSKeyUp@11$NSKeyUpMask@2048$NSLABColorSpaceModel@3$NSLAYOUTANCHOR_H@1$NSLAYOUTCONSTRAINT_H@1$NSLandscapeOrientation@1$NSLayoutAttributeBaseline@11$NSLayoutAttributeBottom@4$NSLayoutAttributeCenterX@9$NSLayoutAttributeCenterY@10$NSLayoutAttributeFirstBaseline@12$NSLayoutAttributeHeight@8$NSLayoutAttributeLastBaseline@11$NSLayoutAttributeLeading@5$NSLayoutAttributeLeft@1$NSLayoutAttributeNotAnAttribute@0$NSLayoutAttributeRight@2$NSLayoutAttributeTop@3$NSLayoutAttributeTrailing@6$NSLayoutAttributeWidth@7$NSLayoutConstraintOrientationHorizontal@0$NSLayoutConstraintOrientationVertical@1$NSLayoutFormatAlignAllBaseline@2048$NSLayoutFormatAlignAllBottom@16$NSLayoutFormatAlignAllCenterX@512$NSLayoutFormatAlignAllCenterY@1024$NSLayoutFormatAlignAllFirstBaseline@4096$NSLayoutFormatAlignAllLastBaseline@2048$NSLayoutFormatAlignAllLeading@32$NSLayoutFormatAlignAllLeft@2$NSLayoutFormatAlignAllRight@4$NSLayoutFormatAlignAllTop@8$NSLayoutFormatAlignAllTrailing@64$NSLayoutFormatAlignmentMask@65535$NSLayoutFormatDirectionLeadingToTrailing@0$NSLayoutFormatDirectionLeftToRight@65536$NSLayoutFormatDirectionMask@196608$NSLayoutFormatDirectionRightToLeft@131072$NSLayoutPriorityDefaultHigh@750$NSLayoutPriorityDefaultLow@250$NSLayoutPriorityDragThatCanResizeWindow@510$NSLayoutPriorityDragThatCannotResizeWindow@490$NSLayoutPriorityFittingSizeCompression@50$NSLayoutPriorityRequired@1000$NSLayoutPriorityWindowSizeStayPut@500$NSLayoutRelationEqual@0$NSLayoutRelationGreaterThanOrEqual@1$NSLayoutRelationLessThanOrEqual@-1$NSLeftArrowFunctionKey@63234$NSLeftMouseDown@1$NSLeftMouseDownMask@2$NSLeftMouseDragged@6$NSLeftMouseDraggedMask@64$NSLeftMouseUp@2$NSLeftMouseUpMask@4$NSLeftTabStopType@0$NSLeftTabsBezelBorder@1$NSLeftTextAlignment@0$NSLeftTextMovement@19$NSLevelIndicatorPlaceholderVisibilityAlways@1$NSLevelIndicatorPlaceholderVisibilityAutomatic@0$NSLevelIndicatorPlaceholderVisibilityWhileEditing@2$NSLevelIndicatorStyleContinuousCapacity@1$NSLevelIndicatorStyleDiscreteCapacity@2$NSLevelIndicatorStyleRating@3$NSLevelIndicatorStyleRelevancy@0$NSLighterFontAction@6$NSLineBorder@1$NSLineBreakByCharWrapping@1$NSLineBreakByClipping@2$NSLineBreakByTruncatingHead@3$NSLineBreakByTruncatingMiddle@5$NSLineBreakByTruncatingTail@4$NSLineBreakByWordWrapping@0$NSLineBreakStrategyHangulWordPriority@2$NSLineBreakStrategyNone@0$NSLineBreakStrategyPushOut@1$NSLineBreakStrategyStandard@65535$NSLineCapStyleButt@0$NSLineCapStyleRound@1$NSLineCapStyleSquare@2$NSLineDoesntMove@0$NSLineJoinStyleBevel@2$NSLineJoinStyleMiter@0$NSLineJoinStyleRound@1$NSLineMovesDown@3$NSLineMovesLeft@1$NSLineMovesRight@2$NSLineMovesUp@4$NSLineSeparatorCharacter@8232$NSLineSweepDown@2$NSLineSweepLeft@0$NSLineSweepRight@1$NSLineSweepUp@3$NSLineToBezierPathElement@1$NSLinearSlider@0$NSListModeMatrix@2$NSMacintoshInterfaceStyle@3$NSMainMenuWindowLevel@24$NSMediaLibraryAudio@1$NSMediaLibraryImage@2$NSMediaLibraryMovie@4$NSMenuFunctionKey@63285$NSMenuItemBadgeTypeAlerts@3$NSMenuItemBadgeTypeNewItems@2$NSMenuItemBadgeTypeNone@0$NSMenuItemBadgeTypeUpdates@1$NSMenuPresentationStylePalette@1$NSMenuPresentationStyleRegular@0$NSMenuPropertyItemAccessibilityDescription@32$NSMenuPropertyItemAttributedTitle@2$NSMenuPropertyItemEnabled@16$NSMenuPropertyItemImage@8$NSMenuPropertyItemKeyEquivalent@4$NSMenuPropertyItemTitle@1$NSMenuSelectionModeAutomatic@0$NSMenuSelectionModeSelectAny@2$NSMenuSelectionModeSelectOne@1$NSMiniControlSize@2$NSMiniaturizableWindowMask@4$NSMiterLineJoinStyle@0$NSMixedState@-1$NSModalPanelWindowLevel@8$NSModalResponseAbort@-1001$NSModalResponseCancel@0$NSModalResponseContinue@-1002$NSModalResponseOK@1$NSModalResponseStop@-1000$NSModeSwitchFunctionKey@63303$NSMomentaryChangeButton@5$NSMomentaryLight@7$NSMomentaryLightButton@0$NSMomentaryPushButton@0$NSMomentaryPushInButton@7$NSMouseEntered@8$NSMouseEnteredMask@256$NSMouseEventSubtype@0$NSMouseExited@9$NSMouseExitedMask@512$NSMouseMoved@5$NSMouseMovedMask@32$NSMoveToBezierPathElement@0$NSMultiLevelAcceleratorButton@9$NSNarrowFontMask@16$NSNativeShortGlyphPacking@5$NSNaturalTextAlignment@4$NSNewlineCharacter@10$NSNextFunctionKey@63296$NSNextStepInterfaceStyle@1$NSNoBorder@0$NSNoCellMask@0$NSNoFontChangeAction@0$NSNoImage@0$NSNoInterfaceStyle@0$NSNoModeColorPanel@-1$NSNoScrollerParts@0$NSNoTabsBezelBorder@4$NSNoTabsLineBorder@5$NSNoTabsNoBorder@6$NSNoTitle@0$NSNoUnderlineStyle@0$NSNonStandardCharacterSetFontMask@8$NSNonZeroWindingRule@0$NSNonactivatingPanelMask@128$NSNormalWindowLevel@0$NSNullCellType@0$NSNullGlyph@0$NSNumericPadKeyMask@2097152$NSOKButton@1$NSOPENGL_CURRENT_VERSION@1$NSOffState@0$NSOnOffButton@6$NSOnState@1$NSOnlyScrollerArrows@1$NSOpenGLCPCurrentRendererID@309$NSOpenGLCPGPUFragmentProcessing@311$NSOpenGLCPGPUVertexProcessing@310$NSOpenGLCPHasDrawable@314$NSOpenGLCPMPSwapsInFlight@315$NSOpenGLCPRasterizationEnable@221$NSOpenGLCPReclaimResources@308$NSOpenGLCPStateValidation@301$NSOpenGLCPSurfaceBackingSize@304$NSOpenGLCPSurfaceOpacity@236$NSOpenGLCPSurfaceOrder@235$NSOpenGLCPSurfaceSurfaceVolatile@306$NSOpenGLCPSwapInterval@222$NSOpenGLCPSwapRectangle@200$NSOpenGLCPSwapRectangleEnable@201$NSOpenGLContextParameterCurrentRendererID@309$NSOpenGLContextParameterGPUFragmentProcessing@311$NSOpenGLContextParameterGPUVertexProcessing@310$NSOpenGLContextParameterHasDrawable@314$NSOpenGLContextParameterMPSwapsInFlight@315$NSOpenGLContextParameterRasterizationEnable@221$NSOpenGLContextParameterReclaimResources@308$NSOpenGLContextParameterStateValidation@301$NSOpenGLContextParameterSurfaceBackingSize@304$NSOpenGLContextParameterSurfaceOpacity@236$NSOpenGLContextParameterSurfaceOrder@235$NSOpenGLContextParameterSurfaceSurfaceVolatile@306$NSOpenGLContextParameterSwapInterval@222$NSOpenGLContextParameterSwapRectangle@200$NSOpenGLContextParameterSwapRectangleEnable@201$NSOpenGLGOClearFormatCache@502$NSOpenGLGOFormatCacheSize@501$NSOpenGLGOResetLibrary@504$NSOpenGLGORetainRenderers@503$NSOpenGLGOUseBuildCache@506$NSOpenGLPFAAccelerated@73$NSOpenGLPFAAcceleratedCompute@97$NSOpenGLPFAAccumSize@14$NSOpenGLPFAAllRenderers@1$NSOpenGLPFAAllowOfflineRenderers@96$NSOpenGLPFAAlphaSize@11$NSOpenGLPFAAuxBuffers@7$NSOpenGLPFAAuxDepthStencil@57$NSOpenGLPFABackingStore@76$NSOpenGLPFAClosestPolicy@74$NSOpenGLPFAColorFloat@58$NSOpenGLPFAColorSize@8$NSOpenGLPFACompliant@83$NSOpenGLPFADepthSize@12$NSOpenGLPFADoubleBuffer@5$NSOpenGLPFAFullScreen@54$NSOpenGLPFAMPSafe@78$NSOpenGLPFAMaximumPolicy@52$NSOpenGLPFAMinimumPolicy@51$NSOpenGLPFAMultiScreen@81$NSOpenGLPFAMultisample@59$NSOpenGLPFANoRecovery@72$NSOpenGLPFAOffScreen@53$NSOpenGLPFAOpenGLProfile@99$NSOpenGLPFAPixelBuffer@90$NSOpenGLPFARemotePixelBuffer@91$NSOpenGLPFARendererID@70$NSOpenGLPFARobust@75$NSOpenGLPFASampleAlpha@61$NSOpenGLPFASampleBuffers@55$NSOpenGLPFASamples@56$NSOpenGLPFAScreenMask@84$NSOpenGLPFASingleRenderer@71$NSOpenGLPFAStencilSize@13$NSOpenGLPFAStereo@6$NSOpenGLPFASupersample@60$NSOpenGLPFATripleBuffer@3$NSOpenGLPFAVirtualScreenCount@128$NSOpenGLPFAWindow@80$NSOpenGLProfileVersion3_2Core@12800$NSOpenGLProfileVersion4_1Core@16640$NSOpenGLProfileVersionLegacy@4096$NSOtherMouseDown@25$NSOtherMouseDownMask@33554432$NSOtherMouseDragged@27$NSOtherMouseDraggedMask@134217728$NSOtherMouseUp@26$NSOtherMouseUpMask@67108864$NSOtherTextMovement@0$NSOutlineViewDropOnItemIndex@-1$NSPDFPanelRequestsParentDirectory@16777216$NSPDFPanelShowsOrientation@8$NSPDFPanelShowsPaperSize@4$NSPNGFileType@4$NSPageControllerTransitionStyleHorizontalStrip@2$NSPageControllerTransitionStyleStackBook@1$NSPageControllerTransitionStyleStackHistory@0$NSPageDownFunctionKey@63277$NSPageLayoutResultCancelled@0$NSPageLayoutResultChanged@1$NSPageUpFunctionKey@63276$NSPaperOrientationLandscape@1$NSPaperOrientationPortrait@0$NSParagraphSeparatorCharacter@8233$NSPasteboardContentsCurrentHostOnly@1$NSPasteboardReadingAsData@0$NSPasteboardReadingAsKeyedArchive@4$NSPasteboardReadingAsPropertyList@2$NSPasteboardReadingAsString@1$NSPasteboardWritingPromised@512$NSPathStyleNavigationBar@1$NSPathStylePopUp@2$NSPathStyleStandard@0$NSPatternColorSpaceModel@6$NSPauseFunctionKey@63280$NSPenLowerSideMask@2$NSPenPointingDevice@1$NSPenTipMask@1$NSPenUpperSideMask@4$NSPeriodic@16$NSPeriodicMask@65536$NSPickerTouchBarItemControlRepresentationAutomatic@0$NSPickerTouchBarItemControlRepresentationCollapsed@2$NSPickerTouchBarItemControlRepresentationExpanded@1$NSPickerTouchBarItemSelectionModeMomentary@2$NSPickerTouchBarItemSelectionModeSelectAny@1$NSPickerTouchBarItemSelectionModeSelectOne@0$NSPlainTextTokenStyle@1$NSPointingDeviceTypeCursor@2$NSPointingDeviceTypeEraser@3$NSPointingDeviceTypePen@1$NSPointingDeviceTypeUnknown@0$NSPopUpArrowAtBottom@2$NSPopUpArrowAtCenter@1$NSPopUpMenuWindowLevel@101$NSPopUpNoArrow@0$NSPopoverAppearanceHUD@1$NSPopoverAppearanceMinimal@0$NSPopoverBehaviorApplicationDefined@0$NSPopoverBehaviorSemitransient@2$NSPopoverBehaviorTransient@1$NSPortraitOrientation@0$NSPositiveDoubleType@7$NSPositiveFloatType@4$NSPositiveIntType@2$NSPosterFontMask@256$NSPowerOffEventType@1$NSPressedTab@2$NSPressureBehaviorPrimaryAccelerator@3$NSPressureBehaviorPrimaryClick@1$NSPressureBehaviorPrimaryDeepClick@5$NSPressureBehaviorPrimaryDeepDrag@6$NSPressureBehaviorPrimaryDefault@0$NSPressureBehaviorPrimaryGeneric@2$NSPressureBehaviorUnknown@-1$NSPrevFunctionKey@63295$NSPrintFunctionKey@63288$NSPrintPanelResultCancelled@0$NSPrintPanelResultPrinted@1$NSPrintPanelShowsCopies@1$NSPrintPanelShowsOrientation@8$NSPrintPanelShowsPageRange@2$NSPrintPanelShowsPageSetupAccessory@256$NSPrintPanelShowsPaperSize@4$NSPrintPanelShowsPreview@131072$NSPrintPanelShowsPrintSelection@32$NSPrintPanelShowsScaling@16$NSPrintRenderingQualityBest@0$NSPrintRenderingQualityResponsive@1$NSPrintScreenFunctionKey@63278$NSPrinterTableError@2$NSPrinterTableNotFound@1$NSPrinterTableOK@0$NSPrintingCancelled@0$NSPrintingFailure@3$NSPrintingPaginationModeAutomatic@0$NSPrintingPaginationModeClip@2$NSPrintingPaginationModeFit@1$NSPrintingReplyLater@2$NSPrintingSuccess@1$NSProgressIndicatorBarStyle@0$NSProgressIndicatorPreferredAquaThickness@12$NSProgressIndicatorPreferredLargeThickness@18$NSProgressIndicatorPreferredSmallThickness@10$NSProgressIndicatorPreferredThickness@14$NSProgressIndicatorSpinningStyle@1$NSProgressIndicatorStyleBar@0$NSProgressIndicatorStyleSpinning@1$NSPushInCell@2$NSPushInCellMask@2$NSPushOnPushOffButton@1$NSRGBColorSpaceModel@1$NSRGBModeColorPanel@1$NSRadioButton@4$NSRadioModeMatrix@0$NSRangeDateMode@1$NSRatingLevelIndicatorStyle@3$NSRecessedBezelStyle@13$NSRectAlignmentBottom@5$NSRectAlignmentBottomLeading@4$NSRectAlignmentBottomTrailing@6$NSRectAlignmentLeading@3$NSRectAlignmentNone@0$NSRectAlignmentTop@1$NSRectAlignmentTopLeading@2$NSRectAlignmentTopTrailing@8$NSRectAlignmentTrailing@7$NSRedoFunctionKey@63300$NSRegularControlSize@0$NSRegularSquareBezelStyle@2$NSRelevancyLevelIndicatorStyle@0$NSRemoteNotificationTypeAlert@4$NSRemoteNotificationTypeBadge@1$NSRemoteNotificationTypeNone@0$NSRemoteNotificationTypeSound@2$NSRemoveTraitFontAction@7$NSResetCursorRectsRunLoopOrdering@700000$NSResetFunctionKey@63283$NSResizableWindowMask@8$NSReturnTextMovement@16$NSRightArrowFunctionKey@63235$NSRightMouseDown@3$NSRightMouseDownMask@8$NSRightMouseDragged@7$NSRightMouseDraggedMask@128$NSRightMouseUp@4$NSRightMouseUpMask@16$NSRightTabStopType@1$NSRightTabsBezelBorder@3$NSRightTextMovement@20$NSRoundLineCapStyle@1$NSRoundLineJoinStyle@1$NSRoundRectBezelStyle@12$NSRoundedBezelStyle@1$NSRoundedDisclosureBezelStyle@14$NSRoundedTokenStyle@2$NSRuleEditorNestingModeCompound@2$NSRuleEditorNestingModeList@1$NSRuleEditorNestingModeSimple@3$NSRuleEditorNestingModeSingle@0$NSRuleEditorRowTypeCompound@1$NSRuleEditorRowTypeSimple@0$NSRunAbortedResponse@-1001$NSRunContinuesResponse@-1002$NSRunStoppedResponse@-1000$NSSaveAsOperation@1$NSSaveOperation@0$NSSaveToOperation@2$NSScaleNone@2$NSScaleProportionally@0$NSScaleToFit@1$NSScreenChangedEventType@8$NSScreenSaverWindowLevel@1000$NSScrollElasticityAllowed@2$NSScrollElasticityAutomatic@0$NSScrollElasticityNone@1$NSScrollLockFunctionKey@63279$NSScrollViewFindBarPositionAboveContent@1$NSScrollViewFindBarPositionAboveHorizontalRuler@0$NSScrollViewFindBarPositionBelowContent@2$NSScrollWheel@22$NSScrollWheelMask@4194304$NSScrollerArrowsDefaultSetting@0$NSScrollerArrowsMaxEnd@0$NSScrollerArrowsMinEnd@1$NSScrollerArrowsNone@2$NSScrollerDecrementArrow@1$NSScrollerDecrementLine@4$NSScrollerDecrementPage@1$NSScrollerIncrementArrow@0$NSScrollerIncrementLine@5$NSScrollerIncrementPage@3$NSScrollerKnob@2$NSScrollerKnobSlot@6$NSScrollerKnobStyleDark@1$NSScrollerKnobStyleDefault@0$NSScrollerKnobStyleLight@2$NSScrollerNoPart@0$NSScrollerStyleLegacy@0$NSScrollerStyleOverlay@1$NSScrubberAlignmentCenter@3$NSScrubberAlignmentLeading@1$NSScrubberAlignmentNone@0$NSScrubberAlignmentTrailing@2$NSScrubberModeFixed@0$NSScrubberModeFree@1$NSSearchFieldClearRecentsMenuItemTag@1002$NSSearchFieldNoRecentsMenuItemTag@1003$NSSearchFieldRecentsMenuItemTag@1001$NSSearchFieldRecentsTitleMenuItemTag@1000$NSSegmentDistributionFill@1$NSSegmentDistributionFillEqually@2$NSSegmentDistributionFillProportionally@3$NSSegmentDistributionFit@0$NSSegmentStyleAutomatic@0$NSSegmentStyleCapsule@5$NSSegmentStyleRoundRect@3$NSSegmentStyleRounded@1$NSSegmentStyleSeparated@8$NSSegmentStyleSmallSquare@6$NSSegmentStyleTexturedRounded@2$NSSegmentStyleTexturedSquare@4$NSSegmentSwitchTrackingMomentary@2$NSSegmentSwitchTrackingMomentaryAccelerator@3$NSSegmentSwitchTrackingSelectAny@1$NSSegmentSwitchTrackingSelectOne@0$NSSelectByCharacter@0$NSSelectByParagraph@2$NSSelectByWord@1$NSSelectFunctionKey@63297$NSSelectedTab@0$NSSelectingNext@1$NSSelectingPrevious@2$NSSelectionAffinityDownstream@1$NSSelectionAffinityUpstream@0$NSServiceApplicationLaunchFailedError@66561$NSServiceApplicationNotFoundError@66560$NSServiceErrorMaximum@66817$NSServiceErrorMinimum@66560$NSServiceInvalidPasteboardDataError@66563$NSServiceMalformedServiceDictionaryError@66564$NSServiceMiscellaneousError@66800$NSServiceRequestTimedOutError@66562$NSShadowlessSquareBezelStyle@6$NSSharingContentScopeFull@2$NSSharingContentScopeItem@0$NSSharingContentScopePartial@1$NSSharingServiceErrorMaximum@67327$NSSharingServiceErrorMinimum@67072$NSSharingServiceNotConfiguredError@67072$NSShiftKeyMask@131072$NSShowControlGlyphs@1$NSShowInvisibleGlyphs@2$NSSingleDateMode@0$NSSingleUnderlineStyle@1$NSSizeDownFontAction@4$NSSizeUpFontAction@3$NSSliderTypeCircular@1$NSSliderTypeLinear@0$NSSmallCapsFontMask@128$NSSmallControlSize@1$NSSmallIconButtonBezelStyle@2$NSSmallSquareBezelStyle@10$NSSpecialPageOrder@0$NSSpeechImmediateBoundary@0$NSSpeechSentenceBoundary@2$NSSpeechWordBoundary@1$NSSpellingStateGrammarFlag@2$NSSpellingStateSpellingFlag@1$NSSplitViewDividerStylePaneSplitter@3$NSSplitViewDividerStyleThick@1$NSSplitViewDividerStyleThin@2$NSSplitViewItemBehaviorContentList@2$NSSplitViewItemBehaviorDefault@0$NSSplitViewItemBehaviorInspector@3$NSSplitViewItemBehaviorSidebar@1$NSSplitViewItemCollapseBehaviorDefault@0$NSSplitViewItemCollapseBehaviorPreferResizingSiblingsWithFixedSplitView@2$NSSplitViewItemCollapseBehaviorPreferResizingSplitViewWithFixedSiblings@1$NSSplitViewItemCollapseBehaviorUseConstraints@3$NSSpringLoadingContinuousActivation@2$NSSpringLoadingDisabled@0$NSSpringLoadingEnabled@1$NSSpringLoadingHighlightEmphasized@2$NSSpringLoadingHighlightNone@0$NSSpringLoadingHighlightStandard@1$NSSpringLoadingNoHover@4$NSSquareLineCapStyle@2$NSSquareStatusItemLength@-2$NSStackViewDistributionEqualCentering@4$NSStackViewDistributionEqualSpacing@3$NSStackViewDistributionFill@0$NSStackViewDistributionFillEqually@1$NSStackViewDistributionFillProportionally@2$NSStackViewDistributionGravityAreas@-1$NSStackViewGravityBottom@3$NSStackViewGravityCenter@2$NSStackViewGravityLeading@1$NSStackViewGravityTop@1$NSStackViewGravityTrailing@3$NSStackViewVisibilityPriorityDetachOnlyIfNecessary@900$NSStackViewVisibilityPriorityMustHold@1000$NSStackViewVisibilityPriorityNotVisible@0$NSStatusItemBehaviorRemovalAllowed@2$NSStatusItemBehaviorTerminationOnRemoval@4$NSStatusWindowLevel@25$NSStopFunctionKey@63284$NSStringDrawingDisableScreenFontSubstitution@4$NSStringDrawingOneShot@16$NSStringDrawingTruncatesLastVisibleLine@32$NSStringDrawingUsesDeviceMetrics@8$NSStringDrawingUsesFontLeading@2$NSStringDrawingUsesLineFragmentOrigin@1$NSSubmenuWindowLevel@3$NSSwitchButton@3$NSSysReqFunctionKey@63281$NSSystemDefined@14$NSSystemDefinedMask@16384$NSSystemFunctionKey@63287$NSTIFFCompressionCCITTFAX3@3$NSTIFFCompressionCCITTFAX4@4$NSTIFFCompressionJPEG@6$NSTIFFCompressionLZW@5$NSTIFFCompressionNEXT@32766$NSTIFFCompressionNone@1$NSTIFFCompressionOldJPEG@32865$NSTIFFCompressionPackBits@32773$NSTIFFFileType@0$NSTabCharacter@9$NSTabPositionBottom@3$NSTabPositionLeft@2$NSTabPositionNone@0$NSTabPositionRight@4$NSTabPositionTop@1$NSTabTextMovement@17$NSTabViewBorderTypeBezel@2$NSTabViewBorderTypeLine@1$NSTabViewBorderTypeNone@0$NSTabViewControllerTabStyleSegmentedControlOnBottom@1$NSTabViewControllerTabStyleSegmentedControlOnTop@0$NSTabViewControllerTabStyleToolbar@2$NSTabViewControllerTabStyleUnspecified@-1$NSTableColumnAutoresizingMask@1$NSTableColumnNoResizing@0$NSTableColumnUserResizingMask@2$NSTableRowActionEdgeLeading@0$NSTableRowActionEdgeTrailing@1$NSTableViewAnimationEffectFade@1$NSTableViewAnimationEffectGap@2$NSTableViewAnimationEffectNone@0$NSTableViewAnimationSlideDown@32$NSTableViewAnimationSlideLeft@48$NSTableViewAnimationSlideRight@64$NSTableViewAnimationSlideUp@16$NSTableViewDashedHorizontalGridLineMask@8$NSTableViewDraggingDestinationFeedbackStyleGap@2$NSTableViewDraggingDestinationFeedbackStyleNone@-1$NSTableViewDraggingDestinationFeedbackStyleRegular@0$NSTableViewDraggingDestinationFeedbackStyleSourceList@1$NSTableViewDropAbove@1$NSTableViewDropOn@0$NSTableViewFirstColumnOnlyAutoresizingStyle@5$NSTableViewGridNone@0$NSTableViewLastColumnOnlyAutoresizingStyle@4$NSTableViewNoColumnAutoresizing@0$NSTableViewReverseSequentialColumnAutoresizingStyle@3$NSTableViewRowActionStyleDestructive@1$NSTableViewRowActionStyleRegular@0$NSTableViewRowSizeStyleCustom@0$NSTableViewRowSizeStyleDefault@-1$NSTableViewRowSizeStyleLarge@3$NSTableViewRowSizeStyleMedium@2$NSTableViewRowSizeStyleSmall@1$NSTableViewSelectionHighlightStyleNone@-1$NSTableViewSelectionHighlightStyleRegular@0$NSTableViewSelectionHighlightStyleSourceList@1$NSTableViewSequentialColumnAutoresizingStyle@2$NSTableViewSolidHorizontalGridLineMask@2$NSTableViewSolidVerticalGridLineMask@1$NSTableViewStyleAutomatic@0$NSTableViewStyleFullWidth@1$NSTableViewStyleInset@2$NSTableViewStylePlain@4$NSTableViewStyleSourceList@3$NSTableViewUniformColumnAutoresizingStyle@1$NSTabletPoint@23$NSTabletPointEventSubtype@1$NSTabletPointMask@8388608$NSTabletProximity@24$NSTabletProximityEventSubtype@2$NSTabletProximityMask@16777216$NSTerminateCancel@0$NSTerminateLater@2$NSTerminateNow@1$NSTextAlignmentJustified@3$NSTextAlignmentLeft@0$NSTextAlignmentNatural@4$NSTextBlockAbsoluteValueType@0$NSTextBlockBaselineAlignment@3$NSTextBlockBorder@0$NSTextBlockBottomAlignment@2$NSTextBlockHeight@4$NSTextBlockMargin@1$NSTextBlockMaximumHeight@6$NSTextBlockMaximumWidth@2$NSTextBlockMiddleAlignment@1$NSTextBlockMinimumHeight@5$NSTextBlockMinimumWidth@1$NSTextBlockPadding@-1$NSTextBlockPercentageValueType@1$NSTextBlockTopAlignment@0$NSTextBlockWidth@0$NSTextCellType@1$NSTextContentManagerEnumerationOptionsNone@0$NSTextContentManagerEnumerationOptionsReverse@1$NSTextCursorAccessoryPlacementBackward@1$NSTextCursorAccessoryPlacementCenter@4$NSTextCursorAccessoryPlacementForward@2$NSTextCursorAccessoryPlacementInvisible@3$NSTextCursorAccessoryPlacementOffscreenBottom@8$NSTextCursorAccessoryPlacementOffscreenLeft@5$NSTextCursorAccessoryPlacementOffscreenRight@7$NSTextCursorAccessoryPlacementOffscreenTop@6$NSTextCursorAccessoryPlacementUnspecified@0$NSTextElementProviderEnumerationOptionsNone@0$NSTextElementProviderEnumerationOptionsReverse@1$NSTextFieldAndStepperDatePickerStyle@0$NSTextFieldDatePickerStyle@2$NSTextFieldRoundedBezel@1$NSTextFieldSquareBezel@0$NSTextFinderActionHideFindInterface@11$NSTextFinderActionHideReplaceInterface@13$NSTextFinderActionNextMatch@2$NSTextFinderActionPreviousMatch@3$NSTextFinderActionReplace@5$NSTextFinderActionReplaceAll@4$NSTextFinderActionReplaceAllInSelection@8$NSTextFinderActionReplaceAndFind@6$NSTextFinderActionSelectAll@9$NSTextFinderActionSelectAllInSelection@10$NSTextFinderActionSetSearchString@7$NSTextFinderActionShowFindInterface@1$NSTextFinderActionShowReplaceInterface@12$NSTextFinderMatchingTypeContains@0$NSTextFinderMatchingTypeEndsWith@3$NSTextFinderMatchingTypeFullWord@2$NSTextFinderMatchingTypeStartsWith@1$NSTextInputTraitTypeDefault@0$NSTextInputTraitTypeNo@1$NSTextInputTraitTypeYes@2$NSTextInsertionIndicatorAutomaticModeOptionsShowEffectsView@1$NSTextInsertionIndicatorAutomaticModeOptionsShowWhileTracking@2$NSTextInsertionIndicatorDisplayModeAutomatic@0$NSTextInsertionIndicatorDisplayModeHidden@1$NSTextInsertionIndicatorDisplayModeVisible@2$NSTextLayoutFragmentEnumerationOptionsEnsuresExtraLineFragment@8$NSTextLayoutFragmentEnumerationOptionsEnsuresLayout@4$NSTextLayoutFragmentEnumerationOptionsEstimatesSize@2$NSTextLayoutFragmentEnumerationOptionsNone@0$NSTextLayoutFragmentEnumerationOptionsReverse@1$NSTextLayoutFragmentStateCalculatedUsageBounds@2$NSTextLayoutFragmentStateEstimatedUsageBounds@1$NSTextLayoutFragmentStateLayoutAvailable@3$NSTextLayoutFragmentStateNone@0$NSTextLayoutManagerSegmentOptionsHeadSegmentExtended@4$NSTextLayoutManagerSegmentOptionsMiddleFragmentsExcluded@2$NSTextLayoutManagerSegmentOptionsNone@0$NSTextLayoutManagerSegmentOptionsRangeNotRequired@1$NSTextLayoutManagerSegmentOptionsTailSegmentExtended@8$NSTextLayoutManagerSegmentOptionsUpstreamAffinity@16$NSTextLayoutManagerSegmentTypeHighlight@2$NSTextLayoutManagerSegmentTypeSelection@1$NSTextLayoutManagerSegmentTypeStandard@0$NSTextLayoutOrientationHorizontal@0$NSTextLayoutOrientationVertical@1$NSTextListPrependEnclosingMarker@1$NSTextMovementBacktab@18$NSTextMovementCancel@23$NSTextMovementDown@22$NSTextMovementLeft@19$NSTextMovementOther@0$NSTextMovementReturn@16$NSTextMovementRight@20$NSTextMovementTab@17$NSTextMovementUp@21$NSTextReadInapplicableDocumentTypeError@65806$NSTextReadWriteErrorMaximum@66303$NSTextReadWriteErrorMinimum@65792$NSTextScalingStandard@0$NSTextScalingiOS@1$NSTextSelectionAffinityDownstream@1$NSTextSelectionAffinityUpstream@0$NSTextSelectionGranularityCharacter@0$NSTextSelectionGranularityLine@3$NSTextSelectionGranularityParagraph@2$NSTextSelectionGranularitySentence@4$NSTextSelectionGranularityWord@1$NSTextSelectionNavigationDestinationCharacter@0$NSTextSelectionNavigationDestinationContainer@5$NSTextSelectionNavigationDestinationDocument@6$NSTextSelectionNavigationDestinationLine@2$NSTextSelectionNavigationDestinationParagraph@4$NSTextSelectionNavigationDestinationSentence@3$NSTextSelectionNavigationDestinationWord@1$NSTextSelectionNavigationDirectionBackward@1$NSTextSelectionNavigationDirectionDown@5$NSTextSelectionNavigationDirectionForward@0$NSTextSelectionNavigationDirectionLeft@3$NSTextSelectionNavigationDirectionRight@2$NSTextSelectionNavigationDirectionUp@4$NSTextSelectionNavigationLayoutOrientationHorizontal@0$NSTextSelectionNavigationLayoutOrientationVertical@1$NSTextSelectionNavigationModifierExtend@1$NSTextSelectionNavigationModifierMultiple@4$NSTextSelectionNavigationModifierVisual@2$NSTextSelectionNavigationWritingDirectionLeftToRight@0$NSTextSelectionNavigationWritingDirectionRightToLeft@1$NSTextStorageEditedAttributes@1$NSTextStorageEditedCharacters@2$NSTextTableAutomaticLayoutAlgorithm@0$NSTextTableFixedLayoutAlgorithm@1$NSTextWriteInapplicableDocumentTypeError@66062$NSTextWritingDirectionEmbedding@0$NSTextWritingDirectionOverride@2$NSTexturedBackgroundWindowMask@256$NSTexturedRoundedBezelStyle@11$NSTexturedSquareBezelStyle@8$NSThickSquareBezelStyle@3$NSThickerSquareBezelStyle@4$NSTickMarkAbove@1$NSTickMarkBelow@0$NSTickMarkLeft@1$NSTickMarkPositionAbove@1$NSTickMarkPositionBelow@0$NSTickMarkPositionLeading@1$NSTickMarkPositionTrailing@0$NSTickMarkRight@0$NSTimeZoneDatePickerElementFlag@16$NSTitlebarSeparatorStyleAutomatic@0$NSTitlebarSeparatorStyleLine@2$NSTitlebarSeparatorStyleNone@1$NSTitlebarSeparatorStyleShadow@3$NSTitledWindowMask@1$NSToggleButton@2$NSTokenStyleDefault@0$NSTokenStyleNone@1$NSTokenStylePlainSquared@4$NSTokenStyleRounded@2$NSTokenStyleSquared@3$NSToolbarDisplayModeDefault@0$NSToolbarDisplayModeIconAndLabel@1$NSToolbarDisplayModeIconOnly@2$NSToolbarDisplayModeLabelOnly@3$NSToolbarItemGroupControlRepresentationAutomatic@0$NSToolbarItemGroupControlRepresentationCollapsed@2$NSToolbarItemGroupControlRepresentationExpanded@1$NSToolbarItemGroupSelectionModeMomentary@2$NSToolbarItemGroupSelectionModeSelectAny@1$NSToolbarItemGroupSelectionModeSelectOne@0$NSToolbarItemVisibilityPriorityHigh@1000$NSToolbarItemVisibilityPriorityLow@-1000$NSToolbarItemVisibilityPriorityStandard@0$NSToolbarItemVisibilityPriorityUser@2000$NSToolbarSizeModeDefault@0$NSToolbarSizeModeRegular@1$NSToolbarSizeModeSmall@2$NSTopTabsBezelBorder@0$NSTornOffMenuWindowLevel@3$NSTouchBarItemPriorityHigh@1000.0$NSTouchBarItemPriorityLow@-1000.0$NSTouchBarItemPriorityNormal@0.0$NSTouchEventSubtype@3$NSTouchPhaseAny@18446744073709551615$NSTouchPhaseBegan@1$NSTouchPhaseCancelled@16$NSTouchPhaseEnded@8$NSTouchPhaseMoved@2$NSTouchPhaseStationary@4$NSTouchPhaseTouching@7$NSTouchTypeDirect@0$NSTouchTypeIndirect@1$NSTouchTypeMaskDirect@1$NSTouchTypeMaskIndirect@2$NSTrackModeMatrix@3$NSTrackingActiveAlways@128$NSTrackingActiveInActiveApp@64$NSTrackingActiveInKeyWindow@32$NSTrackingActiveWhenFirstResponder@16$NSTrackingAssumeInside@256$NSTrackingCursorUpdate@4$NSTrackingEnabledDuringMouseDrag@1024$NSTrackingInVisibleRect@512$NSTrackingMouseEnteredAndExited@1$NSTrackingMouseMoved@2$NSTypesetterBehavior_10_2@2$NSTypesetterBehavior_10_2_WithCompatibility@1$NSTypesetterBehavior_10_3@3$NSTypesetterBehavior_10_4@4$NSTypesetterContainerBreakAction@32$NSTypesetterHorizontalTabAction@4$NSTypesetterLatestBehavior@-1$NSTypesetterLineBreakAction@8$NSTypesetterOriginalBehavior@0$NSTypesetterParagraphBreakAction@16$NSTypesetterWhitespaceAction@2$NSTypesetterZeroAdvancementAction@1$NSUnboldFontMask@4$NSUnderlinePatternDash@512$NSUnderlinePatternDashDot@768$NSUnderlinePatternDashDotDot@1024$NSUnderlinePatternDot@256$NSUnderlinePatternSolid@0$NSUnderlineStyleByWord@32768$NSUnderlineStyleDouble@9$NSUnderlineStyleNone@0$NSUnderlineStylePatternDash@512$NSUnderlineStylePatternDashDot@768$NSUnderlineStylePatternDashDotDot@1024$NSUnderlineStylePatternDot@256$NSUnderlineStylePatternSolid@0$NSUnderlineStyleSingle@1$NSUnderlineStyleThick@2$NSUndoFunctionKey@63299$NSUnifiedTitleAndToolbarWindowMask@4096$NSUnitalicFontMask@16777216$NSUnknownColorSpaceModel@-1$NSUnknownPageOrder@2$NSUnknownPointingDevice@0$NSUnscaledWindowMask@2048$NSUpArrowFunctionKey@63232$NSUpTextMovement@21$NSUpdateWindowsRunLoopOrdering@500000$NSUserFunctionKey@63286$NSUserInterfaceLayoutDirectionLeftToRight@0$NSUserInterfaceLayoutDirectionRightToLeft@1$NSUserInterfaceLayoutOrientationHorizontal@0$NSUserInterfaceLayoutOrientationVertical@1$NSUtilityWindowMask@16$NSVariableStatusItemLength@-1$NSVerticalRuler@1$NSViaPanelFontAction@1$NSViewControllerTransitionAllowUserInteraction@4096$NSViewControllerTransitionCrossfade@1$NSViewControllerTransitionNone@0$NSViewControllerTransitionSlideBackward@384$NSViewControllerTransitionSlideDown@32$NSViewControllerTransitionSlideForward@320$NSViewControllerTransitionSlideLeft@64$NSViewControllerTransitionSlideRight@128$NSViewControllerTransitionSlideUp@16$NSViewHeightSizable@16$NSViewLayerContentsPlacementBottom@8$NSViewLayerContentsPlacementBottomLeft@9$NSViewLayerContentsPlacementBottomRight@7$NSViewLayerContentsPlacementCenter@3$NSViewLayerContentsPlacementLeft@10$NSViewLayerContentsPlacementRight@6$NSViewLayerContentsPlacementScaleAxesIndependently@0$NSViewLayerContentsPlacementScaleProportionallyToFill@2$NSViewLayerContentsPlacementScaleProportionallyToFit@1$NSViewLayerContentsPlacementTop@4$NSViewLayerContentsPlacementTopLeft@11$NSViewLayerContentsPlacementTopRight@5$NSViewLayerContentsRedrawBeforeViewResize@3$NSViewLayerContentsRedrawCrossfade@4$NSViewLayerContentsRedrawDuringViewResize@2$NSViewLayerContentsRedrawNever@0$NSViewLayerContentsRedrawOnSetNeedsDisplay@1$NSViewMaxXMargin@4$NSViewMaxYMargin@32$NSViewMinXMargin@1$NSViewMinYMargin@8$NSViewNotSizable@0$NSViewWidthSizable@2$NSVisualEffectBlendingModeBehindWindow@0$NSVisualEffectBlendingModeWithinWindow@1$NSVisualEffectMaterialAppearanceBased@0$NSVisualEffectMaterialContentBackground@18$NSVisualEffectMaterialDark@2$NSVisualEffectMaterialFullScreenUI@15$NSVisualEffectMaterialHUDWindow@13$NSVisualEffectMaterialHeaderView@10$NSVisualEffectMaterialLight@1$NSVisualEffectMaterialMediumLight@8$NSVisualEffectMaterialMenu@5$NSVisualEffectMaterialPopover@6$NSVisualEffectMaterialSelection@4$NSVisualEffectMaterialSheet@11$NSVisualEffectMaterialSidebar@7$NSVisualEffectMaterialTitlebar@3$NSVisualEffectMaterialToolTip@17$NSVisualEffectMaterialUltraDark@9$NSVisualEffectMaterialUnderPageBackground@22$NSVisualEffectMaterialUnderWindowBackground@21$NSVisualEffectMaterialWindowBackground@12$NSVisualEffectStateActive@1$NSVisualEffectStateFollowsWindowActiveState@0$NSVisualEffectStateInactive@2$NSWantsBidiLevels@4$NSWarningAlertStyle@0$NSWheelModeColorPanel@6$NSWindingRuleEvenOdd@1$NSWindingRuleNonZero@0$NSWindowAbove@1$NSWindowAnimationBehaviorAlertPanel@5$NSWindowAnimationBehaviorDefault@0$NSWindowAnimationBehaviorDocumentWindow@3$NSWindowAnimationBehaviorNone@2$NSWindowAnimationBehaviorUtilityWindow@4$NSWindowBackingLocationDefault@0$NSWindowBackingLocationMainMemory@2$NSWindowBackingLocationVideoMemory@1$NSWindowBelow@-1$NSWindowCloseButton@0$NSWindowCollectionBehaviorAuxiliary@131072$NSWindowCollectionBehaviorCanJoinAllApplications@262144$NSWindowCollectionBehaviorCanJoinAllSpaces@1$NSWindowCollectionBehaviorDefault@0$NSWindowCollectionBehaviorFullScreenAllowsTiling@2048$NSWindowCollectionBehaviorFullScreenAuxiliary@256$NSWindowCollectionBehaviorFullScreenDisallowsTiling@4096$NSWindowCollectionBehaviorFullScreenNone@512$NSWindowCollectionBehaviorFullScreenPrimary@128$NSWindowCollectionBehaviorIgnoresCycle@64$NSWindowCollectionBehaviorManaged@4$NSWindowCollectionBehaviorMoveToActiveSpace@2$NSWindowCollectionBehaviorParticipatesInCycle@32$NSWindowCollectionBehaviorPrimary@65536$NSWindowCollectionBehaviorStationary@16$NSWindowCollectionBehaviorTransient@8$NSWindowDepthOnehundredtwentyeightBitRGB@544$NSWindowDepthSixtyfourBitRGB@528$NSWindowDepthTwentyfourBitRGB@520$NSWindowDocumentIconButton@4$NSWindowDocumentVersionsButton@6$NSWindowExposedEventType@0$NSWindowFullScreenButton@7$NSWindowListOrderedFrontToBack@1$NSWindowMiniaturizeButton@1$NSWindowMovedEventType@4$NSWindowNumberListAllApplications@1$NSWindowNumberListAllSpaces@16$NSWindowOcclusionStateVisible@2$NSWindowOut@0$NSWindowSharingErrorMaximum@67466$NSWindowSharingErrorMinimum@67456$NSWindowSharingNone@0$NSWindowSharingReadOnly@1$NSWindowSharingReadWrite@2$NSWindowSharingRequestAlreadyRequested@67456$NSWindowSharingRequestNoEligibleSession@67457$NSWindowSharingRequestUnspecifiedError@67458$NSWindowStyleMaskBorderless@0$NSWindowStyleMaskClosable@2$NSWindowStyleMaskDocModalWindow@64$NSWindowStyleMaskFullScreen@16384$NSWindowStyleMaskFullSizeContentView@32768$NSWindowStyleMaskHUDWindow@8192$NSWindowStyleMaskMiniaturizable@4$NSWindowStyleMaskNonactivatingPanel@128$NSWindowStyleMaskResizable@8$NSWindowStyleMaskTexturedBackground@256$NSWindowStyleMaskTitled@1$NSWindowStyleMaskUnifiedTitleAndToolbar@4096$NSWindowStyleMaskUtilityWindow@16$NSWindowTabbingModeAutomatic@0$NSWindowTabbingModeDisallowed@2$NSWindowTabbingModePreferred@1$NSWindowTitleHidden@1$NSWindowTitleVisible@0$NSWindowToolbarButton@3$NSWindowToolbarStyleAutomatic@0$NSWindowToolbarStyleExpanded@1$NSWindowToolbarStylePreference@2$NSWindowToolbarStyleUnified@3$NSWindowToolbarStyleUnifiedCompact@4$NSWindowUserTabbingPreferenceAlways@1$NSWindowUserTabbingPreferenceInFullScreen@2$NSWindowUserTabbingPreferenceManual@0$NSWindowZoomButton@2$NSWindows95InterfaceStyle@2$NSWorkspaceAuthorizationInvalidError@67328$NSWorkspaceAuthorizationTypeCreateSymbolicLink@0$NSWorkspaceAuthorizationTypeReplaceFile@2$NSWorkspaceAuthorizationTypeSetAttributes@1$NSWorkspaceErrorMaximum@67455$NSWorkspaceErrorMinimum@67328$NSWorkspaceLaunchAllowingClassicStartup@131072$NSWorkspaceLaunchAndHide@1048576$NSWorkspaceLaunchAndHideOthers@2097152$NSWorkspaceLaunchAndPrint@2$NSWorkspaceLaunchAsync@65536$NSWorkspaceLaunchDefault@65536$NSWorkspaceLaunchInhibitingBackgroundOnly@128$NSWorkspaceLaunchNewInstance@524288$NSWorkspaceLaunchPreferringClassic@262144$NSWorkspaceLaunchWithErrorPresentation@64$NSWorkspaceLaunchWithoutActivation@512$NSWorkspaceLaunchWithoutAddingToRecents@256$NSWritingDirectionEmbedding@0$NSWritingDirectionLeftToRight@0$NSWritingDirectionNatural@-1$NSWritingDirectionOverride@2$NSWritingDirectionRightToLeft@1$NSYearMonthDatePickerElementFlag@192$NSYearMonthDayDatePickerElementFlag@224$NS_USER_ACTIVITY_SUPPORTED@1$"""
misc.update(
    {
        "NSImageResizingModeStretch": selAorI(1, 0),
        "NSTextAlignmentRight": selAorI(2, 1),
        "NSTextAlignmentCenter": selAorI(1, 2),
        "NSAttachmentCharacter": "\ufffc",
        "NSImageResizingModeTile": selAorI(0, 1),
    }
)
misc.update(
    {
        "NSLineBreakStrategy": NewType("NSLineBreakStrategy", int),
        "NSTokenStyle": NewType("NSTokenStyle", int),
        "NSTableViewDraggingDestinationFeedbackStyle": NewType(
            "NSTableViewDraggingDestinationFeedbackStyle", int
        ),
        "NSWindowAnimationBehavior": NewType("NSWindowAnimationBehavior", int),
        "NSWritingDirection": NewType("NSWritingDirection", int),
        "NSPopoverAppearance": NewType("NSPopoverAppearance", int),
        "NSWindowTitleVisibility": NewType("NSWindowTitleVisibility", int),
        "NSGradientType": NewType("NSGradientType", int),
        "NSMenuSelectionMode": NewType("NSMenuSelectionMode", int),
        "NSBackingStoreType": NewType("NSBackingStoreType", int),
        "NSCellAttribute": NewType("NSCellAttribute", int),
        "NSTextFinderMatchingType": NewType("NSTextFinderMatchingType", int),
        "NSViewControllerTransitionOptions": NewType(
            "NSViewControllerTransitionOptions", int
        ),
        "NSLayoutRelation": NewType("NSLayoutRelation", int),
        "NSImageFrameStyle": NewType("NSImageFrameStyle", int),
        "NSFontAction": NewType("NSFontAction", int),
        "NSScrollerKnobStyle": NewType("NSScrollerKnobStyle", int),
        "NSGridRowAlignment": NewType("NSGridRowAlignment", int),
        "NSLevelIndicatorStyle": NewType("NSLevelIndicatorStyle", int),
        "NSToolbarDisplayMode": NewType("NSToolbarDisplayMode", int),
        "NSFocusRingType": NewType("NSFocusRingType", int),
        "NSSpeechBoundary": NewType("NSSpeechBoundary", int),
        "NSFontRenderingMode": NewType("NSFontRenderingMode", int),
        "NSVisualEffectState": NewType("NSVisualEffectState", int),
        "NSTableColumnResizingOptions": NewType("NSTableColumnResizingOptions", int),
        "NSSpellingState": NewType("NSSpellingState", int),
        "NSAccessibilityUnits": NewType("NSAccessibilityUnits", int),
        "NSTextLayoutFragmentEnumerationOptions": NewType(
            "NSTextLayoutFragmentEnumerationOptions", int
        ),
        "NSEventSwipeTrackingOptions": NewType("NSEventSwipeTrackingOptions", int),
        "NSFontPanelModeMask": NewType("NSFontPanelModeMask", int),
        "NSCollectionViewScrollDirection": NewType(
            "NSCollectionViewScrollDirection", int
        ),
        "NSLineMovementDirection": NewType("NSLineMovementDirection", int),
        "NSDisplayGamut": NewType("NSDisplayGamut", int),
        "NSFindPanelAction": NewType("NSFindPanelAction", int),
        "NSComboButtonStyle": NewType("NSComboButtonStyle", int),
        "NSPageControllerTransitionStyle": NewType(
            "NSPageControllerTransitionStyle", int
        ),
        "NSTextSelectionNavigationDestination": NewType(
            "NSTextSelectionNavigationDestination", int
        ),
        "NSPointingDeviceType": NewType("NSPointingDeviceType", int),
        "NSScrubberMode": NewType("NSScrubberMode", int),
        "NSCellType": NewType("NSCellType", int),
        "NSTableViewRowActionStyle": NewType("NSTableViewRowActionStyle", int),
        "NSEventGestureAxis": NewType("NSEventGestureAxis", int),
        "NSTableViewGridLineStyle": NewType("NSTableViewGridLineStyle", int),
        "NSTabViewBorderType": NewType("NSTabViewBorderType", int),
        "NSTextBlockVerticalAlignment": NewType("NSTextBlockVerticalAlignment", int),
        "NSTabPosition": NewType("NSTabPosition", int),
        "NSImageLoadStatus": NewType("NSImageLoadStatus", int),
        "NSTouchTypeMask": NewType("NSTouchTypeMask", int),
        "NSWindowToolbarStyle": NewType("NSWindowToolbarStyle", int),
        "NSEventButtonMask": NewType("NSEventButtonMask", int),
        "NSGestureRecognizerState": NewType("NSGestureRecognizerState", int),
        "NSAlertStyle": NewType("NSAlertStyle", int),
        "NSLevelIndicatorPlaceholderVisibility": NewType(
            "NSLevelIndicatorPlaceholderVisibility", int
        ),
        "NSCellStyleMask": NewType("NSCellStyleMask", int),
        "NSPathStyle": NewType("NSPathStyle", int),
        "NSLineBreakMode": NewType("NSLineBreakMode", int),
        "NSUsableScrollerParts": NewType("NSUsableScrollerParts", int),
        "NSDraggingItemEnumerationOptions": NewType(
            "NSDraggingItemEnumerationOptions", int
        ),
        "NSPageLayoutResult": NewType("NSPageLayoutResult", int),
        "NSSplitViewItemCollapseBehavior": NewType(
            "NSSplitViewItemCollapseBehavior", int
        ),
        "NSTitlebarSeparatorStyle": NewType("NSTitlebarSeparatorStyle", int),
        "NSFontAssetRequestOptions": NewType("NSFontAssetRequestOptions", int),
        "NSCollectionViewItemHighlightState": NewType(
            "NSCollectionViewItemHighlightState", int
        ),
        "NSBitmapFormat": NewType("NSBitmapFormat", int),
        "NSRuleEditorNestingMode": NewType("NSRuleEditorNestingMode", int),
        "NSTextBlockLayer": NewType("NSTextBlockLayer", int),
        "NSBoxType": NewType("NSBoxType", int),
        "NSAnimationCurve": NewType("NSAnimationCurve", int),
        "NSPickerTouchBarItemControlRepresentation": NewType(
            "NSPickerTouchBarItemControlRepresentation", int
        ),
        "NSWindowNumberListOptions": NewType("NSWindowNumberListOptions", int),
        "NSDraggingContext": NewType("NSDraggingContext", int),
        "NSMatrixMode": NewType("NSMatrixMode", int),
        "NSSelectionDirection": NewType("NSSelectionDirection", int),
        "NSColorRenderingIntent": NewType("NSColorRenderingIntent", int),
        "NSImageLayoutDirection": NewType("NSImageLayoutDirection", int),
        "NSApplicationOcclusionState": NewType("NSApplicationOcclusionState", int),
        "NSWindowCollectionBehavior": NewType("NSWindowCollectionBehavior", int),
        "NSControlCharacterAction": NewType("NSControlCharacterAction", int),
        "NSSplitViewDividerStyle": NewType("NSSplitViewDividerStyle", int),
        "NSTableViewStyle": NewType("NSTableViewStyle", int),
        "NSTextLayoutManagerSegmentType": NewType(
            "NSTextLayoutManagerSegmentType", int
        ),
        "NSTextLayoutOrientation": NewType("NSTextLayoutOrientation", int),
        "NSTextTabType": NewType("NSTextTabType", int),
        "NSTableViewRowSizeStyle": NewType("NSTableViewRowSizeStyle", int),
        "NSBrowserColumnResizingType": NewType("NSBrowserColumnResizingType", int),
        "NSDatePickerStyle": NewType("NSDatePickerStyle", int),
        "NSFontTraitMask": NewType("NSFontTraitMask", int),
        "NSSelectionAffinity": NewType("NSSelectionAffinity", int),
        "NSWindowStyleMask": NewType("NSWindowStyleMask", int),
        "NSSegmentSwitchTracking": NewType("NSSegmentSwitchTracking", int),
        "NSOpenGLContextParameter": NewType("NSOpenGLContextParameter", int),
        "NSTextContentManagerEnumerationOptions": NewType(
            "NSTextContentManagerEnumerationOptions", int
        ),
        "NSRuleEditorRowType": NewType("NSRuleEditorRowType", int),
        "NSColorSystemEffect": NewType("NSColorSystemEffect", int),
        "NSAnimationBlockingMode": NewType("NSAnimationBlockingMode", int),
        "NSTextTableLayoutAlgorithm": NewType("NSTextTableLayoutAlgorithm", int),
        "NSEventSubtype": NewType("NSEventSubtype", int),
        "NSSharingContentScope": NewType("NSSharingContentScope", int),
        "NSTextAlignment": NewType("NSTextAlignment", int),
        "NSTextSelectionNavigationModifier": NewType(
            "NSTextSelectionNavigationModifier", int
        ),
        "NSPaperOrientation": NewType("NSPaperOrientation", int),
        "NSPDFPanelOptions": NewType("NSPDFPanelOptions", int),
        "NSApplicationTerminateReply": NewType("NSApplicationTerminateReply", int),
        "NSWindowOcclusionState": NewType("NSWindowOcclusionState", int),
        "NSCollectionElementCategory": NewType("NSCollectionElementCategory", int),
        "NSColorPanelOptions": NewType("NSColorPanelOptions", int),
        "NSApplicationDelegateReply": NewType("NSApplicationDelegateReply", int),
        "NSScrubberAlignment": NewType("NSScrubberAlignment", int),
        "NSCellHitResult": NewType("NSCellHitResult", int),
        "NSAccessibilitySortDirection": NewType("NSAccessibilitySortDirection", int),
        "NSPasteboardReadingOptions": NewType("NSPasteboardReadingOptions", int),
        "NSSegmentDistribution": NewType("NSSegmentDistribution", int),
        "NSImageScaling": NewType("NSImageScaling", int),
        "NSStringDrawingOptions": NewType("NSStringDrawingOptions", int),
        "NSBrowserDropOperation": NewType("NSBrowserDropOperation", int),
        "NSDrawerState": NewType("NSDrawerState", int),
        "NSDragOperation": NewType("NSDragOperation", int),
        "NSViewLayerContentsPlacement": NewType("NSViewLayerContentsPlacement", int),
        "NSApplicationPrintReply": NewType("NSApplicationPrintReply", int),
        "NSTextFieldBezelStyle": NewType("NSTextFieldBezelStyle", int),
        "NSCharacterCollection": NewType("NSCharacterCollection", int),
        "NSEventMask": NewType("NSEventMask", int),
        "NSToolbarItemGroupSelectionMode": NewType(
            "NSToolbarItemGroupSelectionMode", int
        ),
        "NSImageSymbolScale": NewType("NSImageSymbolScale", int),
        "NSScrollerPart": NewType("NSScrollerPart", int),
        "NSWindowUserTabbingPreference": NewType("NSWindowUserTabbingPreference", int),
        "NSMediaLibrary": NewType("NSMediaLibrary", int),
        "NSLayoutFormatOptions": NewType("NSLayoutFormatOptions", int),
        "NSBorderType": NewType("NSBorderType", int),
        "NSWindingRule": NewType("NSWindingRule", int),
        "NSControlTint": NewType("NSControlTint", int),
        "NSTouchPhase": NewType("NSTouchPhase", int),
        "NSTextLayoutManagerSegmentOptions": NewType(
            "NSTextLayoutManagerSegmentOptions", int
        ),
        "NSWindowListOptions": NewType("NSWindowListOptions", int),
        "NSWindowDepth": NewType("NSWindowDepth", int),
        "NSUnderlineStyle": NewType("NSUnderlineStyle", int),
        "NSTextCursorAccessoryPlacement": NewType(
            "NSTextCursorAccessoryPlacement", int
        ),
        "NSFontDescriptorSymbolicTraits": NewType(
            "NSFontDescriptorSymbolicTraits", int
        ),
        "NSFindPanelSubstringMatchType": NewType("NSFindPanelSubstringMatchType", int),
        "NSAccessibilityAnnotationPosition": NewType(
            "NSAccessibilityAnnotationPosition", int
        ),
        "NSTextLayoutFragmentState": NewType("NSTextLayoutFragmentState", int),
        "NSMenuItemBadgeType": NewType("NSMenuItemBadgeType", int),
        "NSEventPhase": NewType("NSEventPhase", int),
        "NSPrintPanelResult": NewType("NSPrintPanelResult", int),
        "NSDocumentChangeType": NewType("NSDocumentChangeType", int),
        "NSWindowButton": NewType("NSWindowButton", int),
        "NSDatePickerElementFlags": NewType("NSDatePickerElementFlags", int),
        "NSRequestUserAttentionType": NewType("NSRequestUserAttentionType", int),
        "NSDatePickerMode": NewType("NSDatePickerMode", int),
        "NSImageResizingMode": NewType("NSImageResizingMode", int),
        "NSStackViewGravity": NewType("NSStackViewGravity", int),
        "NSBackgroundStyle": NewType("NSBackgroundStyle", int),
        "NSTextBlockValueType": NewType("NSTextBlockValueType", int),
        "NSTrackingAreaOptions": NewType("NSTrackingAreaOptions", int),
        "NSPopUpArrowPosition": NewType("NSPopUpArrowPosition", int),
        "NSTextSelectionNavigationDirection": NewType(
            "NSTextSelectionNavigationDirection", int
        ),
        "NSPrintRenderingQuality": NewType("NSPrintRenderingQuality", int),
        "NSApplicationActivationOptions": NewType(
            "NSApplicationActivationOptions", int
        ),
        "NSCollectionViewDropOperation": NewType("NSCollectionViewDropOperation", int),
        "NSCellImagePosition": NewType("NSCellImagePosition", int),
        "NSPrintPanelOptions": NewType("NSPrintPanelOptions", int),
        "NSLayoutAttribute": NewType("NSLayoutAttribute", int),
        "NSTypesetterBehavior": NewType("NSTypesetterBehavior", int),
        "NSTickMarkPosition": NewType("NSTickMarkPosition", int),
        "NSWindowBackingLocation": NewType("NSWindowBackingLocation", int),
        "NSTableViewDropOperation": NewType("NSTableViewDropOperation", int),
        "NSProgressIndicatorThickness": NewType("NSProgressIndicatorThickness", int),
        "NSMenuPresentationStyle": NewType("NSMenuPresentationStyle", int),
        "NSApplicationPresentationOptions": NewType(
            "NSApplicationPresentationOptions", int
        ),
        "NSMenuProperties": NewType("NSMenuProperties", int),
        "NSTextSelectionGranularity": NewType("NSTextSelectionGranularity", int),
        "NSPrintingPaginationMode": NewType("NSPrintingPaginationMode", int),
        "NSTextInsertionIndicatorAutomaticModeOptions": NewType(
            "NSTextInsertionIndicatorAutomaticModeOptions", int
        ),
        "NSTextInputTraitType": NewType("NSTextInputTraitType", int),
        "NSAnimationEffect": NewType("NSAnimationEffect", int),
        "NSVisualEffectMaterial": NewType("NSVisualEffectMaterial", int),
        "NSCollectionLayoutSectionOrthogonalScrollingBehavior": NewType(
            "NSCollectionLayoutSectionOrthogonalScrollingBehavior", int
        ),
        "NSTabState": NewType("NSTabState", int),
        "NSDraggingFormation": NewType("NSDraggingFormation", int),
        "NSLayoutConstraintOrientation": NewType("NSLayoutConstraintOrientation", int),
        "NSSpringLoadingOptions": NewType("NSSpringLoadingOptions", int),
        "NSGradientDrawingOptions": NewType("NSGradientDrawingOptions", int),
        "NSSliderType": NewType("NSSliderType", int),
        "NSAccessibilityCustomRotorType": NewType(
            "NSAccessibilityCustomRotorType", int
        ),
        "NSTextMovement": NewType("NSTextMovement", int),
        "NSAutoresizingMaskOptions": NewType("NSAutoresizingMaskOptions", int),
        "NSTabViewControllerTabStyle": NewType("NSTabViewControllerTabStyle", int),
        "NSToolbarItemGroupControlRepresentation": NewType(
            "NSToolbarItemGroupControlRepresentation", int
        ),
        "NSPickerTouchBarItemSelectionMode": NewType(
            "NSPickerTouchBarItemSelectionMode", int
        ),
        "NSScrollViewFindBarPosition": NewType("NSScrollViewFindBarPosition", int),
        "NSRemoteNotificationType": NewType("NSRemoteNotificationType", int),
        "NSTextBlockDimension": NewType("NSTextBlockDimension", int),
        "NSEventType": NewType("NSEventType", int),
        "NSSaveOperationType": NewType("NSSaveOperationType", int),
        "NSPopoverBehavior": NewType("NSPopoverBehavior", int),
        "NSFontCollectionVisibility": NewType("NSFontCollectionVisibility", int),
        "NSPrintingPageOrder": NewType("NSPrintingPageOrder", int),
        "NSTIFFCompression": NewType("NSTIFFCompression", int),
        "NSTouchType": NewType("NSTouchType", int),
        "NSViewLayerContentsRedrawPolicy": NewType(
            "NSViewLayerContentsRedrawPolicy", int
        ),
        "NSBitmapImageFileType": NewType("NSBitmapImageFileType", int),
        "NSMultibyteGlyphPacking": NewType("NSMultibyteGlyphPacking", int),
        "NSSpringLoadingHighlight": NewType("NSSpringLoadingHighlight", int),
        "NSScrollElasticity": NewType("NSScrollElasticity", int),
        "NSCompositingOperation": NewType("NSCompositingOperation", int),
        "NSColorWellStyle": NewType("NSColorWellStyle", int),
        "NSTableViewColumnAutoresizingStyle": NewType(
            "NSTableViewColumnAutoresizingStyle", int
        ),
        "NSTabViewType": NewType("NSTabViewType", int),
        "NSScrollerStyle": NewType("NSScrollerStyle", int),
        "NSLineCapStyle": NewType("NSLineCapStyle", int),
        "NSAccessibilityPriorityLevel": NewType("NSAccessibilityPriorityLevel", int),
        "NSStatusItemBehavior": NewType("NSStatusItemBehavior", int),
        "NSImageRepLoadStatus": NewType("NSImageRepLoadStatus", int),
        "NSColorSpaceModel": NewType("NSColorSpaceModel", int),
        "NSPasteboardWritingOptions": NewType("NSPasteboardWritingOptions", int),
        "NSTitlePosition": NewType("NSTitlePosition", int),
        "NSAccessibilityOrientation": NewType("NSAccessibilityOrientation", int),
        "NSTextScalingType": NewType("NSTextScalingType", int),
        "NSGlyphInscription": NewType("NSGlyphInscription", int),
        "NSTypesetterControlCharacterAction": NewType(
            "NSTypesetterControlCharacterAction", int
        ),
        "NSTextInsertionIndicatorDisplayMode": NewType(
            "NSTextInsertionIndicatorDisplayMode", int
        ),
        "NSWindowOrderingMode": NewType("NSWindowOrderingMode", int),
        "NSPasteboardContentsOptions": NewType("NSPasteboardContentsOptions", int),
        "NSImageAlignment": NewType("NSImageAlignment", int),
        "NSRulerOrientation": NewType("NSRulerOrientation", int),
        "NSFocusRingPlacement": NewType("NSFocusRingPlacement", int),
        "NSTableViewSelectionHighlightStyle": NewType(
            "NSTableViewSelectionHighlightStyle", int
        ),
        "NSSegmentStyle": NewType("NSSegmentStyle", int),
        "NSUserInterfaceLayoutOrientation": NewType(
            "NSUserInterfaceLayoutOrientation", int
        ),
        "NSGlyphProperty": NewType("NSGlyphProperty", int),
        "NSWritingDirectionFormatType": NewType("NSWritingDirectionFormatType", int),
        "NSAccessibilityRulerMarkerType": NewType(
            "NSAccessibilityRulerMarkerType", int
        ),
        "NSTextStorageEditActions": NewType("NSTextStorageEditActions", int),
        "NSColorPanelMode": NewType("NSColorPanelMode", int),
        "NSControlSize": NewType("NSControlSize", int),
        "NSPressureBehavior": NewType("NSPressureBehavior", int),
        "NSTextSelectionNavigationWritingDirection": NewType(
            "NSTextSelectionNavigationWritingDirection", int
        ),
        "NSTextFinderAction": NewType("NSTextFinderAction", int),
        "NSCollectionViewScrollPosition": NewType(
            "NSCollectionViewScrollPosition", int
        ),
        "NSWorkspaceAuthorizationType": NewType("NSWorkspaceAuthorizationType", int),
        "NSCollectionUpdateAction": NewType("NSCollectionUpdateAction", int),
        "NSWindowSharingType": NewType("NSWindowSharingType", int),
        "NSCloudKitSharingServiceOptions": NewType(
            "NSCloudKitSharingServiceOptions", int
        ),
        "NSPrinterTableStatus": NewType("NSPrinterTableStatus", int),
        "NSScrollerArrow": NewType("NSScrollerArrow", int),
        "NSHapticFeedbackPattern": NewType("NSHapticFeedbackPattern", int),
        "NSTextListOptions": NewType("NSTextListOptions", int),
        "NSStackViewDistribution": NewType("NSStackViewDistribution", int),
        "NSWindowTabbingMode": NewType("NSWindowTabbingMode", int),
        "NSColorType": NewType("NSColorType", int),
        "NSAccessibilityCustomRotorSearchDirection": NewType(
            "NSAccessibilityCustomRotorSearchDirection", int
        ),
        "NSUserInterfaceLayoutDirection": NewType(
            "NSUserInterfaceLayoutDirection", int
        ),
        "NSVisualEffectBlendingMode": NewType("NSVisualEffectBlendingMode", int),
        "NSLineSweepDirection": NewType("NSLineSweepDirection", int),
        "NSRectAlignment": NewType("NSRectAlignment", int),
        "NSLineJoinStyle": NewType("NSLineJoinStyle", int),
        "NSEventModifierFlags": NewType("NSEventModifierFlags", int),
        "NSProgressIndicatorStyle": NewType("NSProgressIndicatorStyle", int),
        "NSWorkspaceIconCreationOptions": NewType(
            "NSWorkspaceIconCreationOptions", int
        ),
        "NSImageInterpolation": NewType("NSImageInterpolation", int),
        "NSDirectionalRectEdge": NewType("NSDirectionalRectEdge", int),
        "NSTextSelectionNavigationLayoutOrientation": NewType(
            "NSTextSelectionNavigationLayoutOrientation", int
        ),
        "NSImageCacheMode": NewType("NSImageCacheMode", int),
        "NSTableRowActionEdge": NewType("NSTableRowActionEdge", int),
        "NSHapticFeedbackPerformanceTime": NewType(
            "NSHapticFeedbackPerformanceTime", int
        ),
        "NSSplitViewItemBehavior": NewType("NSSplitViewItemBehavior", int),
        "NSTextSelectionAffinity": NewType("NSTextSelectionAffinity", int),
        "NSFontCollectionOptions": NewType("NSFontCollectionOptions", int),
        "NSButtonType": NewType("NSButtonType", int),
        "NSScrollArrowPosition": NewType("NSScrollArrowPosition", int),
        "NSSelectionGranularity": NewType("NSSelectionGranularity", int),
        "NSPrintingOrientation": NewType("NSPrintingOrientation", int),
        "NSBezelStyle": NewType("NSBezelStyle", int),
        "NSCorrectionResponse": NewType("NSCorrectionResponse", int),
        "NSWorkspaceLaunchOptions": NewType("NSWorkspaceLaunchOptions", int),
        "NSOpenGLGlobalOption": NewType("NSOpenGLGlobalOption", int),
        "NSCorrectionIndicatorType": NewType("NSCorrectionIndicatorType", int),
        "NSBezierPathElement": NewType("NSBezierPathElement", int),
        "NSImageDynamicRange": NewType("NSImageDynamicRange", int),
        "NSApplicationActivationPolicy": NewType("NSApplicationActivationPolicy", int),
        "NSTableViewAnimationOptions": NewType("NSTableViewAnimationOptions", int),
        "NSGridCellPlacement": NewType("NSGridCellPlacement", int),
        "NSToolbarSizeMode": NewType("NSToolbarSizeMode", int),
    }
)
misc.update(
    {
        "NSAccessibilitySortDirectionValue": NewType(
            "NSAccessibilitySortDirectionValue", str
        ),
        "NSSpeechPropertyKey": NewType("NSSpeechPropertyKey", str),
        "NSToolbarItemVisibilityPriority": NewType(
            "NSToolbarItemVisibilityPriority", int
        ),
        "NSDefinitionOptionKey": NewType("NSDefinitionOptionKey", str),
        "NSFontCollectionName": NewType("NSFontCollectionName", str),
        "NSAccessibilityAttributeName": NewType("NSAccessibilityAttributeName", str),
        "NSDraggingImageComponentKey": NewType("NSDraggingImageComponentKey", str),
        "NSAppearanceName": NewType("NSAppearanceName", str),
        "NSWorkspaceFileOperationName": NewType("NSWorkspaceFileOperationName", str),
        "NSFontDescriptorVariationKey": NewType("NSFontDescriptorVariationKey", str),
        "NSPasteboardName": NewType("NSPasteboardName", str),
        "NSStackViewVisibilityPriority": NewType(
            "NSStackViewVisibilityPriority", float
        ),
        "NSFontDescriptorTraitKey": NewType("NSFontDescriptorTraitKey", str),
        "NSBindingInfoKey": NewType("NSBindingInfoKey", str),
        "NSTextLayoutSectionKey": NewType("NSTextLayoutSectionKey", str),
        "NSPrintPanelJobStyleHint": NewType("NSPrintPanelJobStyleHint", str),
        "NSAboutPanelOptionKey": NewType("NSAboutPanelOptionKey", str),
        "NSAccessibilityParameterizedAttributeName": NewType(
            "NSAccessibilityParameterizedAttributeName", str
        ),
        "NSWorkspaceLaunchConfigurationKey": NewType(
            "NSWorkspaceLaunchConfigurationKey", str
        ),
        "NSFontCollectionActionTypeKey": NewType("NSFontCollectionActionTypeKey", str),
        "NSPasteboardTypeTextFinderOptionKey": NewType(
            "NSPasteboardTypeTextFinderOptionKey", str
        ),
        "NSTouchBarItemIdentifier": NewType("NSTouchBarItemIdentifier", str),
        "NSAccessibilityRole": NewType("NSAccessibilityRole", str),
        "NSTextListMarkerFormat": NewType("NSTextListMarkerFormat", str),
        "NSAttributedStringDocumentAttributeKey": NewType(
            "NSAttributedStringDocumentAttributeKey", str
        ),
        "NSFontCollectionMatchingOptionKey": NewType(
            "NSFontCollectionMatchingOptionKey", str
        ),
        "NSRulerViewUnitName": NewType("NSRulerViewUnitName", str),
        "NSGraphicsContextRepresentationFormatName": NewType(
            "NSGraphicsContextRepresentationFormatName", str
        ),
        "NSPopoverCloseReasonValue": NewType("NSPopoverCloseReasonValue", str),
        "NSPasteboardTypeFindPanelSearchOptionKey": NewType(
            "NSPasteboardTypeFindPanelSearchOptionKey", str
        ),
        "NSSpeechMode": NewType("NSSpeechMode", str),
        "NSViewAnimationEffectName": NewType("NSViewAnimationEffectName", str),
        "NSAttributedStringDocumentReadingOptionKey": NewType(
            "NSAttributedStringDocumentReadingOptionKey", str
        ),
        "NSModalResponse": NewType("NSModalResponse", int),
        "NSAccessibilityRulerUnitValue": NewType("NSAccessibilityRulerUnitValue", str),
        "NSToolbarUserInfoKey": NewType("NSToolbarUserInfoKey", str),
        "NSTextContentType": NewType("NSTextContentType", str),
        "NSFontDescriptorSystemDesign": NewType("NSFontDescriptorSystemDesign", str),
        "NSSpeechCommandDelimiterKey": NewType("NSSpeechCommandDelimiterKey", str),
        "NSBindingOption": NewType("NSBindingOption", str),
        "NSTextTabOptionKey": NewType("NSTextTabOptionKey", str),
        "NSAccessibilityAnnotationAttributeKey": NewType(
            "NSAccessibilityAnnotationAttributeKey", str
        ),
        "NSFontDescriptorFeatureKey": NewType("NSFontDescriptorFeatureKey", str),
        "NSPrinterTypeName": NewType("NSPrinterTypeName", str),
        "NSImageHintKey": NewType("NSImageHintKey", str),
        "NSWindowLevel": NewType("NSWindowLevel", int),
        "NSSpeechDictionaryKey": NewType("NSSpeechDictionaryKey", str),
        "NSUserInterfaceItemIdentifier": NewType("NSUserInterfaceItemIdentifier", str),
        "NSAccessibilitySubrole": NewType("NSAccessibilitySubrole", str),
        "NSAccessibilityFontAttributeKey": NewType(
            "NSAccessibilityFontAttributeKey", str
        ),
        "NSSliderAccessoryWidth": NewType("NSSliderAccessoryWidth", float),
        "NSWorkspaceDesktopImageOptionKey": NewType(
            "NSWorkspaceDesktopImageOptionKey", str
        ),
        "NSLayoutPriority": NewType("NSLayoutPriority", float),
        "NSSpeechSynthesizerVoiceName": NewType("NSSpeechSynthesizerVoiceName", str),
        "NSTextEffectStyle": NewType("NSTextEffectStyle", str),
        "NSDefinitionPresentationType": NewType("NSDefinitionPresentationType", str),
        "NSAttributedStringFormattingContextKey": NewType(
            "NSAttributedStringFormattingContextKey", str
        ),
        "NSAccessibilityActionName": NewType("NSAccessibilityActionName", str),
        "NSToolbarItemIdentifier": NewType("NSToolbarItemIdentifier", str),
        "NSFontTextStyleOptionKey": NewType("NSFontTextStyleOptionKey", str),
        "NSTextCheckingOptionKey": NewType("NSTextCheckingOptionKey", str),
        "NSFontTextStyle": NewType("NSFontTextStyle", str),
        "NSAccessibilityRulerMarkerTypeValue": NewType(
            "NSAccessibilityRulerMarkerTypeValue", str
        ),
        "NSFontCollectionUserInfoKey": NewType("NSFontCollectionUserInfoKey", str),
        "NSViewFullScreenModeOptionKey": NewType("NSViewFullScreenModeOptionKey", str),
        "NSFontDescriptorAttributeName": NewType("NSFontDescriptorAttributeName", str),
        "NSPrintInfoAttributeKey": NewType("NSPrintInfoAttributeKey", str),
        "NSPrintJobDispositionValue": NewType("NSPrintJobDispositionValue", str),
        "NSSpeechStatusKey": NewType("NSSpeechStatusKey", str),
        "NSVoiceAttributeKey": NewType("NSVoiceAttributeKey", str),
        "NSPasteboardType": NewType("NSPasteboardType", str),
        "NSViewAnimationKey": NewType("NSViewAnimationKey", str),
        "NSSpeechPhonemeInfoKey": NewType("NSSpeechPhonemeInfoKey", str),
        "NSFontWeight": NewType("NSFontWeight", float),
        "NSSpeechSynthesizerInfoKey": NewType("NSSpeechSynthesizerInfoKey", str),
        "NSBindingName": NewType("NSBindingName", str),
        "NSGraphicsContextAttributeKey": NewType("NSGraphicsContextAttributeKey", str),
        "NSAccessibilityNotificationUserInfoKey": NewType(
            "NSAccessibilityNotificationUserInfoKey", str
        ),
        "NSAttributedStringDocumentType": NewType(
            "NSAttributedStringDocumentType", str
        ),
        "NSAppKitVersion": NewType("NSAppKitVersion", float),
        "NSAccessibilityNotificationName": NewType(
            "NSAccessibilityNotificationName", str
        ),
        "NSTouchBarItemPriority": NewType("NSTouchBarItemPriority", float),
        "NSVoiceGenderName": NewType("NSVoiceGenderName", str),
        "NSPrintPanelAccessorySummaryKey": NewType(
            "NSPrintPanelAccessorySummaryKey", str
        ),
        "NSFontWidth": NewType("NSFontWidth", float),
        "NSControlStateValue": NewType("NSControlStateValue", int),
        "NSAccessibilityOrientationValue": NewType(
            "NSAccessibilityOrientationValue", str
        ),
        "NSDeviceDescriptionKey": NewType("NSDeviceDescriptionKey", str),
        "NSBitmapImageRepPropertyKey": NewType("NSBitmapImageRepPropertyKey", str),
        "NSPrinterPaperName": NewType("NSPrinterPaperName", str),
        "NSSharingServiceName": NewType("NSSharingServiceName", str),
        "NSColorSpaceName": NewType("NSColorSpaceName", str),
        "NSSpeechErrorKey": NewType("NSSpeechErrorKey", str),
        "NSRuleEditorPredicatePartKey": NewType("NSRuleEditorPredicatePartKey", str),
        "NSPasteboardReadingOptionKey": NewType("NSPasteboardReadingOptionKey", str),
    }
)
misc.update(
    {
        "NSAppKitVersionNumber10_4_1": 824.1,
        "NSAppKitVersionNumber10_4_3": 824.23,
        "NSAppKitVersionNumber10_3_9": 743.36,
        "NSAppKitVersionNumber10_4_4": 824.33,
        "NSAppKitVersionNumber10_4_7": 824.41,
        "NSAppKitVersionNumber10_3_2": 743.14,
        "NSAppKitVersionNumber10_3_3": 743.2,
        "NSAppKitVersionNumber10_3_7": 743.33,
        "NSAppKitVersionNumber10_3_5": 743.24,
        "NSAppKitVersionNumberWithDockTilePlugInSupport": 1001.0,
        "NSAppKitVersionNumberWithCursorSizeSupport": 682.0,
        "NSAppKitVersionNumber10_5_2": 949.27,
        "NSAppKitVersionNumber10_5_3": 949.33,
        "NSAppKitVersionNumberWithCustomSheetPosition": 686.0,
        "NSAppKitVersionNumber10_2_3": 663.6,
        "NSAppKitVersionNumberWithDirectionalTabs": 631.0,
        "NSAppKitVersionNumberWithColumnResizingBrowser": 685.0,
        "NSAppKitVersionNumberWithDeferredWindowDisplaySupport": 1019.0,
        "NSAppKitVersionNumberWithContinuousScrollingBrowser": 680.0,
        "NSAppKitVersionNumberWithPatternColorLeakFix": 641.0,
        "NSAppKitVersionNumber10_7_4": 1138.47,
        "NSAppKitVersionNumber10_7_2": 1138.23,
        "NSAppKitVersionNumber10_7_3": 1138.32,
    }
)
functions = {
    "NSRectClipList": (
        b"v^{CGRect={CGPoint=dd}{CGSize=dd}}q",
        "",
        {"arguments": {0: {"c_array_length_in_arg": 1, "type_modifier": "n"}}},
    ),
    "NSApplicationLoad": (b"Z",),
    "NSCountWindows": (b"v^q", "", {"arguments": {0: {"type_modifier": "o"}}}),
    "NSGetAlertPanel": (
        b"@@@@@@",
        "",
        {"arguments": {1: {"printf_format": True}}, "variadic": True},
    ),
    "NSApplicationMain": (b"ii^^c",),
    "NSOpenGLGetVersion": (
        b"v^i^i",
        "",
        {"arguments": {0: {"type_modifier": "o"}, 1: {"type_modifier": "o"}}},
    ),
    "NSAccessibilityActionDescription": (b"@@",),
    "NSRunAlertPanelRelativeToWindow": (
        b"q@@@@@@",
        "",
        {"arguments": {1: {"printf_format": 1}}, "variadic": True},
    ),
    "NSTouchTypeMaskFromType": (b"Qq", "", {"inline": True}),
    "NSDrawLightBezel": (
        b"v{CGRect={CGPoint=dd}{CGSize=dd}}{CGRect={CGPoint=dd}{CGSize=dd}}",
    ),
    "NSDrawNinePartImage": (b"v{CGRect={CGPoint=dd}{CGSize=dd}}@@@@@@@@@QdZ",),
    "NSOpenGLSetOption": (b"vIi",),
    "NSRectClip": (b"v{CGRect={CGPoint=dd}{CGSize=dd}}",),
    "NSDottedFrameRect": (b"v{CGRect={CGPoint=dd}{CGSize=dd}}",),
    "NSDrawBitmap": (
        b"v{CGRect={CGPoint=dd}{CGSize=dd}}qqqqqqZZ@^C",
        "",
        {"arguments": {10: {"c_array_of_fixed_length": 5, "type_modifier": "n"}}},
    ),
    "NSConvertGlyphsToPackedGlyphs": (b"q^IqQ^c",),
    "NSGetFileType": (b"@@",),
    "NSDirectionalEdgeInsetsMake": (b"{NSDirectionalEdgeInsets=dddd}dddd",),
    "NSWindowList": (
        b"vq^q",
        "",
        {"arguments": {1: {"c_array_length_in_arg": 0, "type_modifier": "o"}}},
    ),
    "NSAccessibilityRaiseBadArgumentException": (b"v@@@",),
    "NSAccessibilityUnignoredDescendant": (b"@@",),
    "NSRectFill": (b"v{CGRect={CGPoint=dd}{CGSize=dd}}",),
    "NSGetCriticalAlertPanel": (
        b"@@@@@@",
        "",
        {"arguments": {1: {"printf_format": True}}, "variadic": True},
    ),
    "NSAccessibilityFrameInView": (
        b"{CGRect={CGPoint=dd}{CGSize=dd}}@{CGRect={CGPoint=dd}{CGSize=dd}}",
    ),
    "NSDrawThreePartImage": (b"v{CGRect={CGPoint=dd}{CGSize=dd}}@@@ZQdZ",),
    "NSAccessibilityRoleDescription": (b"@@@",),
    "NSRunCriticalAlertPanel": (
        b"q@@@@@",
        "",
        {"arguments": {1: {"printf_format": 1}}, "variadic": True},
    ),
    "NSFrameRect": (b"v{CGRect={CGPoint=dd}{CGSize=dd}}",),
    "NSDrawColorTiledRects": (
        b"{CGRect={CGPoint=dd}{CGSize=dd}}{CGRect={CGPoint=dd}{CGSize=dd}}{CGRect={CGPoint=dd}{CGSize=dd}}^Q^@q",
        "",
        {
            "arguments": {
                2: {"c_array_length_in_arg": 4, "type_modifier": "n"},
                3: {"c_array_length_in_arg": 4, "type_modifier": "n"},
            }
        },
    ),
    "NSBeginCriticalAlertSheet": (
        b"v@@@@@@::^v@",
        "",
        {
            "arguments": {
                9: {"printf_format": True},
                6: {"sel_of_type": b"v@:@q^v"},
                7: {"sel_of_type": b"v@:@q^v"},
            },
            "variadic": True,
        },
    ),
    "NSBeginAlertSheet": (
        b"v@@@@@@::^v@",
        "",
        {
            "arguments": {
                9: {"printf_format": True},
                6: {"sel_of_type": b"v@:@q^v"},
                7: {"sel_of_type": b"v@:@q^v"},
            },
            "variadic": True,
        },
    ),
    "NSCountWindowsForContext": (
        b"vq^q",
        "",
        {"arguments": {1: {"type_modifier": "o"}}},
    ),
    "NSGetWindowServerMemory": (
        b"qq^q^q^@",
        "",
        {
            "arguments": {
                1: {"type_modifier": "o"},
                2: {"type_modifier": "o"},
                3: {"type_modifier": "o"},
            }
        },
    ),
    "NSShowAnimationEffect": (
        b"vQ{CGPoint=dd}{CGSize=dd}@:^v",
        "",
        {"arguments": {4: {"sel_of_type": b"v@:^v"}}},
    ),
    "NSRunCriticalAlertPanelRelativeToWindow": (
        b"q@@@@@@",
        "",
        {"arguments": {1: {"printf_format": 1}}, "variadic": True},
    ),
    "NSAccessibilityUnignoredChildren": (b"@@",),
    "NSRectFillListUsingOperation": (
        b"v^{CGRect={CGPoint=dd}{CGSize=dd}}qQ",
        "",
        {"arguments": {0: {"c_array_length_in_arg": 1, "type_modifier": "n"}}},
    ),
    "NSCreateFilenamePboardType": (b"@@", "", {"retval": {"already_cfretained": True}}),
    "NSInterfaceStyleForKey": (b"Q@@",),
    "NSAvailableWindowDepths": (
        b"^i",
        "",
        {"retval": {"c_array_delimited_by_null": True}},
    ),
    "NSBeginInformationalAlertSheet": (
        b"v@@@@@@::^v@",
        "",
        {
            "arguments": {
                9: {"printf_format": True},
                6: {"sel_of_type": b"v@:@q^v"},
                7: {"sel_of_type": b"v@:@q^v"},
            },
            "variadic": True,
        },
    ),
    "NSUnregisterServicesProvider": (b"v@",),
    "NSEventMaskFromType": (b"QQ",),
    "NSRectFillUsingOperation": (b"v{CGRect={CGPoint=dd}{CGSize=dd}}Q",),
    "NSBitsPerSampleFromDepth": (b"qi",),
    "NSEnableScreenUpdates": (b"v",),
    "NSDrawDarkBezel": (
        b"v{CGRect={CGPoint=dd}{CGSize=dd}}{CGRect={CGPoint=dd}{CGSize=dd}}",
    ),
    "NSRunInformationalAlertPanelRelativeToWindow": (
        b"q@@@@@@",
        "",
        {"arguments": {1: {"printf_format": 1}}, "variadic": True},
    ),
    "NSPerformService": (b"Z@@",),
    "NSGetFileTypes": (b"@@",),
    "NSDrawWhiteBezel": (
        b"v{CGRect={CGPoint=dd}{CGSize=dd}}{CGRect={CGPoint=dd}{CGSize=dd}}",
    ),
    "NSReleaseAlertPanel": (b"v@",),
    "NSAccessibilityUnignoredAncestor": (b"@@",),
    "NSAccessibilityPostNotificationWithUserInfo": (b"v@@@",),
    "NSSetFocusRingStyle": (b"vQ",),
    "NSAccessibilityPostNotification": (b"v@@",),
    "NSDrawTiledRects": (
        b"{CGRect={CGPoint=dd}{CGSize=dd}}{CGRect={CGPoint=dd}{CGSize=dd}}{CGRect={CGPoint=dd}{CGSize=dd}}^Q^dq",
        "",
        {
            "arguments": {
                2: {"c_array_length_in_arg": 4, "type_modifier": "n"},
                3: {"c_array_length_in_arg": 4, "type_modifier": "n"},
            }
        },
    ),
    "NSAccessibilityPointInView": (b"{CGPoint=dd}@{CGPoint=dd}",),
    "NSUpdateDynamicServices": (b"v",),
    "NSIsControllerMarker": (b"Z@",),
    "NSDrawButton": (
        b"v{CGRect={CGPoint=dd}{CGSize=dd}}{CGRect={CGPoint=dd}{CGSize=dd}}",
    ),
    "NSSetShowsServicesMenuItem": (b"q@Z",),
    "NSOpenGLGetOption": (b"vI^i", "", {"arguments": {1: {"type_modifier": "o"}}}),
    "NSCreateFileContentsPboardType": (
        b"@@",
        "",
        {"retval": {"already_cfretained": True}},
    ),
    "NSCopyBits": (
        b"vq{CGRect={CGPoint=dd}{CGSize=dd}}{CGPoint=dd}",
        "",
        {"retval": {"already_cfretained": True}},
    ),
    "NSDisableScreenUpdates": (b"v",),
    "NSEdgeInsetsMake": (b"{NSEdgeInsets=dddd}dddd",),
    "NSReadPixel": (b"@{CGPoint=dd}",),
    "NSWindowListForContext": (
        b"vqq^q",
        "",
        {"arguments": {2: {"c_array_length_in_arg": 1, "type_modifier": "o"}}},
    ),
    "NSAccessibilityRoleDescriptionForUIElement": (b"@@",),
    "NSDrawWindowBackground": (b"v{CGRect={CGPoint=dd}{CGSize=dd}}",),
    "NSShowsServicesMenuItem": (b"Z@",),
    "NSPlanarFromDepth": (b"Zi",),
    "NSHighlightRect": (b"v{CGRect={CGPoint=dd}{CGSize=dd}}",),
    "NSFrameRectWithWidthUsingOperation": (b"v{CGRect={CGPoint=dd}{CGSize=dd}}dQ",),
    "NSRectFillListWithColorsUsingOperation": (
        b"v^{CGRect={CGPoint=dd}{CGSize=dd}}^@qQ",
        "",
        {
            "arguments": {
                0: {"c_array_length_in_arg": 2, "type_modifier": "n"},
                1: {"c_array_length_in_arg": 2, "type_modifier": "n"},
            }
        },
    ),
    "NSDrawGroove": (
        b"v{CGRect={CGPoint=dd}{CGSize=dd}}{CGRect={CGPoint=dd}{CGSize=dd}}",
    ),
    "NSNumberOfColorComponents": (b"q@",),
    "NSFrameRectWithWidth": (b"v{CGRect={CGPoint=dd}{CGSize=dd}}d",),
    "NSEraseRect": (b"v{CGRect={CGPoint=dd}{CGSize=dd}}",),
    "NSRectFillListWithColors": (
        b"v^{CGRect={CGPoint=dd}{CGSize=dd}}^@q",
        "",
        {
            "arguments": {
                0: {"c_array_length_in_arg": 2, "type_modifier": "n"},
                1: {"c_array_length_in_arg": 2, "type_modifier": "n"},
            }
        },
    ),
    "NSBestDepth": (b"i@qqZ^Z", "", {"arguments": {4: {"type_modifier": "o"}}}),
    "NSColorSpaceFromDepth": (b"@i",),
    "NSBeep": (b"v",),
    "NSAccessibilitySetMayContainProtectedContent": (b"ZZ",),
    "NSBitsPerPixelFromDepth": (b"qi",),
    "NSAccessibilityUnignoredChildrenForOnlyChild": (b"@@",),
    "NSDrawGrayBezel": (
        b"v{CGRect={CGPoint=dd}{CGSize=dd}}{CGRect={CGPoint=dd}{CGSize=dd}}",
    ),
    "NSRectFillList": (
        b"v^{CGRect={CGPoint=dd}{CGSize=dd}}q",
        "",
        {"arguments": {0: {"c_array_length_in_arg": 1, "type_modifier": "n"}}},
    ),
    "NSRunAlertPanel": (
        b"q@@@@@",
        "",
        {"arguments": {1: {"printf_format": 1}}, "variadic": True},
    ),
    "NSGetInformationalAlertPanel": (
        b"@@@@@@",
        "",
        {"arguments": {1: {"printf_format": True}}, "variadic": True},
    ),
    "NSRectFillListWithGrays": (
        b"v^{CGRect={CGPoint=dd}{CGSize=dd}}^dq",
        "",
        {
            "arguments": {
                0: {"c_array_length_in_arg": 2, "type_modifier": "n"},
                1: {"c_array_length_in_arg": 2, "type_modifier": "n"},
            }
        },
    ),
    "NSRunInformationalAlertPanel": (
        b"q@@@@@",
        "",
        {"arguments": {1: {"printf_format": 1}}, "variadic": True},
    ),
    "NSRegisterServicesProvider": (b"v@@",),
}
aliases = {
    "NSLayoutFormatAlignAllLastBaseline": "NSLayoutFormatAlignAllBaseline",
    "NSBezelStyleRoundedDisclosure": "NSBezelStylePushDisclosure",
    "NSBezelStyleRegularSquare": "NSBezelStyleFlexiblePush",
    "NSImageRepRegistryChangedNotification": "NSImageRepRegistryDidChangeNotification",
    "NSBezierPathElementCurveTo": "NSBezierPathElementCubicCurveTo",
    "NSTickMarkRight": "NSTickMarkBelow",
    "NSModalPanelWindowLevel": "kCGModalPanelWindowLevel",
    "NSSubmenuWindowLevel": "kCGTornOffMenuWindowLevel",
    "NSTickMarkPositionTrailing": "NSTickMarkPositionBelow",
    "NSLayoutFormatAlignAllBaseline": "NSLayoutFormatAlignAllLastBaseline",
    "NSGestureRecognizerStateRecognized": "NSGestureRecognizerStateEnded",
    "NSGridCellPlacementBottom": "NSGridCellPlacementTrailing",
    "NSBezelStyleInline": "NSBezelStyleBadge",
    "NSTornOffMenuWindowLevel": "kCGTornOffMenuWindowLevel",
    "NSRightTextAlignment": "NSTextAlignmentRight",
    "NSPopUpMenuWindowLevel": "kCGPopUpMenuWindowLevel",
    "NSLayoutAttributeBaseline": "NSLayoutAttributeLastBaseline",
    "NSBezelStyleRoundRect": "NSBezelStyleAccessoryBarAction",
    "NSDragOperationAll": "NSDragOperationAll_Obsolete",
    "NSGridCellPlacementTop": "NSGridCellPlacementLeading",
    "NSMainMenuWindowLevel": "kCGMainMenuWindowLevel",
    "NSDraggingItemEnumerationConcurrent": "NSEnumerationConcurrent",
    "NSScreenSaverWindowLevel": "kCGScreenSaverWindowLevel",
    "NSEventDurationForever": "DBL_MAX",
    "NSBezelStyleTexturedRounded": "NSBezelStyleToolbar",
    "APPKIT_PRIVATE_EXTERN": "__private_extern__",
    "NSLayoutAttributeLastBaseline": "NSLayoutAttributeBaseline",
    "NSBezelStyleRounded": "NSBezelStylePush",
    "IBAction": "void",
    "NSBezelStyleRecessed": "NSBezelStyleAccessoryBar",
    "NSFileHandlingPanelCancelButton": "NSModalResponseCancel",
    "NSWorkspaceLaunchDefault": "NSWorkspaceLaunchAsync",
    "NSNormalWindowLevel": "kCGNormalWindowLevel",
    "NSFileHandlingPanelOKButton": "NSModalResponseOK",
    "NSIMAGE_UNAVAILABLE_MACCATALYST": "TARGET_OS_IPHONE",
    "NSFloatingWindowLevel": "kCGFloatingWindowLevel",
    "NSTickMarkPositionLeading": "NSTickMarkPositionAbove",
    "NSDockWindowLevel": "kCGDockWindowLevel",
    "NSCenterTextAlignment": "NSTextAlignmentCenter",
    "NSTickMarkLeft": "NSTickMarkAbove",
    "NSStackViewSpacingUseDefault": "FLT_MAX",
    "NSStatusWindowLevel": "kCGStatusWindowLevel",
    "NSFontDescriptorTraitEmphasized": "NSFontDescriptorTraitBold",
}
misc.update(
    {
        "NSModalSession": objc.createOpaquePointerType(
            "NSModalSession", b"^{_NSModalSession}"
        )
    }
)
r = objc.registerMetaDataForSelector
objc._updatingMetadata(True)
try:
    r(
        b"CIImage",
        b"drawAtPoint:fromRect:operation:fraction:",
        {
            "arguments": {
                2: {"type": "{CGPoint=dd}"},
                3: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            }
        },
    )
    r(
        b"CIImage",
        b"drawInRect:fromRect:operation:fraction:",
        {
            "arguments": {
                2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                3: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            }
        },
    )
    r(b"NSATSTypesetter", b"bidiProcessingEnabled", {"retval": {"type": "Z"}})
    r(
        b"NSATSTypesetter",
        b"boundingBoxForControlGlyphAtIndex:forTextContainer:proposedLineFragment:glyphPosition:characterIndex:",
        {
            "retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            "arguments": {
                4: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                5: {"type": "{CGPoint=dd}"},
                6: {"type": "Q"},
            },
        },
    )
    r(
        b"NSATSTypesetter",
        b"characterRangeForGlyphRange:actualGlyphRange:",
        {
            "retval": {"type": "{_NSRange=QQ}"},
            "arguments": {2: {"type": "{_NSRange=QQ}"}, 3: {"type_modifier": b"o"}},
        },
    )
    r(
        b"NSATSTypesetter",
        b"deleteGlyphsInRange:",
        {"arguments": {2: {"type": "{_NSRange=QQ}"}}},
    )
    r(
        b"NSATSTypesetter",
        b"getGlyphsInRange:glyphs:characterIndexes:glyphInscriptions:elasticBits:",
        {
            "arguments": {
                2: {"type": "{_NSRange=QQ}"},
                3: {"type": "^I", "type_modifier": b"o", "c_array_length_in_arg": 2},
                4: {"type": "^Q", "type_modifier": b"o", "c_array_length_in_arg": 2},
                5: {"type": "^Q", "type_modifier": b"o", "c_array_length_in_arg": 2},
                6: {"type": "^Z", "type_modifier": b"o", "c_array_length_in_arg": 2},
            }
        },
    )
    r(
        b"NSATSTypesetter",
        b"getLineFragmentRect:usedRect:forParagraphSeparatorGlyphRange:atProposedOrigin:",
        {
            "retval": {"type": "v"},
            "arguments": {
                2: {"type_modifier": b"o"},
                3: {"type_modifier": b"o"},
                4: {"type": "{_NSRange=QQ}"},
                5: {"type": "{CGPoint=dd}"},
            },
        },
    )
    r(
        b"NSATSTypesetter",
        b"glyphRangeForCharacterRange:actualCharacterRange:",
        {
            "retval": {"type": "{_NSRange=QQ}"},
            "arguments": {2: {"type": "{_NSRange=QQ}"}, 3: {"type_modifier": b"o"}},
        },
    )
    r(
        b"NSATSTypesetter",
        b"layoutParagraphAtPoint:",
        {"arguments": {2: {"type_modifier": b"N"}}},
    )
    r(
        b"NSATSTypesetter",
        b"lineFragmentRectForProposedRect:remainingRect:",
        {
            "retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            "arguments": {
                2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                3: {"type_modifier": b"o"},
            },
        },
    )
    r(
        b"NSATSTypesetter",
        b"lineSpacingAfterGlyphAtIndex:withProposedLineFragmentRect:",
        {"arguments": {3: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(b"NSATSTypesetter", b"paragraphGlyphRange", {"retval": {"type": "{_NSRange=QQ}"}})
    r(
        b"NSATSTypesetter",
        b"paragraphSeparatorGlyphRange",
        {"retval": {"type": "{_NSRange=QQ}"}},
    )
    r(
        b"NSATSTypesetter",
        b"paragraphSpacingAfterGlyphAtIndex:withProposedLineFragmentRect:",
        {"arguments": {3: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSATSTypesetter",
        b"paragraphSpacingBeforeGlyphAtIndex:withProposedLineFragmentRect:",
        {"arguments": {3: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSATSTypesetter",
        b"setAttachmentSize:forGlyphRange:",
        {"arguments": {2: {"type": "{CGSize=dd}"}, 3: {"type": "{_NSRange=QQ}"}}},
    )
    r(
        b"NSATSTypesetter",
        b"setBidiLevels:forGlyphRange:",
        {
            "arguments": {
                2: {"type": "^z", "type_modifier": b"n", "c_array_length_in_arg": 3},
                3: {"type": "{_NSRange=QQ}"},
            }
        },
    )
    r(
        b"NSATSTypesetter",
        b"setBidiProcessingEnabled:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(
        b"NSATSTypesetter",
        b"setDrawsOutsideLineFragment:forGlyphRange:",
        {"arguments": {2: {"type": "Z"}, 3: {"type": "{_NSRange=QQ}"}}},
    )
    r(
        b"NSATSTypesetter",
        b"setHardInvalidation:forGlyphRange:",
        {"arguments": {2: {"type": "Z"}, 3: {"type": "{_NSRange=QQ}"}}},
    )
    r(
        b"NSATSTypesetter",
        b"setLineFragmentRect:forGlyphRange:usedRect:baselineOffset:",
        {
            "arguments": {
                2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                3: {"type": "{_NSRange=QQ}"},
                4: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                5: {"type": "d"},
            }
        },
    )
    r(
        b"NSATSTypesetter",
        b"setLocation:withAdvancements:forStartOfGlyphRange:",
        {
            "arguments": {
                2: {"type": "{CGPoint=dd}"},
                3: {"type_modifier": b"n", "c_array_length_in_arg": 4},
                4: {"type": "{_NSRange=QQ}"},
            }
        },
    )
    r(
        b"NSATSTypesetter",
        b"setNotShownAttribute:forGlyphRange:",
        {"arguments": {2: {"type": "Z"}, 3: {"type": "{_NSRange=QQ}"}}},
    )
    r(
        b"NSATSTypesetter",
        b"setParagraphGlyphRange:separatorGlyphRange:",
        {"arguments": {2: {"type": "{_NSRange=QQ}"}, 3: {"type": "{_NSRange=QQ}"}}},
    )
    r(b"NSATSTypesetter", b"setUsesFontLeading:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSATSTypesetter",
        b"shouldBreakLineByHyphenatingBeforeCharacterAtIndex:",
        {"retval": {"type": "Z"}, "arguments": {2: {"type": "Q"}}},
    )
    r(
        b"NSATSTypesetter",
        b"shouldBreakLineByWordBeforeCharacterAtIndex:",
        {"retval": {"type": "Z"}, "arguments": {2: {"type": "Q"}}},
    )
    r(
        b"NSATSTypesetter",
        b"substituteGlyphsInRange:withGlyphs:",
        {
            "arguments": {
                2: {"type": "{_NSRange=QQ}"},
                3: {"type_modifier": b"n", "c_array_length_in_arg": 2},
            }
        },
    )
    r(b"NSATSTypesetter", b"usesFontLeading", {"retval": {"type": "Z"}})
    r(
        b"NSATSTypesetter",
        b"willSetLineFragmentRect:forGlyphRange:usedRect:baselineOffset:",
        {
            "arguments": {
                2: {"type": "^{CGRect={CGPoint=dd}{CGSize=dd}}", "type_modifier": b"N"},
                3: {"type": "{_NSRange=QQ}"},
                4: {"type": "^{CGRect={CGPoint=dd}{CGSize=dd}}", "type_modifier": b"N"},
                5: {"type": "^d", "type_modifier": b"N"},
            }
        },
    )
    r(
        b"NSAccessibilityCustomAction",
        b"handler",
        {
            "retval": {
                "callable": {
                    "retval": {"type": b"Z"},
                    "arguments": {0: {"type": b"^v"}},
                }
            }
        },
    )
    r(
        b"NSAccessibilityCustomAction",
        b"initWithName:handler:",
        {
            "arguments": {
                3: {
                    "callable": {
                        "retval": {"type": b"Z"},
                        "arguments": {0: {"type": b"^v"}},
                    }
                }
            }
        },
    )
    r(
        b"NSAccessibilityCustomAction",
        b"initWithName:target:selector:",
        {"arguments": {4: {"sel_of_type": b"Z@:"}}},
    )
    r(
        b"NSAccessibilityCustomAction",
        b"setHandler:",
        {
            "arguments": {
                2: {
                    "callable": {
                        "retval": {"type": b"Z"},
                        "arguments": {0: {"type": b"^v"}},
                    }
                }
            }
        },
    )
    r(
        b"NSActionCell",
        b"setAction:",
        {"retval": {"type": "v"}, "arguments": {2: {"sel_of_type": b"v@:@"}}},
    )
    r(b"NSActionCell", b"setBezeled:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSActionCell", b"setBordered:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSActionCell", b"setEnabled:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSActionCell",
        b"setFloatingPointFormat:left:right:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(
        b"NSAlert",
        b"alertWithMessageText:defaultButton:alternateButton:otherButton:informativeTextWithFormat:",
        {"arguments": {6: {"printf_format": True, "type": "@"}}, "variadic": True},
    )
    r(
        b"NSAlert",
        b"beginSheetModalForWindow:completionHandler:",
        {
            "arguments": {
                3: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {0: {"type": b"^v"}, 1: {"type": b"q"}},
                    }
                }
            }
        },
    )
    r(
        b"NSAlert",
        b"beginSheetModalForWindow:modalDelegate:didEndSelector:contextInfo:",
        {"arguments": {4: {"sel_of_type": b"v@:@q^v"}, 5: {"type": "^v"}}},
    )
    r(b"NSAlert", b"setShowsHelp:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSAlert", b"setShowsSuppressionButton:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSAlert", b"showsHelp", {"retval": {"type": "Z"}})
    r(b"NSAlert", b"showsSuppressionButton", {"retval": {"type": "Z"}})
    r(b"NSAnimation", b"isAnimating", {"retval": {"type": "Z"}})
    r(b"NSAnimationContext", b"allowsImplicitAnimation", {"retval": {"type": b"Z"}})
    r(
        b"NSAnimationContext",
        b"completionHandler",
        {
            "retval": {
                "callable": {
                    "retval": {"type": b"v"},
                    "arguments": {0: {"type": b"^v"}},
                }
            }
        },
    )
    r(
        b"NSAnimationContext",
        b"runAnimationGroup:",
        {
            "arguments": {
                2: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {0: {"type": b"^v"}, 1: {"type": b"@"}},
                    }
                }
            }
        },
    )
    r(
        b"NSAnimationContext",
        b"runAnimationGroup:completionHandler:",
        {
            "arguments": {
                2: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {0: {"type": b"^v"}, 1: {"type": b"@"}},
                    }
                },
                3: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {0: {"type": b"^v"}},
                    }
                },
            }
        },
    )
    r(
        b"NSAnimationContext",
        b"setAllowsImplicitAnimation:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(
        b"NSAnimationContext",
        b"setCompletionHandler:",
        {
            "arguments": {
                2: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {0: {"type": b"^v"}},
                    }
                }
            }
        },
    )
    r(b"NSAppearance", b"allowsVibrancy", {"retval": {"type": b"Z"}})
    r(
        b"NSAppearance",
        b"performAsCurrentDrawingAppearance:",
        {
            "arguments": {
                2: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {0: {"type": b"^v"}},
                    }
                }
            }
        },
    )
    r(
        b"NSApplication",
        b"activateIgnoringOtherApps:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(
        b"NSApplication",
        b"addWindowsItem:title:filename:",
        {"arguments": {4: {"type": "Z"}}},
    )
    r(
        b"NSApplication",
        b"beginSheet:modalForWindow:modalDelegate:didEndSelector:contextInfo:",
        {"arguments": {5: {"sel_of_type": b"v@:@q^v"}, 6: {"type": "^v"}}},
    )
    r(
        b"NSApplication",
        b"changeWindowsItem:title:filename:",
        {"arguments": {4: {"type": "Z"}}},
    )
    r(
        b"NSApplication",
        b"detachDrawingThread:toTarget:withObject:",
        {"arguments": {2: {"sel_of_type": b"v@:@"}}},
    )
    r(
        b"NSApplication",
        b"enumerateWindowsWithOptions:usingBlock:",
        {
            "arguments": {
                3: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {
                            0: {"type": b"^v"},
                            1: {"type": b"@"},
                            2: {"type": b"o^Z"},
                        },
                    }
                }
            }
        },
    )
    r(b"NSApplication", b"isActive", {"retval": {"type": "Z"}})
    r(
        b"NSApplication",
        b"isAutomaticCustomizeTouchBarMenuItemEnabled",
        {"retval": {"type": "Z"}},
    )
    r(b"NSApplication", b"isFullKeyboardAccessEnabled", {"retval": {"type": "Z"}})
    r(b"NSApplication", b"isHidden", {"retval": {"type": "Z"}})
    r(b"NSApplication", b"isProtectedDataAvailable", {"retval": {"type": "Z"}})
    r(
        b"NSApplication",
        b"isRegisteredForRemoteNotifications",
        {"retval": {"type": b"Z"}},
    )
    r(b"NSApplication", b"isRunning", {"retval": {"type": "Z"}})
    r(
        b"NSApplication",
        b"makeWindowsPerform:inOrder:",
        {"arguments": {2: {"sel_of_type": b"v@:"}, 3: {"type": "Z"}}},
    )
    r(
        b"NSApplication",
        b"nextEventMatchingMask:untilDate:inMode:dequeue:",
        {"arguments": {5: {"type": "Z"}}},
    )
    r(b"NSApplication", b"postEvent:atStart:", {"arguments": {3: {"type": "Z"}}})
    r(
        b"NSApplication",
        b"replyToApplicationShouldTerminate:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(
        b"NSApplication",
        b"restoreWindowWithIdentifier:state:completionHandler:",
        {
            "retval": {"type": b"Z"},
            "arguments": {
                4: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {
                            0: {"type": b"^v"},
                            1: {"type": b"@"},
                            2: {"type": b"@"},
                        },
                    },
                    "type": "@?",
                }
            },
        },
    )
    r(
        b"NSApplication",
        b"searchString:inUserInterfaceItemString:searchRange:foundRange:",
        {
            "retval": {"type": "Z"},
            "arguments": {
                4: {"type": "{_NSRange=QQ}"},
                5: {"type": "^{_NSRange=QQ}", "type_modifier": b"o"},
            },
        },
    )
    r(
        b"NSApplication",
        b"sendAction:to:from:",
        {"retval": {"type": "Z"}, "arguments": {2: {"sel_of_type": b"v@:@"}}},
    )
    r(b"NSApplication", b"setActivationPolicy:", {"retval": {"type": "Z"}})
    r(
        b"NSApplication",
        b"setAutomaticCustomizeTouchBarMenuItemEnabled:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(b"NSApplication", b"setWindowsNeedUpdate:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSApplication",
        b"targetForAction:",
        {"arguments": {2: {"sel_of_type": b"v@:@"}}},
    )
    r(
        b"NSApplication",
        b"targetForAction:to:from:",
        {"arguments": {2: {"sel_of_type": b"v@:@"}}},
    )
    r(
        b"NSApplication",
        b"tryToPerform:with:",
        {"retval": {"type": "Z"}, "arguments": {2: {"sel_of_type": b"v@:@"}}},
    )
    r(b"NSArrayController", b"addSelectedObjects:", {"retval": {"type": "Z"}})
    r(b"NSArrayController", b"addSelectionIndexes:", {"retval": {"type": "Z"}})
    r(
        b"NSArrayController",
        b"alwaysUsesMultipleValuesMarker",
        {"retval": {"type": "Z"}},
    )
    r(
        b"NSArrayController",
        b"automaticallyRearrangesObjects",
        {"retval": {"type": "Z"}},
    )
    r(b"NSArrayController", b"avoidsEmptySelection", {"retval": {"type": "Z"}})
    r(b"NSArrayController", b"canInsert", {"retval": {"type": "Z"}})
    r(b"NSArrayController", b"canSelectNext", {"retval": {"type": "Z"}})
    r(b"NSArrayController", b"canSelectPrevious", {"retval": {"type": "Z"}})
    r(
        b"NSArrayController",
        b"clearsFilterPredicateOnInsertion",
        {"retval": {"type": "Z"}},
    )
    r(b"NSArrayController", b"preservesSelection", {"retval": {"type": "Z"}})
    r(b"NSArrayController", b"removeSelectedObjects:", {"retval": {"type": "Z"}})
    r(b"NSArrayController", b"removeSelectionIndexes:", {"retval": {"type": "Z"}})
    r(b"NSArrayController", b"selectsInsertedObjects", {"retval": {"type": "Z"}})
    r(
        b"NSArrayController",
        b"setAlwaysUsesMultipleValuesMarker:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(
        b"NSArrayController",
        b"setAutomaticallyRearrangesObjects:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(
        b"NSArrayController",
        b"setAvoidsEmptySelection:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(
        b"NSArrayController",
        b"setClearsFilterPredicateOnInsertion:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(
        b"NSArrayController",
        b"setPreservesSelection:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(b"NSArrayController", b"setSelectedObjects:", {"retval": {"type": "Z"}})
    r(b"NSArrayController", b"setSelectionIndex:", {"retval": {"type": "Z"}})
    r(b"NSArrayController", b"setSelectionIndexes:", {"retval": {"type": "Z"}})
    r(
        b"NSArrayController",
        b"setSelectsInsertedObjects:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(
        b"NSAttributedString",
        b"RTFDFileWrapperFromRange:documentAttributes:",
        {"arguments": {2: {"type": "{_NSRange=QQ}"}}},
    )
    r(
        b"NSAttributedString",
        b"RTFDFromRange:documentAttributes:",
        {"arguments": {2: {"type": "{_NSRange=QQ}"}}},
    )
    r(
        b"NSAttributedString",
        b"RTFFromRange:documentAttributes:",
        {"arguments": {2: {"type": "{_NSRange=QQ}"}}},
    )
    r(
        b"NSAttributedString",
        b"URLAtIndex:effectiveRange:",
        {"arguments": {3: {"type": "^{_NSRange=QQ}", "type_modifier": b"o"}}},
    )
    r(
        b"NSAttributedString",
        b"boundingRectWithSize:options:",
        {
            "retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            "arguments": {2: {"type": "{CGSize=dd}"}},
        },
    )
    r(b"NSAttributedString", b"containsAttachments", {"retval": {"type": "Z"}})
    r(b"NSAttributedString", b"containsAttachmentsInRange:", {"retval": {"type": "Z"}})
    r(
        b"NSAttributedString",
        b"dataFromRange:documentAttributes:error:",
        {"arguments": {2: {"type": "{_NSRange=QQ}"}, 4: {"type_modifier": b"o"}}},
    )
    r(
        b"NSAttributedString",
        b"docFormatFromRange:documentAttributes:",
        {"arguments": {2: {"type": "{_NSRange=QQ}"}}},
    )
    r(
        b"NSAttributedString",
        b"doubleClickAtIndex:",
        {"retval": {"type": "{_NSRange=QQ}"}},
    )
    r(
        b"NSAttributedString",
        b"drawAtPoint:",
        {"arguments": {2: {"type": "{CGPoint=dd}"}}},
    )
    r(
        b"NSAttributedString",
        b"drawInRect:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSAttributedString",
        b"drawWithRect:options:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSAttributedString",
        b"fileWrapperFromRange:documentAttributes:error:",
        {"arguments": {2: {"type": "{_NSRange=QQ}"}, 4: {"type_modifier": b"o"}}},
    )
    r(
        b"NSAttributedString",
        b"fontAttributesInRange:",
        {"arguments": {2: {"type": "{_NSRange=QQ}"}}},
    )
    r(
        b"NSAttributedString",
        b"initWithData:options:documentAttributes:error:",
        {"arguments": {4: {"type_modifier": b"o"}, 5: {"type_modifier": b"o"}}},
    )
    r(
        b"NSAttributedString",
        b"initWithDocFormat:documentAttributes:",
        {"arguments": {3: {"type_modifier": b"o"}}},
    )
    r(
        b"NSAttributedString",
        b"initWithHTML:baseURL:documentAttributes:",
        {"arguments": {4: {"type_modifier": b"o"}}},
    )
    r(
        b"NSAttributedString",
        b"initWithHTML:documentAttributes:",
        {"arguments": {3: {"type_modifier": b"o"}}},
    )
    r(
        b"NSAttributedString",
        b"initWithHTML:options:documentAttributes:",
        {"arguments": {4: {"type_modifier": b"o"}}},
    )
    r(
        b"NSAttributedString",
        b"initWithPath:documentAttributes:",
        {"arguments": {3: {"type_modifier": b"o"}}},
    )
    r(
        b"NSAttributedString",
        b"initWithRTF:documentAttributes:",
        {"arguments": {3: {"type_modifier": b"o"}}},
    )
    r(
        b"NSAttributedString",
        b"initWithRTFD:documentAttributes:",
        {"arguments": {3: {"type_modifier": b"o"}}},
    )
    r(
        b"NSAttributedString",
        b"initWithRTFDFileWrapper:documentAttributes:",
        {"arguments": {3: {"type_modifier": b"o"}}},
    )
    r(
        b"NSAttributedString",
        b"initWithURL:documentAttributes:",
        {"arguments": {3: {"type_modifier": b"o"}}},
    )
    r(
        b"NSAttributedString",
        b"initWithURL:options:documentAttributes:error:",
        {"arguments": {4: {"type_modifier": b"o"}, 5: {"type_modifier": b"o"}}},
    )
    r(
        b"NSAttributedString",
        b"lineBreakBeforeIndex:withinRange:",
        {"arguments": {3: {"type": "{_NSRange=QQ}"}}},
    )
    r(
        b"NSAttributedString",
        b"lineBreakByHyphenatingBeforeIndex:withinRange:",
        {"arguments": {3: {"type": "{_NSRange=QQ}"}}},
    )
    r(
        b"NSAttributedString",
        b"nextWordFromIndex:forward:",
        {"arguments": {3: {"type": "Z"}}},
    )
    r(
        b"NSAttributedString",
        b"rangeOfTextBlock:atIndex:",
        {"retval": {"type": "{_NSRange=QQ}"}},
    )
    r(
        b"NSAttributedString",
        b"rangeOfTextList:atIndex:",
        {"retval": {"type": "{_NSRange=QQ}"}},
    )
    r(
        b"NSAttributedString",
        b"rangeOfTextTable:atIndex:",
        {"retval": {"type": "{_NSRange=QQ}"}},
    )
    r(
        b"NSAttributedString",
        b"rulerAttributesInRange:",
        {"arguments": {2: {"type": "{_NSRange=QQ}"}}},
    )
    r(b"NSAttributedString", b"size", {"retval": {"type": "{CGSize=dd}"}})
    r(
        b"NSBezierPath",
        b"appendBezierPathWithArcFromPoint:toPoint:radius:",
        {"arguments": {2: {"type": "{CGPoint=dd}"}, 3: {"type": "{CGPoint=dd}"}}},
    )
    r(
        b"NSBezierPath",
        b"appendBezierPathWithArcWithCenter:radius:startAngle:endAngle:",
        {"arguments": {2: {"type": "{CGPoint=dd}"}}},
    )
    r(
        b"NSBezierPath",
        b"appendBezierPathWithArcWithCenter:radius:startAngle:endAngle:clockwise:",
        {"arguments": {2: {"type": "{CGPoint=dd}"}, 6: {"type": "Z"}}},
    )
    r(
        b"NSBezierPath",
        b"appendBezierPathWithGlyphs:count:inFont:",
        {"arguments": {2: {"type_modifier": b"n", "c_array_length_in_arg": 3}}},
    )
    r(
        b"NSBezierPath",
        b"appendBezierPathWithOvalInRect:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSBezierPath",
        b"appendBezierPathWithPackedGlyphs:",
        {
            "arguments": {
                2: {
                    "c_array_delimited_by_null": True,
                    "type": "^v",
                    "type_modifier": b"n",
                    "c_array_length_in_arg": 3,
                }
            }
        },
    )
    r(
        b"NSBezierPath",
        b"appendBezierPathWithPoints:count:",
        {"arguments": {2: {"type_modifier": b"n", "c_array_length_in_arg": 3}}},
    )
    r(
        b"NSBezierPath",
        b"appendBezierPathWithRect:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSBezierPath",
        b"appendBezierPathWithRoundedRect:xRadius:yRadius:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSBezierPath",
        b"bezierPathWithOvalInRect:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSBezierPath",
        b"bezierPathWithRect:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSBezierPath",
        b"bezierPathWithRoundedRect:xRadius:yRadius:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSBezierPath",
        b"bounds",
        {"retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
    )
    r(b"NSBezierPath", b"cachesBezierPath", {"retval": {"type": "Z"}})
    r(
        b"NSBezierPath",
        b"clipRect:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSBezierPath",
        b"containsPoint:",
        {"retval": {"type": "Z"}, "arguments": {2: {"type": "{CGPoint=dd}"}}},
    )
    r(
        b"NSBezierPath",
        b"controlPointBounds",
        {"retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
    )
    r(b"NSBezierPath", b"currentPoint", {"retval": {"type": "{CGPoint=dd}"}})
    r(
        b"NSBezierPath",
        b"curveToPoint:controlPoint1:controlPoint2:",
        {
            "arguments": {
                2: {"type": "{CGPoint=dd}"},
                3: {"type": "{CGPoint=dd}"},
                4: {"type": "{CGPoint=dd}"},
            }
        },
    )
    r(
        b"NSBezierPath",
        b"drawPackedGlyphs:atPoint:",
        {
            "arguments": {
                2: {
                    "c_array_delimited_by_null": True,
                    "type": "^v",
                    "type_modifier": b"n",
                },
                3: {"type": "{CGPoint=dd}"},
            }
        },
    )
    r(
        b"NSBezierPath",
        b"elementAtIndex:associatedPoints:",
        {"arguments": {3: {"type_modifier": b"o", "c_array_of_variable_length": True}}},
    )
    r(
        b"NSBezierPath",
        b"fillRect:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSBezierPath",
        b"getLineDash:count:phase:",
        {
            "arguments": {
                2: {"type_modifier": b"o", "c_array_length_in_arg": 3},
                3: {"type_modifier": b"N"},
                4: {"type_modifier": b"o"},
            }
        },
    )
    r(b"NSBezierPath", b"isEmpty", {"retval": {"type": "Z"}})
    r(b"NSBezierPath", b"lineToPoint:", {"arguments": {2: {"type": "{CGPoint=dd}"}}})
    r(b"NSBezierPath", b"moveToPoint:", {"arguments": {2: {"type": "{CGPoint=dd}"}}})
    r(
        b"NSBezierPath",
        b"relativeCurveToPoint:controlPoint1:controlPoint2:",
        {
            "arguments": {
                2: {"type": "{CGPoint=dd}"},
                3: {"type": "{CGPoint=dd}"},
                4: {"type": "{CGPoint=dd}"},
            }
        },
    )
    r(
        b"NSBezierPath",
        b"relativeLineToPoint:",
        {"arguments": {2: {"type": "{CGPoint=dd}"}}},
    )
    r(
        b"NSBezierPath",
        b"relativeMoveToPoint:",
        {"arguments": {2: {"type": "{CGPoint=dd}"}}},
    )
    r(
        b"NSBezierPath",
        b"setAssociatedPoints:atIndex:",
        {"arguments": {2: {"c_array_of_variable_length": True}, 3: {"type": "q"}}},
    )
    r(b"NSBezierPath", b"setCachesBezierPath:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSBezierPath",
        b"setLineDash:count:phase:",
        {"arguments": {2: {"type_modifier": b"n", "c_array_length_in_arg": 3}}},
    )
    r(
        b"NSBezierPath",
        b"strokeLineFromPoint:toPoint:",
        {"arguments": {2: {"type": "{CGPoint=dd}"}, 3: {"type": "{CGPoint=dd}"}}},
    )
    r(
        b"NSBezierPath",
        b"strokeRect:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(b"NSBitmapImageRep", b"CGImage", {"retval": {"type": "^{CGImage=}"}})
    r(
        b"NSBitmapImageRep",
        b"bitmapData",
        {"retval": {"type": "^v", "c_array_of_variable_length": True}},
    )
    r(b"NSBitmapImageRep", b"canBeCompressedUsing:", {"retval": {"type": "Z"}})
    r(
        b"NSBitmapImageRep",
        b"getBitmapDataPlanes:",
        {"arguments": {2: {"type": "^*", "c_array_of_variable_length": True}}},
    )
    r(
        b"NSBitmapImageRep",
        b"getCompression:factor:",
        {"arguments": {2: {"type_modifier": b"o"}, 3: {"type_modifier": b"o"}}},
    )
    r(
        b"NSBitmapImageRep",
        b"getPixel:atX:y:",
        {"arguments": {2: {"type_modifier": b"o", "c_array_of_variable_length": True}}},
    )
    r(
        b"NSBitmapImageRep",
        b"getTIFFCompressionTypes:count:",
        {
            "arguments": {
                2: {"type": "^^Q", "type_modifier": b"o", "c_array_length_in_arg": 3},
                3: {"type": "^q", "type_modifier": b"o", "c_array_length_in_arg": 3},
            }
        },
    )
    r(
        b"NSBitmapImageRep",
        b"incrementalLoadFromData:complete:",
        {"arguments": {3: {"type": "Z"}}},
    )
    r(
        b"NSBitmapImageRep",
        b"initWithBitmapDataPlanes:pixelsWide:pixelsHigh:bitsPerSample:samplesPerPixel:hasAlpha:isPlanar:colorSpaceName:bitmapFormat:bytesPerRow:bitsPerPixel:",
        {"arguments": {2: {"type": "^*"}, 7: {"type": b"Z"}, 8: {"type": b"Z"}}},
    )
    r(
        b"NSBitmapImageRep",
        b"initWithBitmapDataPlanes:pixelsWide:pixelsHigh:bitsPerSample:samplesPerPixel:hasAlpha:isPlanar:colorSpaceName:bytesPerRow:bitsPerPixel:",
        {"arguments": {2: {"type": "^*"}, 7: {"type": b"Z"}, 8: {"type": b"Z"}}},
    )
    r(
        b"NSBitmapImageRep",
        b"initWithCGImage:",
        {"arguments": {2: {"type": "^{CGImage=}"}}},
    )
    r(
        b"NSBitmapImageRep",
        b"initWithFocusedViewRect:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(b"NSBitmapImageRep", b"isPlanar", {"retval": {"type": "Z"}})
    r(
        b"NSBitmapImageRep",
        b"setPixel:atX:y:",
        {
            "arguments": {
                2: {
                    "type": "^Q",
                    "type_modifier": b"n",
                    "c_array_of_variable_length": True,
                }
            }
        },
    )
    r(b"NSBox", b"borderRect", {"retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}})
    r(b"NSBox", b"contentViewMargins", {"retval": {"type": "{CGSize=dd}"}})
    r(b"NSBox", b"isTransparent", {"retval": {"type": "Z"}})
    r(b"NSBox", b"setContentViewMargins:", {"arguments": {2: {"type": "{CGSize=dd}"}}})
    r(
        b"NSBox",
        b"setFrameFromContentFrame:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(b"NSBox", b"setTransparent:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSBox", b"titleRect", {"retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}})
    r(b"NSBrowser", b"acceptsArrowKeys", {"retval": {"type": "Z"}})
    r(b"NSBrowser", b"allowsBranchSelection", {"retval": {"type": "Z"}})
    r(b"NSBrowser", b"allowsEmptySelection", {"retval": {"type": "Z"}})
    r(b"NSBrowser", b"allowsMultipleSelection", {"retval": {"type": "Z"}})
    r(b"NSBrowser", b"allowsTypeSelect", {"retval": {"type": "Z"}})
    r(b"NSBrowser", b"autohidesScroller", {"retval": {"type": "Z"}})
    r(
        b"NSBrowser",
        b"canDragRowsWithIndexes:inColumn:withEvent:",
        {"retval": {"type": "Z"}},
    )
    r(
        b"NSBrowser",
        b"draggingImageForRowsWithIndexes:inColumn:withEvent:offset:",
        {"arguments": {5: {"type_modifier": b"N"}}},
    )
    r(
        b"NSBrowser",
        b"drawTitleOfColumn:inRect:",
        {"arguments": {3: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSBrowser",
        b"editItemAtIndexPath:withEvent:select:",
        {"arguments": {4: {"type": "Z"}}},
    )
    r(
        b"NSBrowser",
        b"frameOfColumn:",
        {"retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
    )
    r(
        b"NSBrowser",
        b"frameOfInsideOfColumn:",
        {"retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
    )
    r(
        b"NSBrowser",
        b"getRow:column:forPoint:",
        {
            "retval": {"type": "Z"},
            "arguments": {2: {"type_modifier": b"o"}, 3: {"type_modifier": b"o"}},
        },
    )
    r(b"NSBrowser", b"hasHorizontalScroller", {"retval": {"type": "Z"}})
    r(b"NSBrowser", b"isLeafItem:", {"retval": {"type": "Z"}})
    r(b"NSBrowser", b"isLoaded", {"retval": {"type": "Z"}})
    r(b"NSBrowser", b"isTitled", {"retval": {"type": "Z"}})
    r(b"NSBrowser", b"prefersAllColumnUserResizing", {"retval": {"type": "Z"}})
    r(b"NSBrowser", b"reusesColumns", {"retval": {"type": "Z"}})
    r(b"NSBrowser", b"sendAction", {"retval": {"type": "Z"}})
    r(b"NSBrowser", b"sendsActionOnArrowKeys", {"retval": {"type": "Z"}})
    r(b"NSBrowser", b"separatesColumns", {"retval": {"type": "Z"}})
    r(b"NSBrowser", b"setAcceptsArrowKeys:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSBrowser", b"setAllowsBranchSelection:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSBrowser", b"setAllowsEmptySelection:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSBrowser",
        b"setAllowsMultipleSelection:",
        {"retval": {"type": "v"}, "arguments": {2: {"type": "Z"}}},
    )
    r(
        b"NSBrowser",
        b"setAllowsTypeSelect:",
        {"retval": {"type": "v"}, "arguments": {2: {"type": "Z"}}},
    )
    r(b"NSBrowser", b"setAutohidesScroller:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSBrowser", b"setDoubleAction:", {"arguments": {2: {"sel_of_type": b"v@:@"}}})
    r(
        b"NSBrowser",
        b"setDraggingSourceOperationMask:forLocal:",
        {"arguments": {3: {"type": "Z"}}},
    )
    r(b"NSBrowser", b"setHasHorizontalScroller:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSBrowser", b"setPath:", {"retval": {"type": "Z"}})
    r(
        b"NSBrowser",
        b"setPrefersAllColumnUserResizing:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(b"NSBrowser", b"setReusesColumns:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSBrowser", b"setSendsActionOnArrowKeys:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSBrowser", b"setSeparatesColumns:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSBrowser",
        b"setTakesTitleFromPreviousColumn:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(b"NSBrowser", b"setTitled:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSBrowser", b"takesTitleFromPreviousColumn", {"retval": {"type": "Z"}})
    r(
        b"NSBrowser",
        b"titleFrameOfColumn:",
        {"retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
    )
    r(b"NSBrowserCell", b"isLeaf", {"retval": {"type": "Z"}})
    r(b"NSBrowserCell", b"isLoaded", {"retval": {"type": "Z"}})
    r(
        b"NSBrowserCell",
        b"setLeaf:",
        {"retval": {"type": "v"}, "arguments": {2: {"type": "Z"}}},
    )
    r(
        b"NSBrowserCell",
        b"setLoaded:",
        {"retval": {"type": "v"}, "arguments": {2: {"type": "Z"}}},
    )
    r(
        b"NSBundle",
        b"loadNibFile:externalNameTable:withZone:",
        {"retval": {"type": "Z"}, "arguments": {4: {"type": "^{_NSZone=}"}}},
    )
    r(b"NSBundle", b"loadNibNamed:owner:", {"retval": {"type": "Z"}})
    r(
        b"NSBundle",
        b"loadNibNamed:owner:topLevelObjects:",
        {"retval": {"type": "Z"}, "arguments": {4: {"type_modifier": b"o"}}},
    )
    r(b"NSButton", b"allowsMixedState", {"retval": {"type": "Z"}})
    r(
        b"NSButton",
        b"buttonWithImage:target:action:",
        {"arguments": {4: {"sel_of_type": b"v@:@"}}},
    )
    r(
        b"NSButton",
        b"buttonWithTitle:image:target:action:",
        {"arguments": {5: {"sel_of_type": b"v@:@"}}},
    )
    r(
        b"NSButton",
        b"buttonWithTitle:target:action:",
        {"arguments": {4: {"sel_of_type": b"v@:@"}}},
    )
    r(
        b"NSButton",
        b"checkboxWithTitle:target:action:",
        {"arguments": {4: {"sel_of_type": b"v@:@"}}},
    )
    r(
        b"NSButton",
        b"getPeriodicDelay:interval:",
        {"arguments": {2: {"type_modifier": b"o"}, 3: {"type_modifier": b"o"}}},
    )
    r(b"NSButton", b"hasDestructiveAction", {"retval": {"type": b"Z"}})
    r(b"NSButton", b"highlight:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSButton", b"imageHugsTitle", {"retval": {"type": "Z"}})
    r(b"NSButton", b"isBordered", {"retval": {"type": "Z"}})
    r(b"NSButton", b"isSpringLoaded", {"retval": {"type": b"Z"}})
    r(b"NSButton", b"isTransparent", {"retval": {"type": "Z"}})
    r(b"NSButton", b"performKeyEquivalent:", {"retval": {"type": "Z"}})
    r(
        b"NSButton",
        b"radioButtonWithTitle:target:action:",
        {"arguments": {4: {"sel_of_type": b"v@:@"}}},
    )
    r(b"NSButton", b"setAllowsMixedState:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSButton", b"setBordered:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSButton", b"setHasDestructiveAction:", {"arguments": {2: {"type": b"Z"}}})
    r(b"NSButton", b"setImageHugsTitle:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSButton",
        b"setShowsBorderOnlyWhileMouseInside:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(b"NSButton", b"setSpringLoaded:", {"arguments": {2: {"type": b"Z"}}})
    r(b"NSButton", b"setTransparent:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSButton", b"showsBorderOnlyWhileMouseInside", {"retval": {"type": "Z"}})
    r(
        b"NSButtonCell",
        b"drawBezelWithFrame:inView:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSButtonCell",
        b"drawImage:withFrame:inView:",
        {"arguments": {3: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSButtonCell",
        b"drawTitle:withFrame:inView:",
        {
            "retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            "arguments": {3: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
        },
    )
    r(
        b"NSButtonCell",
        b"getPeriodicDelay:interval:",
        {"arguments": {2: {"type_modifier": b"o"}, 3: {"type_modifier": b"o"}}},
    )
    r(b"NSButtonCell", b"imageDimsWhenDisabled", {"retval": {"type": "Z"}})
    r(b"NSButtonCell", b"isOpaque", {"retval": {"type": "Z"}})
    r(b"NSButtonCell", b"isTransparent", {"retval": {"type": "Z"}})
    r(b"NSButtonCell", b"setImageDimsWhenDisabled:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSButtonCell",
        b"setShowsBorderOnlyWhileMouseInside:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(b"NSButtonCell", b"setTransparent:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSButtonCell", b"showsBorderOnlyWhileMouseInside", {"retval": {"type": "Z"}})
    r(
        b"NSButtonTouchBarItem",
        b"buttonTouchBarItemWithIdentifier:image:target:action:",
        {"arguments": {5: {"sel_of_type": b"v@:@"}}},
    )
    r(
        b"NSButtonTouchBarItem",
        b"buttonTouchBarItemWithIdentifier:title:image:target:action:",
        {"arguments": {6: {"sel_of_type": b"v@:@"}}},
    )
    r(
        b"NSButtonTouchBarItem",
        b"buttonTouchBarItemWithIdentifier:title:target:action:",
        {"arguments": {5: {"sel_of_type": b"v@:@"}}},
    )
    r(b"NSButtonTouchBarItem", b"isEnabled", {"retval": {"type": b"Z"}})
    r(b"NSButtonTouchBarItem", b"setEnabled:", {"arguments": {2: {"type": b"Z"}}})
    r(
        b"NSCachedImageRep",
        b"initWithSize:depth:separate:alpha:",
        {"arguments": {2: {"type": "{CGSize=dd}"}, 4: {"type": "Z"}, 5: {"type": "Z"}}},
    )
    r(
        b"NSCachedImageRep",
        b"initWithWindow:rect:",
        {"arguments": {3: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSCachedImageRep",
        b"rect",
        {"retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
    )
    r(b"NSCandidateListTouchBarItem", b"allowsCollapsing", {"retval": {"type": "Z"}})
    r(
        b"NSCandidateListTouchBarItem",
        b"allowsTextInputContextCandidates",
        {"retval": {"type": "Z"}},
    )
    r(
        b"NSCandidateListTouchBarItem",
        b"attributedStringForCandidate",
        {
            "retval": {
                "callable": {
                    "retval": {"type": b"@"},
                    "arguments": {
                        0: {"type": b"^v"},
                        1: {"type": b"@"},
                        2: {"type": b"q"},
                    },
                }
            }
        },
    )
    r(
        b"NSCandidateListTouchBarItem",
        b"isCandidateListVisible",
        {"retval": {"type": "Z"}},
    )
    r(b"NSCandidateListTouchBarItem", b"isCollapsed", {"retval": {"type": "Z"}})
    r(
        b"NSCandidateListTouchBarItem",
        b"setAllowsCollapsing:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(
        b"NSCandidateListTouchBarItem",
        b"setAllowsTextInputContextCandidates:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(
        b"NSCandidateListTouchBarItem",
        b"setAttributedStringForCandidate:",
        {
            "arguments": {
                2: {
                    "callable": {
                        "retval": {"type": b"@"},
                        "arguments": {
                            0: {"type": b"^v"},
                            1: {"type": b"@"},
                            2: {"type": b"q"},
                        },
                    }
                }
            }
        },
    )
    r(
        b"NSCandidateListTouchBarItem",
        b"setCandidateListVisible:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(
        b"NSCandidateListTouchBarItem",
        b"setCollapsed:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(
        b"NSCandidateListTouchBarItem",
        b"updateWithInsertionPointVisibility:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(b"NSCell", b"acceptsFirstResponder", {"retval": {"type": "Z"}})
    r(b"NSCell", b"action", {"retval": {"type": ":", "sel_of_type": b"v@:@"}})
    r(b"NSCell", b"allowsEditingTextAttributes", {"retval": {"type": "Z"}})
    r(b"NSCell", b"allowsMixedState", {"retval": {"type": "Z"}})
    r(b"NSCell", b"allowsUndo", {"retval": {"type": "Z"}})
    r(
        b"NSCell",
        b"calcDrawInfo:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(b"NSCell", b"cellSize", {"retval": {"type": "{CGSize=dd}"}})
    r(
        b"NSCell",
        b"cellSizeForBounds:",
        {
            "retval": {"type": "{CGSize=dd}"},
            "arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
        },
    )
    r(
        b"NSCell",
        b"continueTracking:at:inView:",
        {
            "retval": {"type": "Z"},
            "arguments": {2: {"type": "{CGPoint=dd}"}, 3: {"type": "{CGPoint=dd}"}},
        },
    )
    r(
        b"NSCell",
        b"drawInteriorWithFrame:inView:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSCell",
        b"drawWithExpansionFrame:inView:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSCell",
        b"drawWithFrame:inView:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSCell",
        b"drawingRectForBounds:",
        {
            "retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            "arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
        },
    )
    r(
        b"NSCell",
        b"editWithFrame:inView:editor:delegate:event:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSCell",
        b"expansionFrameWithFrame:inView:",
        {
            "retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            "arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
        },
    )
    r(
        b"NSCell",
        b"getPeriodicDelay:interval:",
        {"arguments": {2: {"type_modifier": b"o"}, 3: {"type_modifier": b"o"}}},
    )
    r(b"NSCell", b"hasValidObjectValue", {"retval": {"type": "Z"}})
    r(
        b"NSCell",
        b"highlight:withFrame:inView:",
        {
            "arguments": {
                2: {"type": "Z"},
                3: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            }
        },
    )
    r(
        b"NSCell",
        b"highlightColorWithFrame:inView:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSCell",
        b"hitTestForEvent:inRect:ofView:",
        {"arguments": {3: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSCell",
        b"imageRectForBounds:",
        {
            "retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            "arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
        },
    )
    r(b"NSCell", b"importsGraphics", {"retval": {"type": "Z"}})
    r(b"NSCell", b"isBezeled", {"retval": {"type": "Z"}})
    r(b"NSCell", b"isBordered", {"retval": {"type": "Z"}})
    r(b"NSCell", b"isContinuous", {"retval": {"type": "Z"}})
    r(b"NSCell", b"isEditable", {"retval": {"type": "Z"}})
    r(b"NSCell", b"isEnabled", {"retval": {"type": "Z"}})
    r(
        b"NSCell",
        b"isEntryAcceptable:",
        {"retval": {"type": "Z"}, "arguments": {2: {"type": "@"}}},
    )
    r(b"NSCell", b"isHighlighted", {"retval": {"type": "Z"}})
    r(b"NSCell", b"isOpaque", {"retval": {"type": "Z"}})
    r(b"NSCell", b"isScrollable", {"retval": {"type": "Z"}})
    r(b"NSCell", b"isSelectable", {"retval": {"type": "Z"}})
    r(
        b"NSCell",
        b"menuForEvent:inRect:ofView:",
        {"arguments": {3: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(b"NSCell", b"prefersTrackingUntilMouseUp", {"retval": {"type": b"Z"}})
    r(b"NSCell", b"refusesFirstResponder", {"retval": {"type": "Z"}})
    r(
        b"NSCell",
        b"resetCursorRect:inView:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSCell",
        b"selectWithFrame:inView:editor:delegate:start:length:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(b"NSCell", b"sendsActionOnEndEditing", {"retval": {"type": "Z"}})
    r(b"NSCell", b"setAction:", {"arguments": {2: {"sel_of_type": b"v@:@"}}})
    r(b"NSCell", b"setAllowsEditingTextAttributes:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSCell", b"setAllowsMixedState:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSCell", b"setAllowsUndo:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSCell",
        b"setAttributedStringValue:",
        {"retval": {"type": "v"}, "arguments": {2: {"type": "@"}}},
    )
    r(b"NSCell", b"setBezeled:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSCell", b"setBordered:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSCell", b"setContinuous:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSCell", b"setEditable:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSCell", b"setEnabled:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSCell",
        b"setFloatingPointFormat:left:right:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(b"NSCell", b"setHighlighted:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSCell", b"setImportsGraphics:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSCell", b"setRefusesFirstResponder:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSCell", b"setScrollable:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSCell", b"setSelectable:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSCell", b"setSendsActionOnEndEditing:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSCell", b"setShowsFirstResponder:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSCell", b"setTruncatesLastVisibleLine:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSCell", b"setUsesSingleLineMode:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSCell", b"setWraps:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSCell", b"showsFirstResponder", {"retval": {"type": "Z"}})
    r(
        b"NSCell",
        b"startTrackingAt:inView:",
        {"retval": {"type": "Z"}, "arguments": {2: {"type": "{CGPoint=dd}"}}},
    )
    r(
        b"NSCell",
        b"stopTracking:at:inView:mouseIsUp:",
        {
            "arguments": {
                2: {"type": "{CGPoint=dd}"},
                3: {"type": "{CGPoint=dd}"},
                5: {"type": "Z"},
            }
        },
    )
    r(
        b"NSCell",
        b"titleRectForBounds:",
        {
            "retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            "arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
        },
    )
    r(
        b"NSCell",
        b"trackMouse:inRect:ofView:untilMouseUp:",
        {
            "retval": {"type": "Z"},
            "arguments": {
                3: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                5: {"type": "Z"},
            },
        },
    )
    r(b"NSCell", b"truncatesLastVisibleLine", {"retval": {"type": "Z"}})
    r(b"NSCell", b"usesSingleLineMode", {"retval": {"type": "Z"}})
    r(b"NSCell", b"wantsNotificationForMarkedText", {"retval": {"type": "Z"}})
    r(b"NSCell", b"wraps", {"retval": {"type": "Z"}})
    r(b"NSClipView", b"automaticallyAdjustsContentInsets", {"retval": {"type": b"Z"}})
    r(b"NSClipView", b"autoscroll:", {"retval": {"type": "Z"}})
    r(b"NSClipView", b"copiesOnScroll", {"retval": {"type": "Z"}})
    r(
        b"NSClipView",
        b"documentRect",
        {"retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
    )
    r(
        b"NSClipView",
        b"documentVisibleRect",
        {"retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
    )
    r(b"NSClipView", b"drawsBackground", {"retval": {"type": "Z"}})
    r(
        b"NSClipView",
        b"onstrainScrollPoint:",
        {
            "retval": {"type": "{CGPoint=dd}"},
            "arguments": {2: {"type": "{CGPoint=dd}"}},
        },
    )
    r(b"NSClipView", b"scrollToPoint:", {"arguments": {2: {"type": "{CGPoint=dd}"}}})
    r(
        b"NSClipView",
        b"setAutomaticallyAdjustsContentInsets:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(b"NSClipView", b"setCopiesOnScroll:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSClipView", b"setDrawsBackground:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSCollectionLayoutAnchor", b"isAbsoluteOffset", {"retval": {"type": b"Z"}})
    r(b"NSCollectionLayoutAnchor", b"isFractionalOffset", {"retval": {"type": b"Z"}})
    r(
        b"NSCollectionLayoutBoundarySupplementaryItem",
        b"extendsBoundary",
        {"retval": {"type": b"Z"}},
    )
    r(
        b"NSCollectionLayoutBoundarySupplementaryItem",
        b"pinToVisibleBounds",
        {"retval": {"type": b"Z"}},
    )
    r(
        b"NSCollectionLayoutBoundarySupplementaryItem",
        b"setExtendsBoundary:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(
        b"NSCollectionLayoutBoundarySupplementaryItem",
        b"setPinToVisibleBounds:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(b"NSCollectionLayoutDimension", b"isAbsolute", {"retval": {"type": b"Z"}})
    r(b"NSCollectionLayoutDimension", b"isEstimated", {"retval": {"type": b"Z"}})
    r(b"NSCollectionLayoutDimension", b"isFractionalHeight", {"retval": {"type": b"Z"}})
    r(b"NSCollectionLayoutDimension", b"isFractionalWidth", {"retval": {"type": b"Z"}})
    r(
        b"NSCollectionLayoutGroup",
        b"customGroupWithLayoutSize:itemProvider:",
        {
            "arguments": {
                3: {
                    "callable": {
                        "retval": {"type": b"@"},
                        "arguments": {0: {"type": b"^v"}, 1: {"type": b"@"}},
                    }
                }
            }
        },
    )
    r(
        b"NSCollectionLayoutSection",
        b"initWithSectionProvider:configuration:",
        {
            "arguments": {
                2: {
                    "callable": {
                        "retval": {"type": b"@"},
                        "arguments": {
                            0: {"type": b"^v"},
                            1: {"type": b"q"},
                            2: {"type": b"@"},
                        },
                    }
                }
            }
        },
    )
    r(
        b"NSCollectionLayoutSection",
        b"setSupplementariesFollowContentInsets:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(
        b"NSCollectionLayoutSection",
        b"setVisibleItemsInvalidationHandler:",
        {
            "arguments": {
                2: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {
                            0: {"type": b"^v"},
                            1: {"type": b"@"},
                            2: {"type": b"{CGPoint=dd}"},
                            3: {"type": b"@"},
                        },
                    }
                }
            }
        },
    )
    r(
        b"NSCollectionLayoutSection",
        b"supplementariesFollowContentInsets",
        {"retval": {"type": b"Z"}},
    )
    r(
        b"NSCollectionLayoutSection",
        b"visibleItemsInvalidationHandler",
        {
            "retval": {
                "callable": {
                    "retval": {"type": b"v"},
                    "arguments": {
                        0: {"type": b"^v"},
                        1: {"type": b"@"},
                        2: {"type": b"{CGPoint=dd}"},
                        3: {"type": b"@"},
                    },
                }
            }
        },
    )
    r(b"NSCollectionLayoutSpacing", b"isFixedSpacing", {"retval": {"type": b"Z"}})
    r(b"NSCollectionLayoutSpacing", b"isFlexibleSpacing", {"retval": {"type": b"Z"}})
    r(b"NSCollectionView", b"allowsEmptySelection", {"retval": {"type": "Z"}})
    r(b"NSCollectionView", b"allowsMultipleSelection", {"retval": {"type": "Z"}})
    r(
        b"NSCollectionView",
        b"backgroundViewScrollsWithContent",
        {"retval": {"type": "Z"}},
    )
    r(
        b"NSCollectionView",
        b"draggingImageForItemsAtIndexPaths:withEvent:offset:",
        {"arguments": {4: {"type_modifier": b"N"}}},
    )
    r(
        b"NSCollectionView",
        b"draggingImageForItemsAtIndexes:withEvent:offset:",
        {"arguments": {4: {"type_modifier": b"N"}}},
    )
    r(
        b"NSCollectionView",
        b"frameForItemAtIndex:",
        {"retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
    )
    r(b"NSCollectionView", b"isFirstResponder", {"retval": {"type": "Z"}})
    r(b"NSCollectionView", b"isSelectable", {"retval": {"type": "Z"}})
    r(b"NSCollectionView", b"maxItemSize", {"retval": {"type": "{CGSize=dd}"}})
    r(b"NSCollectionView", b"minItemSize", {"retval": {"type": "{CGSize=dd}"}})
    r(
        b"NSCollectionView",
        b"performBatchUpdates:completionHandler:",
        {
            "arguments": {
                2: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {0: {"type": b"^v"}},
                    }
                },
                3: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {0: {"type": b"^v"}, 1: {"type": b"Z"}},
                    }
                },
            }
        },
    )
    r(
        b"NSCollectionView",
        b"setAllowsEmptySelection:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(
        b"NSCollectionView",
        b"setAllowsMultipleSelection:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(
        b"NSCollectionView",
        b"setBackgroundViewScrollsWithContent:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(
        b"NSCollectionView",
        b"setDraggingSourceOperationMask:forLocal:",
        {"arguments": {3: {"type": "Z"}}},
    )
    r(
        b"NSCollectionView",
        b"setMaxItemSize:",
        {"arguments": {2: {"type": "{CGSize=dd}"}}},
    )
    r(
        b"NSCollectionView",
        b"setMinItemSize:",
        {"arguments": {2: {"type": "{CGSize=dd}"}}},
    )
    r(b"NSCollectionView", b"setSelectable:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSCollectionViewCompositionalLayout",
        b"initWithSectionProvider:",
        {
            "arguments": {
                2: {
                    "callable": {
                        "retval": {"type": b"@"},
                        "arguments": {
                            0: {"type": b"^v"},
                            1: {"type": b"q"},
                            2: {"type": b"@"},
                        },
                    }
                }
            }
        },
    )
    r(
        b"NSCollectionViewCompositionalLayout",
        b"initWithSectionProvider:configuration:",
        {
            "arguments": {
                2: {
                    "callable": {
                        "retval": {"type": b"@"},
                        "arguments": {
                            0: {"type": b"^v"},
                            1: {"type": b"q"},
                            2: {"type": b"@"},
                        },
                    }
                }
            }
        },
    )
    r(
        b"NSCollectionViewDiffableDataSource",
        b"applySnapshot:animatingDifferences:",
        {"arguments": {3: {"type": b"Z"}}},
    )
    r(
        b"NSCollectionViewDiffableDataSource",
        b"initWithCollectionView:itemProvider:",
        {
            "arguments": {
                3: {
                    "callable": {
                        "retval": {"type": b"@"},
                        "arguments": {
                            0: {"type": b"^v"},
                            1: {"type": b"@"},
                            2: {"type": b"@"},
                            3: {"type": b"q"},
                        },
                    }
                }
            }
        },
    )
    r(
        b"NSCollectionViewDiffableDataSource",
        b"setSupplementaryViewProvider:",
        {
            "arguments": {
                2: {
                    "callable": {
                        "retval": {"type": b"@"},
                        "arguments": {
                            0: {"type": b"^v"},
                            1: {"type": b"@"},
                            2: {"type": b"@"},
                            3: {"type": b"@"},
                        },
                    }
                }
            }
        },
    )
    r(
        b"NSCollectionViewDiffableDataSource",
        b"supplementaryViewProvider",
        {
            "retval": {
                "callable": {
                    "retval": {"type": b"@"},
                    "arguments": {
                        0: {"type": b"^v"},
                        1: {"type": b"@"},
                        2: {"type": b"@"},
                        3: {"type": b"@"},
                    },
                }
            }
        },
    )
    r(
        b"NSCollectionViewFlowLayout",
        b"invalidateFlowLayoutDelegateMetrics",
        {"retval": {"type": "Z"}},
    )
    r(
        b"NSCollectionViewFlowLayout",
        b"sectionAtIndexIsCollapsed:",
        {"retval": {"type": "Z"}},
    )
    r(
        b"NSCollectionViewFlowLayout",
        b"sectionFootersPinToVisibleBounds",
        {"retval": {"type": "Z"}},
    )
    r(
        b"NSCollectionViewFlowLayout",
        b"sectionHeadersPinToVisibleBounds",
        {"retval": {"type": "Z"}},
    )
    r(
        b"NSCollectionViewFlowLayout",
        b"setSectionFootersPinToVisibleBounds:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(
        b"NSCollectionViewFlowLayout",
        b"setSectionHeadersPinToVisibleBounds:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(
        b"NSCollectionViewFlowLayout",
        b"shouldInvalidateLayoutForBoundsChange:",
        {"retval": {"type": "Z"}},
    )
    r(
        b"NSCollectionViewFlowLayoutInvalidationContext",
        b"invalidateFlowLayoutAttributes",
        {"retval": {"type": "Z"}},
    )
    r(
        b"NSCollectionViewFlowLayoutInvalidationContext",
        b"invalidateFlowLayoutDelegateMetrics",
        {"retval": {"type": "Z"}},
    )
    r(
        b"NSCollectionViewFlowLayoutInvalidationContext",
        b"setInvalidateFlowLayoutAttributes:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(
        b"NSCollectionViewFlowLayoutInvalidationContext",
        b"setInvalidateFlowLayoutDelegateMetrics:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(b"NSCollectionViewItem", b"isSelected", {"retval": {"type": "Z"}})
    r(b"NSCollectionViewItem", b"setSelected:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSCollectionViewLayout",
        b"shouldInvalidateLayoutForBoundsChange:",
        {"retval": {"type": "Z"}},
    )
    r(
        b"NSCollectionViewLayout",
        b"shouldInvalidateLayoutForPreferredLayoutAttributes:withOriginalAttributes:",
        {"retval": {"type": "Z"}},
    )
    r(b"NSCollectionViewLayoutAttributes", b"isHidden", {"retval": {"type": "Z"}})
    r(
        b"NSCollectionViewLayoutAttributes",
        b"setHidden:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(
        b"NSCollectionViewLayoutInvalidationContext",
        b"invalidateDataSourceCounts",
        {"retval": {"type": "Z"}},
    )
    r(
        b"NSCollectionViewLayoutInvalidationContext",
        b"invalidateEverything",
        {"retval": {"type": "Z"}},
    )
    r(
        b"NSColor",
        b"colorWithColorSpace:components:count:",
        {"arguments": {3: {"type_modifier": b"n", "c_array_length_in_arg": 4}}},
    )
    r(
        b"NSColor",
        b"colorWithName:dynamicProvider:",
        {
            "arguments": {
                3: {
                    "callable": {
                        "retval": {"type": b"@"},
                        "arguments": {0: {"type": b"^v"}, 1: {"type": b"@"}},
                    }
                }
            }
        },
    )
    r(
        b"NSColor",
        b"drawSwatchInRect:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSColor",
        b"getComponents:",
        {
            "arguments": {
                2: {
                    "type": "^d",
                    "type_modifier": b"o",
                    "c_array_of_variable_length": True,
                }
            }
        },
    )
    r(
        b"NSColor",
        b"getCyan:magenta:yellow:black:alpha:",
        {
            "arguments": {
                2: {"type_modifier": b"o"},
                3: {"type_modifier": b"o"},
                4: {"type_modifier": b"o"},
                5: {"type_modifier": b"o"},
                6: {"type_modifier": b"o"},
            }
        },
    )
    r(
        b"NSColor",
        b"getHue:saturation:brightness:alpha:",
        {
            "arguments": {
                2: {"type_modifier": b"o"},
                3: {"type_modifier": b"o"},
                4: {"type_modifier": b"o"},
                5: {"type_modifier": b"o"},
            }
        },
    )
    r(
        b"NSColor",
        b"getRed:green:blue:alpha:",
        {
            "arguments": {
                2: {"type_modifier": b"o"},
                3: {"type_modifier": b"o"},
                4: {"type_modifier": b"o"},
                5: {"type_modifier": b"o"},
            }
        },
    )
    r(
        b"NSColor",
        b"getWhite:alpha:",
        {"arguments": {2: {"type_modifier": b"o"}, 3: {"type_modifier": b"o"}}},
    )
    r(b"NSColor", b"ignoresAlpha", {"retval": {"type": b"Z"}})
    r(b"NSColor", b"setIgnoresAlpha:", {"arguments": {2: {"type": b"Z"}}})
    r(b"NSColorList", b"isEditable", {"retval": {"type": "Z"}})
    r(b"NSColorList", b"writeToFile:", {"retval": {"type": "Z"}})
    r(
        b"NSColorList",
        b"writeToURL:error:",
        {"retval": {"type": "Z"}, "arguments": {3: {"type_modifier": b"o"}}},
    )
    r(b"NSColorPanel", b"dragColor:withEvent:fromView:", {"retval": {"type": "Z"}})
    r(b"NSColorPanel", b"isContinuous", {"retval": {"type": "Z"}})
    r(b"NSColorPanel", b"setAction:", {"arguments": {2: {"sel_of_type": b"v@:@"}}})
    r(b"NSColorPanel", b"setContinuous:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSColorPanel", b"setShowsAlpha:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSColorPanel", b"sharedColorPanelExists", {"retval": {"type": b"Z"}})
    r(b"NSColorPanel", b"showsAlpha", {"retval": {"type": "Z"}})
    r(b"NSColorPicker", b"minContentSize", {"retval": {"type": "{CGSize=dd}"}})
    r(b"NSColorPickerTouchBarItem", b"isEnabled", {"retval": {"type": "Z"}})
    r(b"NSColorPickerTouchBarItem", b"setEnabled:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSColorPickerTouchBarItem",
        b"setShowsAlpha:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(b"NSColorPickerTouchBarItem", b"showsAlpha", {"retval": {"type": "Z"}})
    r(
        b"NSColorSampler",
        b"showSamplerWithSelectionHandler:",
        {
            "arguments": {
                2: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {0: {"type": b"^v"}, 1: {"type": b"@"}},
                    }
                }
            }
        },
    )
    r(b"NSColorSpace", b"CGColorSpace", {"retval": {"type": "^{CGColorSpace=}"}})
    r(
        b"NSColorSpace",
        b"colorSyncProfile",
        {"retval": {"type": "^{OpaqueCMProfileRef=}"}},
    )
    r(
        b"NSColorSpace",
        b"initWithCGColorSpace:",
        {"arguments": {2: {"type": "^{CGColorSpace=}"}}},
    )
    r(
        b"NSColorSpace",
        b"initWithColorSyncProfile:",
        {"arguments": {2: {"type": "^{OpaqueCMProfileRef=}"}}},
    )
    r(b"NSColorWell", b"activate:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSColorWell",
        b"drawWellInside:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(b"NSColorWell", b"isActive", {"retval": {"type": "Z"}})
    r(b"NSColorWell", b"isBordered", {"retval": {"type": "Z"}})
    r(b"NSColorWell", b"setBordered:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSColorWell", b"setSupportsAlpha:", {"arguments": {2: {"type": b"Z"}}})
    r(b"NSColorWell", b"supportsAlpha", {"retval": {"type": b"Z"}})
    r(b"NSComboBox", b"completes", {"retval": {"type": "Z"}})
    r(b"NSComboBox", b"hasVerticalScroller", {"retval": {"type": "Z"}})
    r(b"NSComboBox", b"intercellSpacing", {"retval": {"type": "{CGSize=dd}"}})
    r(b"NSComboBox", b"isButtonBordered", {"retval": {"type": "Z"}})
    r(b"NSComboBox", b"setButtonBordered:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSComboBox", b"setCompletes:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSComboBox", b"setHasVerticalScroller:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSComboBox",
        b"setIntercellSpacing:",
        {"arguments": {2: {"type": "{CGSize=dd}"}}},
    )
    r(b"NSComboBox", b"setUsesDataSource:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSComboBox", b"usesDataSource", {"retval": {"type": "Z"}})
    r(b"NSComboBoxCell", b"completes", {"retval": {"type": "Z"}})
    r(b"NSComboBoxCell", b"hasVerticalScroller", {"retval": {"type": "Z"}})
    r(b"NSComboBoxCell", b"intercellSpacing", {"retval": {"type": "{CGSize=dd}"}})
    r(b"NSComboBoxCell", b"isButtonBordered", {"retval": {"type": "Z"}})
    r(b"NSComboBoxCell", b"setButtonBordered:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSComboBoxCell", b"setCompletes:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSComboBoxCell", b"setHasVerticalScroller:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSComboBoxCell",
        b"setIntercellSpacing:",
        {"arguments": {2: {"type": "{CGSize=dd}"}}},
    )
    r(b"NSComboBoxCell", b"setUsesDataSource:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSComboBoxCell", b"usesDataSource", {"retval": {"type": "Z"}})
    r(
        b"NSComboButton",
        b"comboButtonWithImage:menu:target:action:",
        {"arguments": {5: {"sel_of_type": b"v@:@"}}},
    )
    r(
        b"NSComboButton",
        b"comboButtonWithTitle:image:menu:target:action:",
        {"arguments": {6: {"sel_of_type": b"v@:@"}}},
    )
    r(
        b"NSComboButton",
        b"comboButtonWithTitle:menu:target:action:",
        {"arguments": {5: {"sel_of_type": b"v@:@"}}},
    )
    r(b"NSControl", b"abortEditing", {"retval": {"type": "Z"}})
    r(b"NSControl", b"action", {"retval": {"type": ":", "sel_of_type": b"v@:@"}})
    r(b"NSControl", b"allowsExpansionToolTips", {"retval": {"type": b"Z"}})
    r(b"NSControl", b"ignoresMultiClick", {"retval": {"type": "Z"}})
    r(
        b"NSControl",
        b"initWithFrame:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(b"NSControl", b"isContinuous", {"retval": {"type": "Z"}})
    r(b"NSControl", b"isEnabled", {"retval": {"type": "Z"}})
    r(b"NSControl", b"isHighlighted", {"retval": {"type": b"Z"}})
    r(b"NSControl", b"refusesFirstResponder", {"retval": {"type": "Z"}})
    r(
        b"NSControl",
        b"sendAction:to:",
        {"retval": {"type": "Z"}, "arguments": {2: {"sel_of_type": b"v@:@"}}},
    )
    r(b"NSControl", b"setAction:", {"arguments": {2: {"sel_of_type": b"v@:@"}}})
    r(b"NSControl", b"setAllowsExpansionToolTips:", {"arguments": {2: {"type": b"Z"}}})
    r(b"NSControl", b"setContinuous:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSControl", b"setEnabled:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSControl",
        b"setFloatingPointFormat:left:right:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(b"NSControl", b"setHighlighted:", {"arguments": {2: {"type": b"Z"}}})
    r(b"NSControl", b"setIgnoresMultiClick:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSControl", b"setRefusesFirstResponder:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSControl", b"setUsesSingleLineMode:", {"arguments": {2: {"type": b"Z"}}})
    r(b"NSControl", b"usesSingleLineMode", {"retval": {"type": b"Z"}})
    r(b"NSController", b"commitEditing", {"retval": {"type": "Z"}})
    r(
        b"NSController",
        b"commitEditingWithDelegate:didCommitSelector:contextInfo:",
        {"arguments": {3: {"type": ":", "sel_of_type": b"v@:@Z^v"}, 4: {"type": "^v"}}},
    )
    r(b"NSController", b"isEditing", {"retval": {"type": "Z"}})
    r(b"NSCursor", b"hotSpot", {"retval": {"type": "{CGPoint=dd}"}})
    r(
        b"NSCursor",
        b"initWithImage:foregroundColorHint:backgroundColorHint:hotSpot:",
        {"arguments": {5: {"type": "{CGPoint=dd}"}}},
    )
    r(
        b"NSCursor",
        b"initWithImage:hotSpot:",
        {"arguments": {3: {"type": "{CGPoint=dd}"}}},
    )
    r(b"NSCursor", b"isSetOnMouseEntered", {"retval": {"type": "Z"}})
    r(b"NSCursor", b"isSetOnMouseExited", {"retval": {"type": "Z"}})
    r(b"NSCursor", b"setHiddenUntilMouseMoves:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSCursor", b"setOnMouseEntered:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSCursor", b"setOnMouseExited:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSCustomImageRep",
        b"drawingHandler",
        {
            "retval": {
                "callable": {
                    "retval": {"type": b"Z"},
                    "arguments": {
                        0: {"type": b"^v"},
                        1: {"type": b"{CGRect={CGPoint=dd}{CGSize=dd}}"},
                    },
                }
            }
        },
    )
    r(
        b"NSCustomImageRep",
        b"initWithDrawSelector:delegate:",
        {"arguments": {2: {"sel_of_type": b"v@:@"}}},
    )
    r(
        b"NSCustomImageRep",
        b"initWithSize:flipped:drawingHandler:",
        {
            "arguments": {
                3: {"type": b"Z"},
                4: {
                    "callable": {
                        "retval": {"type": b"Z"},
                        "arguments": {
                            0: {"type": b"^v"},
                            1: {"type": b"{CGRect={CGPoint=dd}{CGSize=dd}}"},
                        },
                    }
                },
            }
        },
    )
    r(b"NSDatePicker", b"drawsBackground", {"retval": {"type": "Z"}})
    r(b"NSDatePicker", b"isBezeled", {"retval": {"type": "Z"}})
    r(b"NSDatePicker", b"isBordered", {"retval": {"type": "Z"}})
    r(b"NSDatePicker", b"presentsCalendarOverlay", {"retval": {"type": "Z"}})
    r(b"NSDatePicker", b"setBezeled:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSDatePicker", b"setBordered:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSDatePicker", b"setDrawsBackground:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSDatePicker",
        b"setPresentsCalendarOverlay:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(b"NSDatePickerCell", b"drawsBackground", {"retval": {"type": "Z"}})
    r(b"NSDatePickerCell", b"setDrawsBackground:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSDictionaryControllerKeyValuePair",
        b"isExplicitlyIncluded",
        {"retval": {"type": b"Z"}},
    )
    r(
        b"NSDockTile",
        b"performActivityWithSynchronousWaiting:usingBlock:",
        {
            "arguments": {
                3: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {0: {"type": b"^v"}},
                    }
                }
            }
        },
    )
    r(b"NSDockTile", b"setShowsApplicationBadge:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSDockTile", b"showsApplicationBadge", {"retval": {"type": "Z"}})
    r(b"NSDockTile", b"size", {"retval": {"type": "{CGSize=dd}"}})
    r(
        b"NSDocument",
        b"accommodatePresentedItemDeletionWithCompletionHandler:",
        {
            "arguments": {
                2: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {0: {"type": b"^v"}, 1: {"type": b"@"}},
                    }
                }
            }
        },
    )
    r(b"NSDocument", b"allowsDocumentSharing", {"retval": {"type": "Z"}})
    r(
        b"NSDocument",
        b"autosaveDocumentWithDelegate:didAutosaveSelector:contextInfo:",
        {"arguments": {3: {"sel_of_type": b"v@:@Z^v"}, 4: {"type": "^v"}}},
    )
    r(
        b"NSDocument",
        b"autosaveWithImplicitCancellability:completionHandler:",
        {
            "arguments": {
                2: {"type": b"Z"},
                3: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {0: {"type": b"^v"}, 1: {"type": b"@"}},
                    }
                },
            }
        },
    )
    r(b"NSDocument", b"autosavesDrafts", {"retval": {"type": b"Z"}})
    r(b"NSDocument", b"autosavesInPlace", {"retval": {"type": b"Z"}})
    r(b"NSDocument", b"autosavingIsImplicitlyCancellable", {"retval": {"type": b"Z"}})
    r(
        b"NSDocument",
        b"canAsynchronouslyWriteToURL:ofType:forSaveOperation:",
        {"retval": {"type": b"Z"}},
    )
    r(
        b"NSDocument",
        b"canCloseDocumentWithDelegate:shouldCloseSelector:contextInfo:",
        {"arguments": {3: {"sel_of_type": b"v@:@Z^v"}, 4: {"type": "^v"}}},
    )
    r(b"NSDocument", b"canConcurrentlyReadDocumentsOfType:", {"retval": {"type": "Z"}})
    r(
        b"NSDocument",
        b"checkAutosavingSafetyAndReturnError:",
        {"retval": {"type": b"Z"}, "arguments": {2: {"type_modifier": b"o"}}},
    )
    r(
        b"NSDocument",
        b"continueActivityUsingBlock:",
        {
            "arguments": {
                2: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {0: {"type": b"^v"}},
                    }
                }
            }
        },
    )
    r(
        b"NSDocument",
        b"continueAsynchronousWorkOnMainThreadUsingBlock:",
        {
            "arguments": {
                2: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {0: {"type": b"^v"}},
                    }
                }
            }
        },
    )
    r(b"NSDocument", b"dataOfType:error:", {"arguments": {3: {"type_modifier": b"o"}}})
    r(
        b"NSDocument",
        b"duplicateAndReturnError:",
        {"arguments": {2: {"type_modifier": b"o"}}},
    )
    r(
        b"NSDocument",
        b"duplicateDocumentWithDelegate:didDuplicateSelector:contextInfo:",
        {"arguments": {3: {"sel_of_type": b"v@Z^v"}, 4: {"type": "^v"}}},
    )
    r(
        b"NSDocument",
        b"fileAttributesToWriteToURL:ofType:forSaveOperation:originalContentsURL:error:",
        {"arguments": {6: {"type_modifier": b"o"}}},
    )
    r(
        b"NSDocument",
        b"fileNameExtensionWasHiddenInLastRunSavePanel",
        {"retval": {"type": "Z"}},
    )
    r(
        b"NSDocument",
        b"fileWrapperOfType:error:",
        {"arguments": {3: {"type_modifier": b"o"}}},
    )
    r(b"NSDocument", b"hasUnautosavedChanges", {"retval": {"type": "Z"}})
    r(b"NSDocument", b"hasUndoManager", {"retval": {"type": "Z"}})
    r(
        b"NSDocument",
        b"initForURL:withContentsOfURL:ofType:error:",
        {"arguments": {5: {"type_modifier": b"o"}}},
    )
    r(
        b"NSDocument",
        b"initWithContentsOfURL:ofType:error:",
        {"arguments": {4: {"type_modifier": b"o"}}},
    )
    r(
        b"NSDocument",
        b"initWithType:error:",
        {"arguments": {3: {"type_modifier": b"o"}}},
    )
    r(b"NSDocument", b"isBrowsingVersions", {"retval": {"type": "Z"}})
    r(b"NSDocument", b"isDocumentEdited", {"retval": {"type": "Z"}})
    r(b"NSDocument", b"isDraft", {"retval": {"type": b"Z"}})
    r(b"NSDocument", b"isEntireFileLoaded", {"retval": {"type": b"Z"}})
    r(b"NSDocument", b"isInViewingMode", {"retval": {"type": b"Z"}})
    r(b"NSDocument", b"isLocked", {"retval": {"type": b"Z"}})
    r(b"NSDocument", b"isNativeType:", {"retval": {"type": "Z"}})
    r(b"NSDocument", b"keepBackupFile", {"retval": {"type": "Z"}})
    r(b"NSDocument", b"loadDataRepresentation:ofType:", {"retval": {"type": "Z"}})
    r(
        b"NSDocument",
        b"loadFileWrapperRepresentation:ofType:",
        {"retval": {"type": "Z"}},
    )
    r(
        b"NSDocument",
        b"lockDocumentWithCompletionHandler:",
        {
            "arguments": {
                2: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {0: {"type": b"^v"}, 1: {"type": b"Z"}},
                    }
                }
            }
        },
    )
    r(
        b"NSDocument",
        b"lockWithCompletionHandler:",
        {
            "arguments": {
                2: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {0: {"type": b"^v"}, 1: {"type": b"@"}},
                    }
                }
            }
        },
    )
    r(
        b"NSDocument",
        b"moveDocumentWithCompletionHandler:",
        {
            "arguments": {
                2: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {0: {"type": b"^v"}, 1: {"type": b"Z"}},
                    }
                }
            }
        },
    )
    r(
        b"NSDocument",
        b"moveToURL:completionHandler:",
        {
            "arguments": {
                3: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {0: {"type": b"^v"}, 1: {"type": b"Z"}},
                    }
                }
            }
        },
    )
    r(
        b"NSDocument",
        b"performActivityWithSynchronousWaiting:usingBlock:",
        {
            "arguments": {
                2: {"type": b"Z"},
                3: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {0: {"type": b"^v"}},
                    }
                },
            }
        },
    )
    r(
        b"NSDocument",
        b"performAsynchronousFileAccessUsingBlock:",
        {
            "arguments": {
                2: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {
                            0: {"type": b"^v"},
                            1: {
                                "callable": {
                                    "retval": {"type": "v"},
                                    "arguments": {0: {"type": "^v"}},
                                },
                                "type": b"@?",
                            },
                        },
                    }
                }
            }
        },
    )
    r(
        b"NSDocument",
        b"performSynchronousFileAccessUsingBlock:",
        {
            "arguments": {
                2: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {0: {"type": b"^v"}},
                    }
                }
            }
        },
    )
    r(b"NSDocument", b"preparePageLayout:", {"retval": {"type": "Z"}})
    r(b"NSDocument", b"prepareSavePanel:", {"retval": {"type": "Z"}})
    r(b"NSDocument", b"presentError:", {"retval": {"type": "Z"}})
    r(
        b"NSDocument",
        b"presentError:modalForWindow:delegate:didPresentSelector:contextInfo:",
        {"arguments": {5: {"sel_of_type": b"v@:Z^v"}, 6: {"type": "^v"}}},
    )
    r(b"NSDocument", b"preservesVersions", {"retval": {"type": b"Z"}})
    r(
        b"NSDocument",
        b"printDocumentWithSettings:showPrintPanel:delegate:didPrintSelector:contextInfo:",
        {
            "arguments": {
                3: {"type": "Z"},
                5: {"sel_of_type": b"v@:@Z^v"},
                6: {"type": "^v"},
            }
        },
    )
    r(
        b"NSDocument",
        b"printOperationWithSettings:error:",
        {"arguments": {3: {"type_modifier": b"o"}}},
    )
    r(b"NSDocument", b"printShowingPrintPanel:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSDocument",
        b"readFromData:ofType:error:",
        {"retval": {"type": "Z"}, "arguments": {4: {"type_modifier": b"o"}}},
    )
    r(b"NSDocument", b"readFromFile:ofType:", {"retval": {"type": "Z"}})
    r(
        b"NSDocument",
        b"readFromFileWrapper:ofType:error:",
        {"retval": {"type": "Z"}, "arguments": {4: {"type_modifier": b"o"}}},
    )
    r(b"NSDocument", b"readFromURL:ofType:", {"retval": {"type": "Z"}})
    r(
        b"NSDocument",
        b"readFromURL:ofType:error:",
        {"retval": {"type": "Z"}, "arguments": {4: {"type_modifier": b"o"}}},
    )
    r(
        b"NSDocument",
        b"relinquishPresentedItemToReader:",
        {
            "arguments": {
                2: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {
                            0: {"type": b"^v"},
                            1: {
                                "callable": {
                                    "retval": {"type": "v"},
                                    "arguments": {0: {"type": "^v"}},
                                },
                                "type": b"@?",
                            },
                        },
                    }
                }
            }
        },
    )
    r(
        b"NSDocument",
        b"relinquishPresentedItemToWriter:",
        {
            "arguments": {
                2: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {
                            0: {"type": b"^v"},
                            1: {
                                "callable": {
                                    "retval": {"type": "v"},
                                    "arguments": {0: {"type": "^v"}},
                                },
                                "type": b"@?",
                            },
                        },
                    }
                }
            }
        },
    )
    r(
        b"NSDocument",
        b"restoreDocumentWindowWithIdentifier:state:completionHandler:",
        {
            "arguments": {
                4: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {
                            0: {"type": b"^v"},
                            1: {"type": b"@"},
                            2: {"type": b"@"},
                        },
                    }
                }
            }
        },
    )
    r(
        b"NSDocument",
        b"revertToContentsOfURL:ofType:error:",
        {"retval": {"type": "Z"}, "arguments": {4: {"type_modifier": b"o"}}},
    )
    r(b"NSDocument", b"revertToSavedFromFile:ofType:", {"retval": {"type": "Z"}})
    r(b"NSDocument", b"revertToSavedFromURL:ofType:", {"retval": {"type": "Z"}})
    r(
        b"NSDocument",
        b"runModalPageLayoutWithPrintInfo:delegate:didRunSelector:contextInfo:",
        {"arguments": {4: {"sel_of_type": b"v@:@Z^v"}, 5: {"type": "^v"}}},
    )
    r(
        b"NSDocument",
        b"runModalPrintOperation:delegate:didRunSelector:contextInfo:",
        {"arguments": {4: {"sel_of_type": b"v@:@Z^v"}, 5: {"type": "^v"}}},
    )
    r(
        b"NSDocument",
        b"runModalSavePanelForSaveOperation:delegate:didSaveSelector:contextInfo:",
        {"arguments": {4: {"sel_of_type": b"v@:@Z^v"}, 5: {"type": "^v"}}},
    )
    r(
        b"NSDocument",
        b"saveDocumentWithDelegate:didSaveSelector:contextInfo:",
        {"arguments": {3: {"sel_of_type": b"v@:@Z^v"}, 4: {"type": "^v"}}},
    )
    r(
        b"NSDocument",
        b"savePresentedItemChangesWithCompletionHandler:",
        {
            "arguments": {
                2: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {0: {"type": b"^v"}, 1: {"type": b"@"}},
                    }
                }
            }
        },
    )
    r(
        b"NSDocument",
        b"saveToFile:saveOperation:delegate:didSaveSelector:contextInfo:",
        {"arguments": {5: {"sel_of_type": b"v@:@Z^v"}, 6: {"type": "^v"}}},
    )
    r(
        b"NSDocument",
        b"saveToURL:ofType:forSaveOperation:completionHandler:",
        {
            "arguments": {
                5: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {0: {"type": b"^v"}, 1: {"type": b"@"}},
                    }
                }
            }
        },
    )
    r(
        b"NSDocument",
        b"saveToURL:ofType:forSaveOperation:delegate:didSaveSelector:contextInfo:",
        {"arguments": {6: {"sel_of_type": b"v@:@Z^v"}, 7: {"type": "^v"}}},
    )
    r(
        b"NSDocument",
        b"saveToURL:ofType:forSaveOperation:error:",
        {"retval": {"type": "Z"}, "arguments": {5: {"type_modifier": b"o"}}},
    )
    r(b"NSDocument", b"setDraft:", {"arguments": {2: {"type": b"Z"}}})
    r(b"NSDocument", b"setHasUndoManager:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSDocument",
        b"shareDocumentWithSharingService:completionHandler:",
        {
            "arguments": {
                3: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {0: {"type": b"^v"}, 1: {"type": b"Z"}},
                    }
                }
            }
        },
    )
    r(b"NSDocument", b"shouldChangePrintInfo:", {"retval": {"type": "Z"}})
    r(
        b"NSDocument",
        b"shouldCloseWindowController:delegate:shouldCloseSelector:contextInfo:",
        {"arguments": {4: {"sel_of_type": b"v@:@Z^v"}, 5: {"type": "^v"}}},
    )
    r(b"NSDocument", b"shouldRunSavePanelWithAccessoryView", {"retval": {"type": "Z"}})
    r(
        b"NSDocument",
        b"stopBrowsingVersionsWithCompletionHandler:",
        {
            "arguments": {
                2: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {0: {"type": b"^v"}},
                    }
                }
            }
        },
    )
    r(
        b"NSDocument",
        b"unlockDocumentWithCompletionHandler:",
        {
            "arguments": {
                2: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {0: {"type": b"^v"}, 1: {"type": b"Z"}},
                    }
                }
            }
        },
    )
    r(
        b"NSDocument",
        b"unlockWithCompletionHandler:",
        {
            "arguments": {
                2: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {0: {"type": b"^v"}, 1: {"type": b"@"}},
                    }
                }
            }
        },
    )
    r(b"NSDocument", b"usesUbiquitousStorage", {"retval": {"type": b"Z"}})
    r(b"NSDocument", b"validateUserInterfaceItem:", {"retval": {"type": "Z"}})
    r(
        b"NSDocument",
        b"writeSafelyToURL:ofType:forSaveOperation:error:",
        {"retval": {"type": "Z"}, "arguments": {5: {"type_modifier": b"o"}}},
    )
    r(b"NSDocument", b"writeToFile:ofType:", {"retval": {"type": "Z"}})
    r(
        b"NSDocument",
        b"writeToFile:ofType:originalFile:saveOperation:",
        {"retval": {"type": "Z"}},
    )
    r(b"NSDocument", b"writeToURL:ofType:", {"retval": {"type": "Z"}})
    r(
        b"NSDocument",
        b"writeToURL:ofType:error:",
        {"retval": {"type": "Z"}, "arguments": {4: {"type_modifier": b"o"}}},
    )
    r(
        b"NSDocument",
        b"writeToURL:ofType:forSaveOperation:originalContentsURL:error:",
        {"retval": {"type": "Z"}, "arguments": {6: {"type_modifier": b"o"}}},
    )
    r(
        b"NSDocument",
        b"writeWithBackupToFile:ofType:saveOperation:",
        {"retval": {"type": "Z"}},
    )
    r(b"NSDocumentController", b"allowsAutomaticShareMenu", {"retval": {"type": "Z"}})
    r(
        b"NSDocumentController",
        b"beginOpenPanel:forTypes:completionHandler:",
        {
            "arguments": {
                4: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {0: {"type": b"^v"}, 1: {"type": b"q"}},
                    }
                }
            }
        },
    )
    r(
        b"NSDocumentController",
        b"beginOpenPanelWithCompletionHandler:",
        {
            "arguments": {
                2: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {0: {"type": b"^v"}, 1: {"type": b"@"}},
                    }
                }
            }
        },
    )
    r(
        b"NSDocumentController",
        b"closeAllDocumentsWithDelegate:didCloseAllSelector:contextInfo:",
        {"arguments": {3: {"sel_of_type": b"v@:@Z^v"}, 4: {"type": "^v"}}},
    )
    r(
        b"NSDocumentController",
        b"duplicateDocumentWithContentsOfURL:copying:displayName:error:",
        {"arguments": {3: {"type": b"Z"}, 5: {"type_modifier": b"o"}}},
    )
    r(b"NSDocumentController", b"hasEditedDocuments", {"retval": {"type": "Z"}})
    r(
        b"NSDocumentController",
        b"makeDocumentForURL:withContentsOfURL:ofType:error:",
        {"arguments": {5: {"type_modifier": b"o"}}},
    )
    r(
        b"NSDocumentController",
        b"makeDocumentWithContentsOfURL:ofType:error:",
        {"arguments": {4: {"type_modifier": b"o"}}},
    )
    r(
        b"NSDocumentController",
        b"makeUntitledDocumentOfType:error:",
        {"arguments": {3: {"type_modifier": b"o"}}},
    )
    r(
        b"NSDocumentController",
        b"openDocumentWithContentsOfFile:display:",
        {"arguments": {3: {"type": "Z"}}},
    )
    r(
        b"NSDocumentController",
        b"openDocumentWithContentsOfURL:display:",
        {"arguments": {3: {"type": "Z"}}},
    )
    r(
        b"NSDocumentController",
        b"openDocumentWithContentsOfURL:display:completionHandler:",
        {
            "arguments": {
                3: {"type": b"Z"},
                4: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {0: {"type": b"^v"}, 1: {"type": b"@"}},
                    }
                },
            }
        },
    )
    r(
        b"NSDocumentController",
        b"openDocumentWithContentsOfURL:display:error:",
        {"arguments": {3: {"type": "Z"}, 4: {"type_modifier": b"o"}}},
    )
    r(
        b"NSDocumentController",
        b"openUntitledDocumentAndDisplay:error:",
        {"arguments": {2: {"type": "Z"}, 3: {"type_modifier": b"o"}}},
    )
    r(
        b"NSDocumentController",
        b"openUntitledDocumentOfType:display:",
        {"arguments": {3: {"type": "Z"}}},
    )
    r(b"NSDocumentController", b"presentError:", {"retval": {"type": "Z"}})
    r(
        b"NSDocumentController",
        b"presentError:modalForWindow:delegate:didPresentSelector:contextInfo:",
        {"arguments": {5: {"sel_of_type": b"v@:Z^v"}, 6: {"type": "^v"}}},
    )
    r(
        b"NSDocumentController",
        b"reopenDocumentForURL:withContentsOfURL:display:completionHandler:",
        {
            "arguments": {
                4: {"type": b"Z"},
                5: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {
                            0: {"type": b"^v"},
                            1: {"type": b"@"},
                            2: {"type": b"Z"},
                            3: {"type": b"@"},
                        },
                    }
                },
            }
        },
    )
    r(
        b"NSDocumentController",
        b"reopenDocumentForURL:withContentsOfURL:error:",
        {"retval": {"type": "Z"}, "arguments": {4: {"type_modifier": b"o"}}},
    )
    r(
        b"NSDocumentController",
        b"reviewUnsavedDocumentsWithAlertTitle:cancellable:delegate:didReviewAllSelector:contextInfo:",
        {
            "arguments": {
                3: {"type": "Z"},
                5: {"sel_of_type": b"v@:@Z^v"},
                6: {"type": "^v"},
            }
        },
    )
    r(
        b"NSDocumentController",
        b"setAllowsAutomaticShareMenu:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(b"NSDocumentController", b"setShouldCreateUI:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSDocumentController", b"shouldCreateUI", {"retval": {"type": "Z"}})
    r(
        b"NSDocumentController",
        b"typeForContentsOfURL:error:",
        {"arguments": {3: {"type_modifier": b"o"}}},
    )
    r(b"NSDocumentController", b"validateUserInterfaceItem:", {"retval": {"type": "Z"}})
    r(
        b"NSDraggingItem",
        b"imageComponentsProvider",
        {
            "retval": {
                "callable": {
                    "retval": {"type": b"@"},
                    "arguments": {0: {"type": b"^v"}},
                }
            }
        },
    )
    r(
        b"NSDraggingItem",
        b"setImageComponentsProvider:",
        {
            "arguments": {
                2: {
                    "callable": {
                        "retval": {"type": b"@"},
                        "arguments": {0: {"type": b"^v"}},
                    }
                }
            }
        },
    )
    r(
        b"NSDraggingSession",
        b"animatesToStartingPositionsOnCancelOrFail",
        {"retval": {"type": b"Z"}},
    )
    r(
        b"NSDraggingSession",
        b"enumerateDraggingItemsWithOptions:forView:classes:searchOptions:usingBlock:",
        {
            "arguments": {
                6: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {
                            0: {"type": b"^v"},
                            1: {"type": b"@"},
                            2: {"type": b"q"},
                            3: {"type": b"o^Z"},
                        },
                    }
                }
            }
        },
    )
    r(
        b"NSDraggingSession",
        b"setAnimatesToStartingPositionsOnCancelOrFail:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(b"NSDrawer", b"contentSize", {"retval": {"type": "{CGSize=dd}"}})
    r(
        b"NSDrawer",
        b"initWithContentSize:preferredEdge:",
        {"arguments": {2: {"type": "{CGSize=dd}"}}},
    )
    r(b"NSDrawer", b"maxContentSize", {"retval": {"type": "{CGSize=dd}"}})
    r(b"NSDrawer", b"minContentSize", {"retval": {"type": "{CGSize=dd}"}})
    r(b"NSDrawer", b"setContentSize:", {"arguments": {2: {"type": "{CGSize=dd}"}}})
    r(b"NSDrawer", b"setMaxContentSize:", {"arguments": {2: {"type": "{CGSize=dd}"}}})
    r(b"NSDrawer", b"setMinContentSize:", {"arguments": {2: {"type": "{CGSize=dd}"}}})
    r(
        b"NSEPSImageRep",
        b"boundingBox",
        {"retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
    )
    r(b"NSEvent", b"CGEvent", {"retval": {"type": "^{__CGEvent=}"}})
    r(
        b"NSEvent",
        b"addGlobalMonitorForEventsMatchingMask:handler:",
        {
            "arguments": {
                3: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {0: {"type": b"^v"}, 1: {"type": b"@"}},
                    }
                }
            }
        },
    )
    r(
        b"NSEvent",
        b"addLocalMonitorForEventsMatchingMask:handler:",
        {
            "arguments": {
                3: {
                    "callable": {
                        "retval": {"type": b"@"},
                        "arguments": {0: {"type": b"^v"}, 1: {"type": b"@"}},
                    }
                }
            }
        },
    )
    r(
        b"NSEvent",
        b"enterExitEventWithType:location:modifierFlags:timestamp:windowNumber:context:eventNumber:trackingNumber:userData:",
        {"arguments": {3: {"type": "{CGPoint=dd}"}, 10: {"type": "^v"}}},
    )
    r(b"NSEvent", b"eventRef", {"retval": {"type": "r^{OpaqueEventRef=}"}})
    r(b"NSEvent", b"eventWithCGEvent:", {"arguments": {2: {"type": "^{__CGEvent=}"}}})
    r(
        b"NSEvent",
        b"eventWithEventRef:",
        {"arguments": {2: {"type": "^{OpaqueEventRef=}"}}},
    )
    r(b"NSEvent", b"hasPreciseScrollingDeltas", {"retval": {"type": b"Z"}})
    r(b"NSEvent", b"isARepeat", {"retval": {"type": "Z"}})
    r(b"NSEvent", b"isDirectionInvertedFromDevice", {"retval": {"type": b"Z"}})
    r(b"NSEvent", b"isEnteringProximity", {"retval": {"type": "Z"}})
    r(b"NSEvent", b"isMouseCoalescingEnabled", {"retval": {"type": "Z"}})
    r(b"NSEvent", b"isSwipeTrackingFromScrollEventsEnabled", {"retval": {"type": b"Z"}})
    r(
        b"NSEvent",
        b"keyEventWithType:location:modifierFlags:timestamp:windowNumber:context:characters:charactersIgnoringModifiers:isARepeat:keyCode:",
        {"arguments": {3: {"type": "{CGPoint=dd}"}, 10: {"type": "Z"}}},
    )
    r(b"NSEvent", b"locationInWindow", {"retval": {"type": "{CGPoint=dd}"}})
    r(
        b"NSEvent",
        b"mouseEventWithType:location:modifierFlags:timestamp:windowNumber:context:eventNumber:clickCount:pressure:",
        {"arguments": {3: {"type": "{CGPoint=dd}"}}},
    )
    r(b"NSEvent", b"mouseLocation", {"retval": {"type": "{CGPoint=dd}"}})
    r(
        b"NSEvent",
        b"otherEventWithType:location:modifierFlags:timestamp:windowNumber:context:subtype:data1:data2:",
        {"arguments": {3: {"type": "{CGPoint=dd}"}}},
    )
    r(b"NSEvent", b"setMouseCoalescingEnabled:", {"arguments": {2: {"type": b"Z"}}})
    r(b"NSEvent", b"tilt", {"retval": {"type": "{CGPoint=dd}"}})
    r(
        b"NSEvent",
        b"trackSwipeEventWithOptions:dampenAmountThresholdMin:max:usingHandler:",
        {
            "arguments": {
                5: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {
                            0: {"type": b"^v"},
                            1: {"type": b"d"},
                            2: {"type": b"Q"},
                            3: {"type": b"Z"},
                            4: {"type": b"o^Z"},
                        },
                    }
                }
            }
        },
    )
    r(b"NSEvent", b"userData", {"retval": {"type": "^v"}})
    r(
        b"NSFilePromiseReceiver",
        b"receivePromisedFilesAtDestination:options:operationQueue:reader:",
        {
            "arguments": {
                5: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {
                            0: {"type": b"^v"},
                            1: {"type": b"@"},
                            2: {"type": b"@"},
                        },
                    }
                }
            }
        },
    )
    r(
        b"NSFileWrapper",
        b"initWithURL:options:error:",
        {"arguments": {4: {"type_modifier": b"o"}}},
    )
    r(b"NSFileWrapper", b"isDirectory", {"retval": {"type": "Z"}})
    r(b"NSFileWrapper", b"isRegularFile", {"retval": {"type": "Z"}})
    r(b"NSFileWrapper", b"isSymbolicLink", {"retval": {"type": "Z"}})
    r(b"NSFileWrapper", b"matchesContentsOfURL:", {"retval": {"type": "Z"}})
    r(b"NSFileWrapper", b"needsToBeUpdatedFromPath:", {"retval": {"type": "Z"}})
    r(
        b"NSFileWrapper",
        b"readFromURL:options:error:",
        {"retval": {"type": "Z"}, "arguments": {4: {"type_modifier": b"o"}}},
    )
    r(b"NSFileWrapper", b"updateFromPath:", {"retval": {"type": "Z"}})
    r(
        b"NSFileWrapper",
        b"writeToFile:atomically:updateFilenames:",
        {"retval": {"type": "Z"}, "arguments": {3: {"type": "Z"}, 4: {"type": "Z"}}},
    )
    r(
        b"NSFileWrapper",
        b"writeToURL:options:originalContentsURL:error:",
        {"retval": {"type": "Z"}, "arguments": {5: {"type_modifier": b"o"}}},
    )
    r(b"NSFont", b"advancementForGlyph:", {"retval": {"type": "{CGSize=dd}"}})
    r(
        b"NSFont",
        b"boundingRectForFont",
        {"retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
    )
    r(
        b"NSFont",
        b"boundingRectForGlyph:",
        {"retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
    )
    r(
        b"NSFont",
        b"fontWithName:matrix:",
        {"arguments": {3: {"c_array_of_fixed_length": 6, "type_modifier": b"n"}}},
    )
    r(
        b"NSFont",
        b"getAdvancements:forCGGlyphs:count:",
        {
            "arguments": {
                2: {"type_modifier": b"o", "c_array_length_in_arg": 4},
                3: {"type_modifier": b"n", "c_array_length_in_arg": 4},
            }
        },
    )
    r(
        b"NSFont",
        b"getAdvancements:forGlyphs:count:",
        {
            "arguments": {
                2: {"type_modifier": b"o", "c_array_length_in_arg": 4},
                3: {"type_modifier": b"n", "c_array_length_in_arg": 4},
            }
        },
    )
    r(
        b"NSFont",
        b"getAdvancements:forPackedGlyphs:length:",
        {
            "arguments": {
                2: {"type_modifier": b"o", "c_array_length_in_arg": 4},
                3: {
                    "c_array_delimited_by_null": True,
                    "type": "^t",
                    "type_modifier": b"n",
                    "c_array_length_in_arg": 4,
                },
            }
        },
    )
    r(
        b"NSFont",
        b"getBoundingRects:forCGGlyphs:count:",
        {
            "arguments": {
                2: {"type_modifier": b"o", "c_array_length_in_arg": 4},
                3: {"type_modifier": b"n", "c_array_length_in_arg": 4},
            }
        },
    )
    r(
        b"NSFont",
        b"getBoundingRects:forGlyphs:count:",
        {
            "arguments": {
                2: {"type_modifier": b"o", "c_array_length_in_arg": 4},
                3: {"type_modifier": b"n", "c_array_length_in_arg": 4},
            }
        },
    )
    r(b"NSFont", b"glyphIsEncoded:", {"retval": {"type": "Z"}})
    r(b"NSFont", b"isBaseFont", {"retval": {"type": "Z"}})
    r(b"NSFont", b"isFixedPitch", {"retval": {"type": "Z"}})
    r(b"NSFont", b"isVertical", {"retval": {"type": b"Z"}})
    r(b"NSFont", b"matrix", {"retval": {"c_array_of_fixed_length": 6}})
    r(b"NSFont", b"maximumAdvancement", {"retval": {"type": "{CGSize=dd}"}})
    r(
        b"NSFont",
        b"positionOfGlyph:forCharacter:struckOverRect:",
        {
            "retval": {"type": "{CGPoint=dd}"},
            "arguments": {
                3: {"type": "S"},
                4: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            },
        },
    )
    r(
        b"NSFont",
        b"positionOfGlyph:precededByGlyph:isNominal:",
        {
            "retval": {"type": "{CGPoint=dd}"},
            "arguments": {4: {"type": "^Z", "type_modifier": b"o"}},
        },
    )
    r(
        b"NSFont",
        b"positionOfGlyph:struckOverGlyph:metricsExist:",
        {
            "retval": {"type": "{CGPoint=dd}"},
            "arguments": {4: {"type": "^Z", "type_modifier": b"o"}},
        },
    )
    r(
        b"NSFont",
        b"positionOfGlyph:struckOverRect:metricsExist:",
        {
            "retval": {"type": "{CGPoint=dd}"},
            "arguments": {
                3: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                4: {"type": "^Z", "type_modifier": b"o"},
            },
        },
    )
    r(
        b"NSFont",
        b"positionOfGlyph:withRelation:toBaseGlyph:totalAdvancement:metricsExist:",
        {
            "retval": {"type": "{CGPoint=dd}"},
            "arguments": {
                5: {"type_modifier": b"o"},
                6: {"type": "^Z", "type_modifier": b"o"},
            },
        },
    )
    r(
        b"NSFont",
        b"positionsForCompositeSequence:numberOfGlyphs:pointArray:",
        {
            "arguments": {
                2: {"type_modifier": b"n", "c_array_length_in_arg": 3},
                4: {"type_modifier": b"o", "c_array_length_in_arg": 3},
            }
        },
    )
    r(
        b"NSFontAssetRequest",
        b"downloadFontAssetsWithCompletionHandler:",
        {
            "arguments": {
                2: {
                    "callable": {
                        "retval": {"type": b"Z"},
                        "arguments": {0: {"type": b"^v"}, 1: {"type": b"@"}},
                    }
                }
            }
        },
    )
    r(
        b"NSFontCollection",
        b"hideFontCollectionWithName:visibility:error:",
        {"retval": {"type": b"Z"}, "arguments": {4: {"type_modifier": b"o"}}},
    )
    r(
        b"NSFontCollection",
        b"renameFontCollectionWithName:visibility:toName:error:",
        {"retval": {"type": b"Z"}, "arguments": {5: {"type_modifier": b"o"}}},
    )
    r(
        b"NSFontCollection",
        b"showFontCollection:withName:visibility:error:",
        {"retval": {"type": b"Z"}, "arguments": {5: {"type_modifier": b"o"}}},
    )
    r(b"NSFontDescriptor", b"requiresFontAssetRequest", {"retval": {"type": "Z"}})
    r(
        b"NSFontDescriptor",
        b"setRequiresFontAssetRequest:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(b"NSFontManager", b"addCollection:options:", {"retval": {"type": "Z"}})
    r(b"NSFontManager", b"convertWeight:ofFont:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSFontManager", b"fontMenu:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSFontManager", b"fontNamed:hasTraits:", {"retval": {"type": "Z"}})
    r(b"NSFontManager", b"fontPanel:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSFontManager", b"isEnabled", {"retval": {"type": "Z"}})
    r(b"NSFontManager", b"isMultiple", {"retval": {"type": "Z"}})
    r(b"NSFontManager", b"removeCollection:", {"retval": {"type": "Z"}})
    r(b"NSFontManager", b"sendAction", {"retval": {"type": "Z"}})
    r(b"NSFontManager", b"setAction:", {"arguments": {2: {"sel_of_type": b"v@:@"}}})
    r(b"NSFontManager", b"setEnabled:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSFontManager",
        b"setSelectedAttributes:isMultiple:",
        {"arguments": {3: {"type": "Z"}}},
    )
    r(
        b"NSFontManager",
        b"setSelectedFont:isMultiple:",
        {"arguments": {3: {"type": "Z"}}},
    )
    r(b"NSFontPanel", b"isEnabled", {"retval": {"type": "Z"}})
    r(b"NSFontPanel", b"setEnabled:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSFontPanel", b"setPanelFont:isMultiple:", {"arguments": {3: {"type": "Z"}}})
    r(b"NSFontPanel", b"setWorksWhenModal:", {"arguments": {2: {"type": b"Z"}}})
    r(b"NSFontPanel", b"sharedFontPanelExists", {"retval": {"type": "Z"}})
    r(b"NSFontPanel", b"worksWhenModal", {"retval": {"type": "Z"}})
    r(b"NSForm", b"setBezeled:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSForm", b"setBordered:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSForm", b"setFrameSize:", {"arguments": {2: {"type": "{CGSize=dd}"}}})
    r(b"NSFormCell", b"isOpaque", {"retval": {"type": "Z"}})
    r(b"NSFormCell", b"titleWidth:", {"arguments": {2: {"type": "{CGSize=dd}"}}})
    r(
        b"NSGestureRecognizer",
        b"canBePreventedByGestureRecognizer:",
        {"retval": {"type": b"Z"}},
    )
    r(
        b"NSGestureRecognizer",
        b"canPreventGestureRecognizer:",
        {"retval": {"type": b"Z"}},
    )
    r(b"NSGestureRecognizer", b"delaysKeyEvents", {"retval": {"type": b"Z"}})
    r(b"NSGestureRecognizer", b"delaysMagnificationEvents", {"retval": {"type": b"Z"}})
    r(
        b"NSGestureRecognizer",
        b"delaysOtherMouseButtonEvents",
        {"retval": {"type": b"Z"}},
    )
    r(
        b"NSGestureRecognizer",
        b"delaysPrimaryMouseButtonEvents",
        {"retval": {"type": b"Z"}},
    )
    r(b"NSGestureRecognizer", b"delaysRotationEvents", {"retval": {"type": b"Z"}})
    r(
        b"NSGestureRecognizer",
        b"delaysSecondaryMouseButtonEvents",
        {"retval": {"type": b"Z"}},
    )
    r(
        b"NSGestureRecognizer",
        b"initWithTarget:action:",
        {"arguments": {3: {"sel_of_type": b"v@:@"}}},
    )
    r(b"NSGestureRecognizer", b"isEnabled", {"retval": {"type": b"Z"}})
    r(
        b"NSGestureRecognizer",
        b"setAction:",
        {"arguments": {2: {"sel_of_type": b"v@:@"}}},
    )
    r(
        b"NSGestureRecognizer",
        b"setDelaysKeyEvents:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(
        b"NSGestureRecognizer",
        b"setDelaysMagnificationEvents:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(
        b"NSGestureRecognizer",
        b"setDelaysOtherMouseButtonEvents:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(
        b"NSGestureRecognizer",
        b"setDelaysPrimaryMouseButtonEvents:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(
        b"NSGestureRecognizer",
        b"setDelaysRotationEvents:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(
        b"NSGestureRecognizer",
        b"setDelaysSecondaryMouseButtonEvents:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(b"NSGestureRecognizer", b"setEnabled:", {"arguments": {2: {"type": b"Z"}}})
    r(
        b"NSGestureRecognizer",
        b"shouldBeRequiredToFailByGestureRecognizer:",
        {"retval": {"type": b"Z"}},
    )
    r(
        b"NSGestureRecognizer",
        b"shouldRequireFailureOfGestureRecognizer:",
        {"retval": {"type": b"Z"}},
    )
    r(
        b"NSGlyphGenerator",
        b"generateGlyphsForGlyphStorage:desiredNumberOfCharacters:glyphIndex:characterIndex:",
        {"arguments": {4: {"type_modifier": b"o"}, 5: {"type_modifier": b"o"}}},
    )
    r(
        b"NSGradient",
        b"drawFromCenter:radius:toCenter:radius:options:",
        {
            "arguments": {
                2: {"type": "{CGPoint=dd}"},
                3: {"type": "d"},
                4: {"type": "{CGPoint=dd}"},
            }
        },
    )
    r(
        b"NSGradient",
        b"drawFromPoint:toPoint:options:",
        {"arguments": {2: {"type": "{CGPoint=dd}"}, 3: {"type": "{CGPoint=dd}"}}},
    )
    r(
        b"NSGradient",
        b"drawInBezierPath:relativeCenterPosition:",
        {"arguments": {3: {"type": "{CGPoint=dd}"}}},
    )
    r(
        b"NSGradient",
        b"drawInRect:angle:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSGradient",
        b"drawInRect:relativeCenterPosition:",
        {
            "arguments": {
                2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                3: {"type": "{CGPoint=dd}"},
            }
        },
    )
    r(
        b"NSGradient",
        b"getColor:location:atIndex:",
        {"arguments": {2: {"type_modifier": b"o"}, 3: {"type_modifier": b"o"}}},
    )
    r(
        b"NSGradient",
        b"initWithColors:atLocations:colorSpace:",
        {"arguments": {3: {"type_modifier": b"n", "c_array_length_in_arg": 2}}},
    )
    r(
        b"NSGradient",
        b"initWithColorsAndLocations:",
        {"suggestion": "use initWithColors:atLocation:colorSpace:", "variadic": True},
    )
    r(b"NSGraphicsContext", b"currentContextDrawingToScreen", {"retval": {"type": "Z"}})
    r(b"NSGraphicsContext", b"focusStack", {"retval": {"type": "^v"}})
    r(
        b"NSGraphicsContext",
        b"graphicsContextWithCGContext:flipped:",
        {"arguments": {3: {"type": b"Z"}}},
    )
    r(
        b"NSGraphicsContext",
        b"graphicsContextWithGraphicsPort:flipped:",
        {"arguments": {2: {"type": "^{CGContext=}"}, 3: {"type": "Z"}}},
    )
    r(b"NSGraphicsContext", b"graphicsPort", {"retval": {"type": "^{CGContext=}"}})
    r(b"NSGraphicsContext", b"isDrawingToScreen", {"retval": {"type": "Z"}})
    r(b"NSGraphicsContext", b"isFlipped", {"retval": {"type": "Z"}})
    r(b"NSGraphicsContext", b"patternPhase", {"retval": {"type": "{CGPoint=dd}"}})
    r(b"NSGraphicsContext", b"setFocusStack:", {"arguments": {2: {"type": "^v"}}})
    r(
        b"NSGraphicsContext",
        b"setPatternPhase:",
        {"arguments": {2: {"type": "{CGPoint=dd}"}}},
    )
    r(b"NSGraphicsContext", b"setShouldAntialias:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSGraphicsContext", b"shouldAntialias", {"retval": {"type": "Z"}})
    r(b"NSGridColumn", b"isHidden", {"retval": {"type": "Z"}})
    r(b"NSGridColumn", b"setHidden:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSGridRow", b"isHidden", {"retval": {"type": "Z"}})
    r(b"NSGridRow", b"setHidden:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSGridView", b"isHidden", {"retval": {"type": "Z"}})
    r(b"NSGridView", b"setHidden:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSGroupTouchBarItem", b"prefersEqualWidths", {"retval": {"type": "Z"}})
    r(
        b"NSGroupTouchBarItem",
        b"setPrefersEqualWidths:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(b"NSHelpManager", b"isContextHelpModeActive", {"retval": {"type": "Z"}})
    r(b"NSHelpManager", b"registerBooksInBundle:", {"retval": {"type": b"Z"}})
    r(b"NSHelpManager", b"setContextHelpModeActive:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSHelpManager",
        b"showContextHelpForObject:locationHint:",
        {"retval": {"type": "Z"}, "arguments": {3: {"type": "{CGPoint=dd}"}}},
    )
    r(
        b"NSImage",
        b"CGImageForProposedRect:context:hints:",
        {
            "arguments": {
                2: {"type": "^{CGRect={CGPoint=dd}{CGSize=dd}}", "type_modifier": b"o"}
            }
        },
    )
    r(
        b"NSImage",
        b"alignmentRect",
        {"retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
    )
    r(
        b"NSImage",
        b"bestRepresentationForRect:context:hints:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(b"NSImage", b"cacheDepthMatchesImageDepth", {"retval": {"type": "Z"}})
    r(b"NSImage", b"canInitWithPasteboard:", {"retval": {"type": "Z"}})
    r(
        b"NSImage",
        b"compositeToPoint:fromRect:operation:",
        {
            "arguments": {
                2: {"type": "{CGPoint=dd}"},
                3: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            }
        },
    )
    r(
        b"NSImage",
        b"compositeToPoint:fromRect:operation:fraction:",
        {
            "arguments": {
                2: {"type": "{CGPoint=dd}"},
                3: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            }
        },
    )
    r(
        b"NSImage",
        b"compositeToPoint:operation:",
        {"arguments": {2: {"type": "{CGPoint=dd}"}}},
    )
    r(
        b"NSImage",
        b"compositeToPoint:operation:fraction:",
        {"arguments": {2: {"type": "{CGPoint=dd}"}}},
    )
    r(
        b"NSImage",
        b"dissolveToPoint:fraction:",
        {"arguments": {2: {"type": "{CGPoint=dd}"}}},
    )
    r(
        b"NSImage",
        b"dissolveToPoint:fromRect:fraction:",
        {
            "arguments": {
                2: {"type": "{CGPoint=dd}"},
                3: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            }
        },
    )
    r(
        b"NSImage",
        b"drawAtPoint:fromRect:operation:fraction:",
        {
            "arguments": {
                2: {"type": "{CGPoint=dd}"},
                3: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            }
        },
    )
    r(
        b"NSImage",
        b"drawInRect:fromRect:operation:fraction:",
        {
            "arguments": {
                2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                3: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            }
        },
    )
    r(
        b"NSImage",
        b"drawInRect:fromRect:operation:fraction:respectFlipped:hints:",
        {
            "retval": {"type": "Z"},
            "arguments": {
                2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                3: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                6: {"type": "Z"},
            },
        },
    )
    r(
        b"NSImage",
        b"drawRepresentation:inRect:",
        {
            "retval": {"type": "Z"},
            "arguments": {3: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
        },
    )
    r(
        b"NSImage",
        b"hitTestRect:withImageDestinationRect:context:hints:flipped:",
        {
            "retval": {"type": "Z"},
            "arguments": {
                2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                3: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                6: {"type": "Z"},
            },
        },
    )
    r(
        b"NSImage",
        b"hitTestRect:withImageDestinationRect:context_hints:flipped:",
        {
            "retval": {"type": "Z"},
            "arguments": {
                2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                3: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            },
        },
    )
    r(
        b"NSImage",
        b"imageWithSize:flipped:drawingHandler:",
        {
            "arguments": {
                3: {"type": b"Z"},
                4: {
                    "callable": {
                        "retval": {"type": b"Z"},
                        "arguments": {
                            0: {"type": b"^v"},
                            1: {"type": b"{CGRect={CGPoint=dd}{CGSize=dd}}"},
                        },
                    }
                },
            }
        },
    )
    r(b"NSImage", b"initWithCGImage:size:", {"arguments": {3: {"type": "{CGSize=dd}"}}})
    r(
        b"NSImage",
        b"initWithIconRef:",
        {"arguments": {2: {"type": "^{OpaqueIconRef=}"}}},
    )
    r(b"NSImage", b"initWithSize:", {"arguments": {2: {"type": "{CGSize=dd}"}}})
    r(b"NSImage", b"isCachedSeparately", {"retval": {"type": "Z"}})
    r(b"NSImage", b"isDataRetained", {"retval": {"type": "Z"}})
    r(b"NSImage", b"isFlipped", {"retval": {"type": "Z"}})
    r(b"NSImage", b"isTemplate", {"retval": {"type": "Z"}})
    r(b"NSImage", b"isValid", {"retval": {"type": "Z"}})
    r(b"NSImage", b"lockFocusFlipped:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSImage", b"matchesOnMultipleResolution", {"retval": {"type": "Z"}})
    r(b"NSImage", b"matchesOnlyOnBestFittingAxis", {"retval": {"type": b"Z"}})
    r(b"NSImage", b"prefersColorMatch", {"retval": {"type": "Z"}})
    r(b"NSImage", b"scalesWhenResized", {"retval": {"type": "Z"}})
    r(
        b"NSImage",
        b"setAlignmentRect:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(b"NSImage", b"setCacheDepthMatchesImageDepth:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSImage", b"setCachedSeparately:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSImage", b"setDataRetained:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSImage", b"setFlipped:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSImage", b"setMatchesOnMultipleResolution:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSImage",
        b"setMatchesOnlyOnBestFittingAxis:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(b"NSImage", b"setName:", {"retval": {"type": "Z"}})
    r(b"NSImage", b"setPrefersColorMatch:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSImage", b"setScalesWhenResized:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSImage", b"setSize:", {"arguments": {2: {"type": "{CGSize=dd}"}}})
    r(b"NSImage", b"setTemplate:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSImage", b"setUsesEPSOnResolutionMismatch:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSImage", b"size", {"retval": {"type": "{CGSize=dd}"}})
    r(b"NSImage", b"usesEPSOnResolutionMismatch", {"retval": {"type": "Z"}})
    r(
        b"NSImageRep",
        b"CGImageForProposedRect:context:hints:",
        {
            "arguments": {
                2: {"type": "^{CGRect={CGPoint=dd}{CGSize=dd}}", "type_modifier": b"N"}
            }
        },
    )
    r(b"NSImageRep", b"canInitWithData:", {"retval": {"type": "Z"}})
    r(b"NSImageRep", b"canInitWithPasteboard:", {"retval": {"type": "Z"}})
    r(b"NSImageRep", b"draw", {"retval": {"type": "Z"}})
    r(
        b"NSImageRep",
        b"drawAtPoint:",
        {"retval": {"type": "Z"}, "arguments": {2: {"type": "{CGPoint=dd}"}}},
    )
    r(
        b"NSImageRep",
        b"drawInRect:",
        {
            "retval": {"type": "Z"},
            "arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
        },
    )
    r(
        b"NSImageRep",
        b"drawInRect:fromRect:operation:fraction:respectFlipped:hints:",
        {
            "retval": {"type": "Z"},
            "arguments": {
                2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                3: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                6: {"type": "Z"},
            },
        },
    )
    r(b"NSImageRep", b"hasAlpha", {"retval": {"type": "Z"}})
    r(b"NSImageRep", b"isOpaque", {"retval": {"type": "Z"}})
    r(b"NSImageRep", b"setAlpha:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSImageRep", b"setOpaque:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSImageRep", b"setSize:", {"arguments": {2: {"type": "{CGSize=dd}"}}})
    r(b"NSImageRep", b"size", {"retval": {"type": "{CGSize=dd}"}})
    r(
        b"NSImageView",
        b"addSymbolEffect:options:animated:",
        {"arguments": {4: {"type": b"Z"}}},
    )
    r(b"NSImageView", b"allowsCutCopyPaste", {"retval": {"type": "Z"}})
    r(b"NSImageView", b"animates", {"retval": {"type": "Z"}})
    r(b"NSImageView", b"isEditable", {"retval": {"type": "Z"}})
    r(
        b"NSImageView",
        b"removeAllSymbolEffectsWithOptions:animated:",
        {"arguments": {3: {"type": b"Z"}}},
    )
    r(
        b"NSImageView",
        b"removeSymbolEffectOfType:options:animated:",
        {"arguments": {4: {"type": b"Z"}}},
    )
    r(b"NSImageView", b"setAllowsCutCopyPaste:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSImageView", b"setAnimates:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSImageView", b"setEditable:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSInputManager", b"handleMouseEvent:", {"retval": {"type": "Z"}})
    r(
        b"NSInputManager",
        b"markedTextSelectionChanged:client:",
        {"arguments": {2: {"type": "{_NSRange=QQ}"}}},
    )
    r(
        b"NSInputManager",
        b"wantsToDelayTextChangeNotifications",
        {"retval": {"type": "Z"}},
    )
    r(b"NSInputManager", b"wantsToHandleMouseEvents", {"retval": {"type": "Z"}})
    r(b"NSInputManager", b"wantsToInterpretAllKeystrokes", {"retval": {"type": "Z"}})
    r(
        b"NSItemProvider",
        b"loadItemForTypeIdentifier:options:completionHandler:",
        {
            "arguments": {
                4: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {
                            0: {"type": b"^v"},
                            1: {"type": b"@"},
                            2: {"type": b"@"},
                        },
                    }
                }
            }
        },
    )
    r(
        b"NSItemProvider",
        b"loadObjectOfClass:completionHandler:",
        {
            "arguments": {
                3: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {
                            0: {"type": b"^v"},
                            1: {"type": b"@"},
                            2: {"type": b"@"},
                        },
                    }
                }
            }
        },
    )
    r(
        b"NSItemProvider",
        b"registerCloudKitShareWithPreparationHandler:",
        {
            "arguments": {
                2: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {
                            0: {"type": b"^v"},
                            1: {
                                "callable": {
                                    "retval": {"type": "v"},
                                    "arguments": {
                                        0: {"type": "^v"},
                                        1: {"type": "@"},
                                        2: {"type": "@"},
                                        3: {"type": "@"},
                                    },
                                },
                                "type": b"@?",
                            },
                        },
                    }
                }
            }
        },
    )
    r(
        b"NSItemProvider",
        b"registerItemForTypeIdentifier:loadHandler:",
        {
            "arguments": {
                3: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {
                            0: {"type": b"^v"},
                            1: {
                                "callable": {
                                    "args": {
                                        0: {"type": "^@"},
                                        1: {"type": "@"},
                                        2: {"type": "@"},
                                    },
                                    "retval": {"type": "v"},
                                },
                                "type": b"@?",
                            },
                            2: {"type": b"#"},
                            3: {"type": b"@"},
                        },
                    }
                }
            }
        },
    )
    r(b"NSLayoutAnchor", b"hasAmbiguousLayout", {"retval": {"type": b"Z"}})
    r(b"NSLayoutConstraint", b"isActive", {"retval": {"type": b"Z"}})
    r(b"NSLayoutConstraint", b"setActive:", {"arguments": {2: {"type": b"Z"}}})
    r(
        b"NSLayoutConstraint",
        b"setShouldBeArchived:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(b"NSLayoutConstraint", b"shouldBeArchived", {"retval": {"type": b"Z"}})
    r(b"NSLayoutGuide", b"hasAmbiguousLayout", {"retval": {"type": "Z"}})
    r(
        b"NSLayoutManager",
        b"CGGlyphAtIndex:isValidIndex:",
        {"arguments": {3: {"type": "^Z", "type_modifier": b"o"}}},
    )
    r(
        b"NSLayoutManager",
        b"addTemporaryAttribute:value:forCharacterRange:",
        {"arguments": {4: {"type": "{_NSRange=QQ}"}}},
    )
    r(
        b"NSLayoutManager",
        b"addTemporaryAttributes:forCharacterRange:",
        {"arguments": {3: {"type": "{_NSRange=QQ}"}}},
    )
    r(b"NSLayoutManager", b"allowsNonContiguousLayout", {"retval": {"type": "Z"}})
    r(
        b"NSLayoutManager",
        b"attachmentSizeForGlyphAtIndex:",
        {"retval": {"type": "{CGSize=dd}"}},
    )
    r(b"NSLayoutManager", b"backgroundLayoutEnabled", {"retval": {"type": "Z"}})
    r(
        b"NSLayoutManager",
        b"boundingRectForGlyphRange:inTextContainer:",
        {
            "retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            "arguments": {2: {"type": "{_NSRange=QQ}"}},
        },
    )
    r(
        b"NSLayoutManager",
        b"boundsRectForTextBlock:atIndex:effectiveRange:",
        {
            "retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            "arguments": {4: {"type_modifier": b"o"}},
        },
    )
    r(
        b"NSLayoutManager",
        b"boundsRectForTextBlock:glyphRange:",
        {
            "retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            "arguments": {3: {"type": "{_NSRange=QQ}"}},
        },
    )
    r(
        b"NSLayoutManager",
        b"characterIndexForPoint:inTextContainer:fractionOfDistanceBetweenInsertionPoints:",
        {"arguments": {2: {"type": "{CGPoint=dd}"}, 4: {"type_modifier": b"o"}}},
    )
    r(
        b"NSLayoutManager",
        b"characterRangeForGlyphRange:actualGlyphRange:",
        {
            "retval": {"type": "{_NSRange=QQ}"},
            "arguments": {2: {"type": "{_NSRange=QQ}"}, 3: {"type_modifier": b"o"}},
        },
    )
    r(
        b"NSLayoutManager",
        b"deleteGlyphsInRange:",
        {"arguments": {2: {"type": "{_NSRange=QQ}"}}},
    )
    r(
        b"NSLayoutManager",
        b"drawBackgroundForGlyphRange:atPoint:",
        {"arguments": {2: {"type": "{_NSRange=QQ}"}, 3: {"type": "{CGPoint=dd}"}}},
    )
    r(
        b"NSLayoutManager",
        b"drawGlyphsForGlyphRange:atPoint:",
        {"arguments": {2: {"type": "{_NSRange=QQ}"}, 3: {"type": "{CGPoint=dd}"}}},
    )
    r(
        b"NSLayoutManager",
        b"drawStrikethroughForGlyphRange:strikethroughType:baselineOffset:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:",
        {
            "arguments": {
                2: {"type": "{_NSRange=QQ}"},
                5: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                6: {"type": "{_NSRange=QQ}"},
                7: {"type": "{CGPoint=dd}"},
            }
        },
    )
    r(
        b"NSLayoutManager",
        b"drawUnderlineForGlyphRange:underlineType:baselineOffset:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:",
        {
            "arguments": {
                2: {"type": "{_NSRange=QQ}"},
                5: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                6: {"type": "{_NSRange=QQ}"},
                7: {"type": "{CGPoint=dd}"},
            }
        },
    )
    r(
        b"NSLayoutManager",
        b"drawsOutsideLineFragmentForGlyphAtIndex:",
        {"retval": {"type": "Z"}},
    )
    r(
        b"NSLayoutManager",
        b"ensureGlyphsForCharacterRange:",
        {"arguments": {2: {"type": "{_NSRange=QQ}"}}},
    )
    r(
        b"NSLayoutManager",
        b"ensureGlyphsForGlyphRange:",
        {"arguments": {2: {"type": "{_NSRange=QQ}"}}},
    )
    r(
        b"NSLayoutManager",
        b"ensureLayoutForBoundingRect:inTextContainer:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSLayoutManager",
        b"ensureLayoutForCharacterRange:",
        {"arguments": {2: {"type": "{_NSRange=QQ}"}}},
    )
    r(
        b"NSLayoutManager",
        b"ensureLayoutForGlyphRange:",
        {"arguments": {2: {"type": "{_NSRange=QQ}"}}},
    )
    r(
        b"NSLayoutManager",
        b"enumerateEnclosingRectsForGlyphRange:withinSelectedGlyphRange:inTextContainer:usingBlock:",
        {
            "arguments": {
                5: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {
                            0: {"type": b"^v"},
                            1: {"type": b"{CGRect={CGPoint=dd}{CGSize=dd}}"},
                            2: {"type": b"o^Z"},
                        },
                    }
                }
            }
        },
    )
    r(
        b"NSLayoutManager",
        b"enumerateLineFragmentsForGlyphRange:usingBlock:",
        {
            "arguments": {
                3: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {
                            0: {"type": b"^v"},
                            1: {"type": b"{CGRect={CGPoint=dd}{CGSize=dd}}"},
                            2: {"type": b"{CGRect={CGPoint=dd}{CGSize=dd}}"},
                            3: {"type": b"@"},
                            4: {"type": b"{_NSRange=QQ}"},
                            5: {"type": b"o^Z"},
                        },
                    }
                }
            }
        },
    )
    r(
        b"NSLayoutManager",
        b"extraLineFragmentRect",
        {"retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
    )
    r(
        b"NSLayoutManager",
        b"extraLineFragmentUsedRect",
        {"retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
    )
    r(
        b"NSLayoutManager",
        b"fillBackgroundRectArray:count:forCharacterRange:color:",
        {
            "arguments": {
                2: {
                    "type": "^{CGRect={CGPoint=dd}{CGSize=dd}}",
                    "type_modifier": b"N",
                    "c_array_length_in_arg": 3,
                },
                4: {"type": "{_NSRange=QQ}"},
            }
        },
    )
    r(
        b"NSLayoutManager",
        b"fractionOfDistanceThroughGlyphForPoint:inTextContainer:",
        {"retval": {"type": "d"}, "arguments": {2: {"type": "{CGPoint=dd}"}}},
    )
    r(
        b"NSLayoutManager",
        b"getFirstUnlaidCharacterIndex:glyphIndex:",
        {"arguments": {2: {"type_modifier": b"o"}, 3: {"type_modifier": b"o"}}},
    )
    r(
        b"NSLayoutManager",
        b"getGlyphs:range:",
        {
            "arguments": {
                2: {"type_modifier": b"o", "c_array_length_in_arg": 3},
                3: {"type": "{_NSRange=QQ}"},
            }
        },
    )
    r(
        b"NSLayoutManager",
        b"getGlyphsInRange:glyphs:characterIndexes:glyphInscriptions:elasticBits:",
        {
            "arguments": {
                2: {"type": "{_NSRange=QQ}"},
                3: {"type_modifier": b"o", "c_array_length_in_arg": 2},
                4: {"type_modifier": b"o", "c_array_length_in_arg": 2},
                5: {"type_modifier": b"o", "c_array_length_in_arg": 2},
                6: {"type": "^Z", "type_modifier": b"o", "c_array_length_in_arg": 2},
            }
        },
    )
    r(
        b"NSLayoutManager",
        b"getGlyphsInRange:glyphs:characterIndexes:glyphInscriptions:elasticBits:bidiLevels:",
        {
            "arguments": {
                2: {"type": "{_NSRange=QQ}"},
                3: {"type_modifier": b"o", "c_array_length_in_arg": 2},
                4: {"type_modifier": b"o", "c_array_length_in_arg": 2},
                5: {"type_modifier": b"o", "c_array_length_in_arg": 2},
                6: {"type": "^Z", "type_modifier": b"o", "c_array_length_in_arg": 2},
                7: {"type": "^C", "type_modifier": b"o", "c_array_length_in_arg": 2},
            }
        },
    )
    r(
        b"NSLayoutManager",
        b"getGlyphsInRange:glyphs:properties:characterIndexes:bidiLevels:",
        {
            "arguments": {
                3: {"type": "^I", "type_modifier": b"o", "c_array_length_in_arg": 2},
                4: {"type": "^I", "type_modifier": b"o", "c_array_length_in_arg": 2},
                5: {"type": "^I", "type_modifier": b"o", "c_array_length_in_arg": 2},
                6: {"type": "^I", "type_modifier": b"o", "c_array_length_in_arg": 2},
            }
        },
    )
    r(
        b"NSLayoutManager",
        b"getLineFragmentInsertionPointsForCharacterAtIndex:alternatePositions:inDisplayOrder:positions:characterIndexes:",
        {
            "arguments": {
                3: {"type": "Z"},
                4: {"type": "Z"},
                5: {"type": "r^d", "type_modifier": b"o"},
                6: {"type": "^Q", "type_modifier": b"o"},
            }
        },
    )
    r(
        b"NSLayoutManager",
        b"glyphAtIndex:isValidIndex:",
        {"arguments": {3: {"type": "^Z", "type_modifier": b"o"}}},
    )
    r(
        b"NSLayoutManager",
        b"glyphIndexForPoint:inTextContainer:",
        {"arguments": {2: {"type": "{CGPoint=dd}"}}},
    )
    r(
        b"NSLayoutManager",
        b"glyphIndexForPoint:inTextContainer:fractionOfDistanceThroughGlyph:",
        {
            "arguments": {
                2: {"type": "{CGPoint=dd}"},
                4: {"null_accepted": False, "type_modifier": b"o"},
            }
        },
    )
    r(
        b"NSLayoutManager",
        b"glyphRangeForBoundingRect:inTextContainer:",
        {
            "retval": {"type": "{_NSRange=QQ}"},
            "arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
        },
    )
    r(
        b"NSLayoutManager",
        b"glyphRangeForBoundingRectWithoutAdditionalLayout:inTextContainer:",
        {
            "retval": {"type": "{_NSRange=QQ}"},
            "arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
        },
    )
    r(
        b"NSLayoutManager",
        b"glyphRangeForCharacterRange:actualCharacterRange:",
        {
            "retval": {"type": "{_NSRange=QQ}"},
            "arguments": {2: {"type": "{_NSRange=QQ}"}, 3: {"type_modifier": b"o"}},
        },
    )
    r(
        b"NSLayoutManager",
        b"glyphRangeForTextContainer:",
        {"retval": {"type": "{_NSRange=QQ}"}},
    )
    r(b"NSLayoutManager", b"hasNonContiguousLayout", {"retval": {"type": "Z"}})
    r(
        b"NSLayoutManager",
        b"insertGlyphs:length:forStartingGlyphAtIndex:characterIndex:",
        {
            "arguments": {
                2: {"type": "^I", "type_modifier": b"n", "c_array_length_in_arg": 3}
            }
        },
    )
    r(
        b"NSLayoutManager",
        b"invalidateDisplayForCharacterRange:",
        {"arguments": {2: {"type": "{_NSRange=QQ}"}}},
    )
    r(
        b"NSLayoutManager",
        b"invalidateDisplayForGlyphRange:",
        {"arguments": {2: {"type": "{_NSRange=QQ}"}}},
    )
    r(
        b"NSLayoutManager",
        b"invalidateGlyphsForCharacterRange:changeInLength:actualCharacterRange:",
        {
            "arguments": {
                2: {"type": "{_NSRange=QQ}"},
                4: {"type": "^{_NSRange=QQ}", "type_modifier": b"o"},
            }
        },
    )
    r(
        b"NSLayoutManager",
        b"invalidateGlyphsOnLayoutInvalidationForGlyphRange:",
        {"arguments": {2: {"type": "{_NSRange=QQ}"}}},
    )
    r(
        b"NSLayoutManager",
        b"invalidateLayoutForCharacterRange:actualCharacterRange:",
        {
            "arguments": {
                2: {"type": "{_NSRange=QQ}"},
                3: {"type": "^{_NSRange=QQ}", "type_modifier": b"o"},
            }
        },
    )
    r(
        b"NSLayoutManager",
        b"invalidateLayoutForCharacterRange:isSoft:actualCharacterRange:",
        {
            "arguments": {
                2: {"type": "{_NSRange=QQ}"},
                3: {"type": "Z"},
                4: {"type": "^{_NSRange=QQ}", "type_modifier": b"o"},
            }
        },
    )
    r(b"NSLayoutManager", b"isValidGlyphIndex:", {"retval": {"type": "Z"}})
    r(
        b"NSLayoutManager",
        b"layoutManagerOwnsFirstResponderInWindow:",
        {"retval": {"type": "Z"}},
    )
    r(
        b"NSLayoutManager",
        b"layoutRectForTextBlock:atIndex:effectiveRange:",
        {
            "retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            "arguments": {4: {"type": "^{_NSRange=QQ}", "type_modifier": b"o"}},
        },
    )
    r(
        b"NSLayoutManager",
        b"layoutRectForTextBlock:glyphRange:",
        {
            "retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            "arguments": {3: {"type": "{_NSRange=QQ}"}},
        },
    )
    r(
        b"NSLayoutManager",
        b"limitsLayoutForSuspiciousContents",
        {"retval": {"type": b"Z"}},
    )
    r(
        b"NSLayoutManager",
        b"lineFragmentRectForGlyphAtIndex:effectiveRange:",
        {
            "retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            "arguments": {3: {"type": "^{_NSRange=QQ}", "type_modifier": b"o"}},
        },
    )
    r(
        b"NSLayoutManager",
        b"lineFragmentRectForGlyphAtIndex:effectiveRange:withoutAdditionalLayout:",
        {
            "retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            "arguments": {3: {"type_modifier": b"o"}, 4: {"type": "Z"}},
        },
    )
    r(
        b"NSLayoutManager",
        b"lineFragmentUsedRectForGlyphAtIndex:effectiveRange:",
        {
            "retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            "arguments": {3: {"type_modifier": b"o"}},
        },
    )
    r(
        b"NSLayoutManager",
        b"lineFragmentUsedRectForGlyphAtIndex:effectiveRange:withoutAdditionalLayout:",
        {
            "retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            "arguments": {3: {"type_modifier": b"o"}, 4: {"type": "Z"}},
        },
    )
    r(
        b"NSLayoutManager",
        b"locationForGlyphAtIndex:",
        {"retval": {"type": "{CGPoint=dd}"}},
    )
    r(
        b"NSLayoutManager",
        b"notShownAttributeForGlyphAtIndex:",
        {"retval": {"type": "Z"}},
    )
    r(
        b"NSLayoutManager",
        b"rangeOfNominallySpacedGlyphsContainingIndex:",
        {"retval": {"type": "{_NSRange=QQ}"}},
    )
    r(
        b"NSLayoutManager",
        b"rectArrayForCharacterRange:withinSelectedCharacterRange:inTextContainer:rectCount:",
        {
            "retval": {"c_array_length_in_arg": 5},
            "arguments": {
                2: {"type": "{_NSRange=QQ}"},
                3: {"type": "{_NSRange=QQ}"},
                5: {"type_modifier": b"o"},
            },
        },
    )
    r(
        b"NSLayoutManager",
        b"rectArrayForGlyphRange:withinSelectedGlyphRange:inTextContainer:rectCount:",
        {
            "retval": {"c_array_length_in_arg": 5},
            "arguments": {
                2: {"type": "{_NSRange=QQ}"},
                3: {"type": "{_NSRange=QQ}"},
                5: {"type_modifier": b"o"},
            },
        },
    )
    r(
        b"NSLayoutManager",
        b"removeTemporaryAttribute:forCharacterRange:",
        {"arguments": {3: {"type": "{_NSRange=QQ}"}}},
    )
    r(
        b"NSLayoutManager",
        b"rulerAccessoryViewForTextView:paragraphStyle:ruler:enabled:",
        {"arguments": {5: {"type": "Z"}}},
    )
    r(
        b"NSLayoutManager",
        b"setAllowsNonContiguousLayout:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(
        b"NSLayoutManager",
        b"setAttachmentSize:forGlyphRange:",
        {"arguments": {2: {"type": "{CGSize=dd}"}, 3: {"type": "{_NSRange=QQ}"}}},
    )
    r(
        b"NSLayoutManager",
        b"setBackgroundLayoutEnabled:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(
        b"NSLayoutManager",
        b"setBoundsRect:forTextBlock:glyphRange:",
        {
            "arguments": {
                2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                4: {"type": "{_NSRange=QQ}"},
            }
        },
    )
    r(
        b"NSLayoutManager",
        b"setDrawsOutsideLineFragment:forGlyphAtIndex:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(
        b"NSLayoutManager",
        b"setExtraLineFragmentRect:usedRect:textContainer:",
        {
            "arguments": {
                2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                3: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            }
        },
    )
    r(
        b"NSLayoutManager",
        b"setGlyphs:properties:characterIndexes:font:forGlyphRange:",
        {
            "arguments": {
                2: {"type_modifier": b"n", "c_array_length_in_arg": 6},
                3: {"type_modifier": b"n", "c_array_length_in_arg": 6},
                4: {"type_modifier": b"n", "c_array_length_in_arg": 6},
            }
        },
    )
    r(
        b"NSLayoutManager",
        b"setLayoutRect:forTextBlock:glyphRange:",
        {
            "arguments": {
                2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                4: {"type": "{_NSRange=QQ}"},
            }
        },
    )
    r(
        b"NSLayoutManager",
        b"setLimitsLayoutForSuspiciousContents:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(
        b"NSLayoutManager",
        b"setLineFragmentRect:forGlyphRange:usedRect:",
        {
            "arguments": {
                2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                3: {"type": "{_NSRange=QQ}"},
                4: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            }
        },
    )
    r(
        b"NSLayoutManager",
        b"setLocation:forStartOfGlyphRange:",
        {"arguments": {2: {"type": "{CGPoint=dd}"}, 3: {"type": "{_NSRange=QQ}"}}},
    )
    r(
        b"NSLayoutManager",
        b"setLocations:startingGlyphIndexes:count:forGlyphRange:",
        {
            "arguments": {
                2: {"type_modifier": b"n", "c_array_length_in_arg": 4},
                3: {"type_modifier": b"n", "c_array_length_in_arg": 4},
                5: {"type": "{_NSRange=QQ}"},
            }
        },
    )
    r(
        b"NSLayoutManager",
        b"setNotShownAttribute:forGlyphAtIndex:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(
        b"NSLayoutManager",
        b"setShowsControlCharacters:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(
        b"NSLayoutManager",
        b"setShowsInvisibleCharacters:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(
        b"NSLayoutManager",
        b"setTemporaryAttributes:forCharacterRange:",
        {"arguments": {3: {"type": "{_NSRange=QQ}"}}},
    )
    r(
        b"NSLayoutManager",
        b"setTextContainer:forGlyphRange:",
        {"arguments": {3: {"type": "{_NSRange=QQ}"}}},
    )
    r(
        b"NSLayoutManager",
        b"setUsesDefaultHyphenation:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(b"NSLayoutManager", b"setUsesFontLeading:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSLayoutManager", b"setUsesScreenFonts:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSLayoutManager",
        b"showAttachmentCell:inRect:characterIndex:",
        {"arguments": {3: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSLayoutManager",
        b"showCGGlyphs:positions:count:font:matrix:attributes:inContext:",
        {
            "arguments": {
                2: {"type_modifier": b"n", "c_array_length_in_arg": 4},
                3: {"type_modifier": b"n", "c_array_length_in_arg": 4},
            }
        },
    )
    r(
        b"NSLayoutManager",
        b"showCGGlyphs:positions:count:font:textMatrix:attributes:inContext:",
        {
            "arguments": {
                2: {"type_modifier": b"n", "c_array_length_in_arg": 4},
                3: {"type_modifier": b"n", "c_array_length_in_arg": 4},
            }
        },
    )
    r(
        b"NSLayoutManager",
        b"showPackedGlyphs:length:glyphRange:atPoint:font:color:printingAdjustment:",
        {
            "arguments": {
                2: {
                    "c_array_delimited_by_null": True,
                    "type": "^v",
                    "type_modifier": b"n",
                    "c_array_length_in_arg": 3,
                },
                4: {"type": "{_NSRange=QQ}"},
                5: {"type": "{CGPoint=dd}"},
                8: {"type": "{CGSize=dd}"},
            }
        },
    )
    r(b"NSLayoutManager", b"showsControlCharacters", {"retval": {"type": "Z"}})
    r(b"NSLayoutManager", b"showsInvisibleCharacters", {"retval": {"type": "Z"}})
    r(
        b"NSLayoutManager",
        b"strikethroughGlyphRange:strikethroughType:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:",
        {
            "arguments": {
                2: {"type": "{_NSRange=QQ}"},
                4: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                5: {"type": "{_NSRange=QQ}"},
                6: {"type": "{CGPoint=dd}"},
            }
        },
    )
    r(
        b"NSLayoutManager",
        b"temporaryAttribute:atCharacterIndex:effectiveRange:",
        {"arguments": {4: {"type_modifier": b"o"}}},
    )
    r(
        b"NSLayoutManager",
        b"temporaryAttribute:atCharacterIndex:longestEffectiveRange:inRange:",
        {"arguments": {4: {"type_modifier": b"o"}, 5: {"type": "{_NSRange=QQ}"}}},
    )
    r(
        b"NSLayoutManager",
        b"temporaryAttributesAtCharacterIndex:effectiveRange:",
        {"arguments": {3: {"type_modifier": b"o"}}},
    )
    r(
        b"NSLayoutManager",
        b"temporaryAttributesAtCharacterIndex:longestEffectiveRange:inRange:",
        {"arguments": {3: {"type_modifier": b"o"}, 4: {"type": "{_NSRange=QQ}"}}},
    )
    r(
        b"NSLayoutManager",
        b"textContainerForGlyphAtIndex:effectiveRange:",
        {"arguments": {3: {"type_modifier": b"o"}}},
    )
    r(
        b"NSLayoutManager",
        b"textContainerForGlyphAtIndex:effectiveRange:withoutAdditionalLayout:",
        {"arguments": {3: {"type_modifier": b"o"}, 4: {"type": "Z"}}},
    )
    r(
        b"NSLayoutManager",
        b"textStorage:edited:range:changeInLength:invalidatedRange:",
        {
            "arguments": {
                3: {"type": "Q"},
                4: {"type": "{_NSRange=QQ}"},
                6: {"type": "{_NSRange=QQ}"},
            }
        },
    )
    r(
        b"NSLayoutManager",
        b"underlineGlyphRange:underlineType:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:",
        {
            "arguments": {
                2: {"type": "{_NSRange=QQ}"},
                4: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                5: {"type": "{_NSRange=QQ}"},
                6: {"type": "{CGPoint=dd}"},
            }
        },
    )
    r(
        b"NSLayoutManager",
        b"usedRectForTextContainer:",
        {"retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
    )
    r(b"NSLayoutManager", b"usesDefaultHyphenation", {"retval": {"type": b"Z"}})
    r(b"NSLayoutManager", b"usesFontLeading", {"retval": {"type": "Z"}})
    r(b"NSLayoutManager", b"usesScreenFonts", {"retval": {"type": "Z"}})
    r(b"NSLevelIndicator", b"drawsTieredCapacityLevels", {"retval": {"type": "Z"}})
    r(b"NSLevelIndicator", b"isEditable", {"retval": {"type": "Z"}})
    r(
        b"NSLevelIndicator",
        b"rectOfTickMarkAtIndex:",
        {"retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
    )
    r(
        b"NSLevelIndicator",
        b"setDrawsTieredCapacityLevels:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(b"NSLevelIndicator", b"setEditable:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSLevelIndicatorCell",
        b"rectOfTickMarkAtIndex:",
        {"retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
    )
    r(b"NSMatrix", b"acceptsFirstMouse:", {"retval": {"type": "Z"}})
    r(b"NSMatrix", b"allowsEmptySelection", {"retval": {"type": "Z"}})
    r(b"NSMatrix", b"autorecalculatesCellSize", {"retval": {"type": b"Z"}})
    r(b"NSMatrix", b"autosizesCells", {"retval": {"type": "Z"}})
    r(
        b"NSMatrix",
        b"cellFrameAtRow:column:",
        {"retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
    )
    r(b"NSMatrix", b"cellSize", {"retval": {"type": "{CGSize=dd}"}})
    r(b"NSMatrix", b"context:", {"arguments": {2: {"type": "^v"}}})
    r(b"NSMatrix", b"drawsBackground", {"retval": {"type": "Z"}})
    r(b"NSMatrix", b"drawsCellBackground", {"retval": {"type": "Z"}})
    r(
        b"NSMatrix",
        b"getNumberOfRows:columns:",
        {"arguments": {2: {"type_modifier": b"o"}, 3: {"type_modifier": b"o"}}},
    )
    r(
        b"NSMatrix",
        b"getRow:column:forPoint:",
        {
            "retval": {"type": "Z"},
            "arguments": {
                2: {"type_modifier": b"o"},
                3: {"type_modifier": b"o"},
                4: {"type": "{CGPoint=dd}"},
            },
        },
    )
    r(
        b"NSMatrix",
        b"getRow:column:ofCell:",
        {
            "retval": {"type": "Z"},
            "arguments": {2: {"type_modifier": b"o"}, 3: {"type_modifier": b"o"}},
        },
    )
    r(b"NSMatrix", b"highlightCell:atRow:column:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSMatrix",
        b"initWithFrame:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSMatrix",
        b"initWithFrame:mode:cellClass:numberOfRows:numberOfColumns:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSMatrix",
        b"initWithFrame:mode:prototype:numberOfRows:numberOfColumns:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(b"NSMatrix", b"intercellSpacing", {"retval": {"type": "{CGSize=dd}"}})
    r(b"NSMatrix", b"isAutoscroll", {"retval": {"type": "Z"}})
    r(b"NSMatrix", b"isSelectionByRect", {"retval": {"type": "Z"}})
    r(b"NSMatrix", b"performKeyEquivalent:", {"retval": {"type": "Z"}})
    r(b"NSMatrix", b"selectCellWithTag:", {"retval": {"type": "Z"}})
    r(b"NSMatrix", b"sendAction", {"retval": {"type": "Z"}})
    r(
        b"NSMatrix",
        b"sendAction:to:forAllCells:",
        {"arguments": {2: {"sel_of_type": b"Z@:@"}, 4: {"type": "Z"}}},
    )
    r(b"NSMatrix", b"setAllowsEmptySelection:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSMatrix", b"setAutorecalculatesCellSize:", {"arguments": {2: {"type": b"Z"}}})
    r(b"NSMatrix", b"setAutoscroll:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSMatrix", b"setAutosizesCells:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSMatrix", b"setCellSize:", {"arguments": {2: {"type": "{CGSize=dd}"}}})
    r(b"NSMatrix", b"setDoubleAction:", {"arguments": {2: {"sel_of_type": b"v@:@"}}})
    r(b"NSMatrix", b"setDrawsBackground:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSMatrix", b"setDrawsCellBackground:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSMatrix", b"setIntercellSpacing:", {"arguments": {2: {"type": "{CGSize=dd}"}}})
    r(b"NSMatrix", b"setScrollable:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSMatrix", b"setSelectionByRect:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSMatrix",
        b"setSelectionFrom:to:anchor:highlight:",
        {"arguments": {5: {"type": "Z"}}},
    )
    r(b"NSMatrix", b"setTabKeyTraversesCells:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSMatrix", b"setValidateSize:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSMatrix",
        b"sortUsingFunction:context:",
        {
            "arguments": {
                2: {
                    "callable": {
                        "retval": {"type": b"q"},
                        "arguments": {
                            0: {"type": b"@"},
                            1: {"type": b"@"},
                            2: {"type": b"@"},
                        },
                    },
                    "callable_retained": False,
                },
                3: {"type": "@"},
            }
        },
    )
    r(b"NSMatrix", b"sortUsingSelector:", {"arguments": {2: {"sel_of_type": b"q@:@"}}})
    r(b"NSMatrix", b"tabKeyTraversesCells", {"retval": {"type": "Z"}})
    r(b"NSMatrix", b"textShouldBeginEditing:", {"retval": {"type": "Z"}})
    r(b"NSMatrix", b"textShouldEndEditing:", {"retval": {"type": "Z"}})
    r(b"NSMediaLibraryBrowserController", b"isVisible", {"retval": {"type": b"Z"}})
    r(
        b"NSMediaLibraryBrowserController",
        b"setVisible:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(
        b"NSMenu",
        b"addItemWithTitle:action:keyEquivalent:",
        {"arguments": {3: {"sel_of_type": b"v@:@"}}},
    )
    r(b"NSMenu", b"allowsContextMenuPlugIns", {"retval": {"type": "Z"}})
    r(b"NSMenu", b"autoenablesItems", {"retval": {"type": "Z"}})
    r(
        b"NSMenu",
        b"indexOfItemWithTarget:andAction:",
        {"arguments": {3: {"sel_of_type": b"v@:@"}}},
    )
    r(
        b"NSMenu",
        b"insertItemWithTitle:action:keyEquivalent:atIndex:",
        {"arguments": {3: {"sel_of_type": b"v@:@"}}},
    )
    r(b"NSMenu", b"isAttached", {"retval": {"type": "Z"}})
    r(b"NSMenu", b"isTornOff", {"retval": {"type": "Z"}})
    r(b"NSMenu", b"locationForSubmenu:", {"retval": {"type": "{CGPoint=dd}"}})
    r(b"NSMenu", b"menuBarVisible", {"retval": {"type": "Z"}})
    r(b"NSMenu", b"menuChangedMessagesEnabled", {"retval": {"type": "Z"}})
    r(b"NSMenu", b"menuZone", {"retval": {"type": "^{_NSZone=}"}})
    r(
        b"NSMenu",
        b"paletteMenuWithColors:titles:selectionHandler:",
        {
            "arguments": {
                4: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {0: {"type": b"^v"}, 1: {"type": b"@"}},
                    }
                }
            }
        },
    )
    r(
        b"NSMenu",
        b"paletteMenuWithColors:titles:templateImage:selectionHandler:",
        {
            "arguments": {
                5: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {0: {"type": b"^v"}, 1: {"type": b"@"}},
                    }
                }
            }
        },
    )
    r(b"NSMenu", b"performKeyEquivalent:", {"retval": {"type": "Z"}})
    r(
        b"NSMenu",
        b"popUpMenuPositioningItem:atLocation:inView:",
        {"retval": {"type": "Z"}, "arguments": {3: {"type": "{CGPoint=dd}"}}},
    )
    r(b"NSMenu", b"setAllowsContextMenuPlugIns:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSMenu", b"setAutoenablesItems:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSMenu", b"setMenuBarVisible:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSMenu", b"setMenuChangedMessagesEnabled:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSMenu", b"setMenuZone:", {"arguments": {2: {"type": "^{_NSZone=}"}}})
    r(b"NSMenu", b"setShowsStateColumn:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSMenu", b"showsStateColumn", {"retval": {"type": "Z"}})
    r(
        b"NSMenuItem",
        b"allowsAutomaticKeyEquivalentLocalization",
        {"retval": {"type": "Z"}},
    )
    r(
        b"NSMenuItem",
        b"allowsAutomaticKeyEquivalentMirroring",
        {"retval": {"type": "Z"}},
    )
    r(b"NSMenuItem", b"allowsKeyEquivalentWhenHidden", {"retval": {"type": "Z"}})
    r(b"NSMenuItem", b"hasSubmenu", {"retval": {"type": "Z"}})
    r(
        b"NSMenuItem",
        b"initWithTitle:action:keyEquivalent:",
        {"arguments": {3: {"sel_of_type": b"v@:@"}}},
    )
    r(b"NSMenuItem", b"isAlternate", {"retval": {"type": "Z"}})
    r(b"NSMenuItem", b"isEnabled", {"retval": {"type": "Z"}})
    r(b"NSMenuItem", b"isHidden", {"retval": {"type": "Z"}})
    r(b"NSMenuItem", b"isHiddenOrHasHiddenAncestor", {"retval": {"type": "Z"}})
    r(b"NSMenuItem", b"isHighlighted", {"retval": {"type": "Z"}})
    r(b"NSMenuItem", b"isSectionHeader", {"retval": {"type": b"Z"}})
    r(b"NSMenuItem", b"isSeparatorItem", {"retval": {"type": "Z"}})
    r(b"NSMenuItem", b"setAction:", {"arguments": {2: {"sel_of_type": b"v@:@"}}})
    r(
        b"NSMenuItem",
        b"setAllowsAutomaticKeyEquivalentLocalization:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(
        b"NSMenuItem",
        b"setAllowsAutomaticKeyEquivalentMirroring:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(
        b"NSMenuItem",
        b"setAllowsKeyEquivalentWhenHidden:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(b"NSMenuItem", b"setAlternate:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSMenuItem", b"setEnabled:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSMenuItem", b"setHidden:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSMenuItem", b"setUsesUserKeyEquivalents:", {"arguments": {2: {"type": b"Z"}}})
    r(b"NSMenuItem", b"usesUserKeyEquivalents", {"retval": {"type": b"Z"}})
    r(
        b"NSMenuItemCell",
        b"drawBorderAndBackgroundWithFrame:inView:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSMenuItemCell",
        b"drawImageWithFrame:inView:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSMenuItemCell",
        b"drawKeyEquivalentWithFrame:inView:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSMenuItemCell",
        b"drawSeparatorItemWithFrame:inView:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSMenuItemCell",
        b"drawStateImageWithFrame:inView:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSMenuItemCell",
        b"drawTitleWithFrame:inView:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSMenuItemCell",
        b"keyEquivalentRectForBounds:",
        {
            "retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            "arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
        },
    )
    r(b"NSMenuItemCell", b"keyEquivalentWidth", {"retval": {"type": "d"}})
    r(b"NSMenuItemCell", b"needsDisplay", {"retval": {"type": "Z"}})
    r(b"NSMenuItemCell", b"needsSizing", {"retval": {"type": "Z"}})
    r(b"NSMenuItemCell", b"setNeedsDisplay:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSMenuItemCell", b"setNeedsSizing:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSMenuItemCell",
        b"stateImageRectForBounds:",
        {
            "retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            "arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
        },
    )
    r(
        b"NSMenuItemCell",
        b"titleRectForBounds:",
        {
            "retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            "arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
        },
    )
    r(b"NSMenuToolbarItem", b"setShowsIndicator:", {"arguments": {2: {"type": b"Z"}}})
    r(b"NSMenuToolbarItem", b"showsIndicator", {"retval": {"type": b"Z"}})
    r(
        b"NSMenuView",
        b"indexOfItemAtPoint:",
        {"arguments": {2: {"type": "{CGPoint=dd}"}}},
    )
    r(
        b"NSMenuView",
        b"initWithFrame:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSMenuView",
        b"innerRect",
        {"retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
    )
    r(b"NSMenuView", b"isAttached", {"retval": {"type": "Z"}})
    r(b"NSMenuView", b"isHorizontal", {"retval": {"type": "Z"}})
    r(b"NSMenuView", b"isTornOff", {"retval": {"type": "Z"}})
    r(b"NSMenuView", b"locationForSubmenu:", {"retval": {"type": "{CGPoint=dd}"}})
    r(b"NSMenuView", b"needsSizing", {"retval": {"type": "Z"}})
    r(
        b"NSMenuView",
        b"rectOfItemAtIndex:",
        {"retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
    )
    r(b"NSMenuView", b"setHorizontal:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSMenuView", b"setNeedsSizing:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSMenuView",
        b"setWindowFrameForAttachingToRect:onScreen:preferredEdge:popUpSelectedItem:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(b"NSMenuView", b"trackWithEvent:", {"retval": {"type": "Z"}})
    r(b"NSMovie", b"QTMovie", {"retval": {"type": "^^{MovieType}"}})
    r(b"NSMovie", b"canInitWithPasteboard:", {"retval": {"type": "Z"}})
    r(b"NSMovie", b"initWithMovie:", {"arguments": {2: {"type": "^^{MovieType}"}}})
    r(b"NSMovie", b"initWithURL:byReference:", {"arguments": {3: {"type": "Z"}}})
    r(b"NSMovieView", b"isControllerVisible", {"retval": {"type": "Z"}})
    r(b"NSMovieView", b"isEditable", {"retval": {"type": "Z"}})
    r(b"NSMovieView", b"isMuted", {"retval": {"type": "Z"}})
    r(b"NSMovieView", b"isPlaying", {"retval": {"type": "Z"}})
    r(
        b"NSMovieView",
        b"movieController",
        {"retval": {"type": "^{ComponentInstanceRecord=[1l]}"}},
    )
    r(
        b"NSMovieView",
        b"movieRect",
        {"retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
    )
    r(b"NSMovieView", b"playsEveryFrame", {"retval": {"type": "Z"}})
    r(b"NSMovieView", b"playsSelectionOnly", {"retval": {"type": "Z"}})
    r(b"NSMovieView", b"setEditable:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSMovieView", b"setMuted:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSMovieView", b"setPlaysEveryFrame:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSMovieView", b"setPlaysSelectionOnly:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSMovieView",
        b"showController:adjustingSize:",
        {"arguments": {2: {"type": "Z"}, 3: {"type": "Z"}}},
    )
    r(b"NSMovieView", b"sizeForMagnification:", {"retval": {"type": "{CGSize=dd}"}})
    r(
        b"NSMutableAttributedString",
        b"applyFontTraits:range:",
        {"arguments": {3: {"type": "{_NSRange=QQ}"}}},
    )
    r(
        b"NSMutableAttributedString",
        b"fixAttachmentAttributeInRange:",
        {"arguments": {2: {"type": "{_NSRange=QQ}"}}},
    )
    r(
        b"NSMutableAttributedString",
        b"fixAttributesInRange:",
        {"arguments": {2: {"type": "{_NSRange=QQ}"}}},
    )
    r(
        b"NSMutableAttributedString",
        b"fixFontAttributeInRange:",
        {"arguments": {2: {"type": "{_NSRange=QQ}"}}},
    )
    r(
        b"NSMutableAttributedString",
        b"fixParagraphStyleAttributeInRange:",
        {"arguments": {2: {"type": "{_NSRange=QQ}"}}},
    )
    r(
        b"NSMutableAttributedString",
        b"readFromData:options:documentAttributes:",
        {"retval": {"type": "Z"}, "arguments": {4: {"type_modifier": b"o"}}},
    )
    r(
        b"NSMutableAttributedString",
        b"readFromData:options:documentAttributes:error:",
        {
            "retval": {"type": "Z"},
            "arguments": {4: {"type_modifier": b"o"}, 5: {"type_modifier": b"o"}},
        },
    )
    r(
        b"NSMutableAttributedString",
        b"readFromURL:options:documentAttributes:",
        {"retval": {"type": "Z"}, "arguments": {4: {"type_modifier": b"o"}}},
    )
    r(
        b"NSMutableAttributedString",
        b"readFromURL:options:documentAttributes:error:",
        {
            "retval": {"type": "Z"},
            "arguments": {4: {"type_modifier": b"o"}, 5: {"type_modifier": b"o"}},
        },
    )
    r(
        b"NSMutableAttributedString",
        b"setAlignment:range:",
        {"arguments": {3: {"type": "{_NSRange=QQ}"}}},
    )
    r(
        b"NSMutableAttributedString",
        b"setBaseWritingDirection:range:",
        {"arguments": {3: {"type": "{_NSRange=QQ}"}}},
    )
    r(
        b"NSMutableAttributedString",
        b"subscriptRange:",
        {"arguments": {2: {"type": "{_NSRange=QQ}"}}},
    )
    r(
        b"NSMutableAttributedString",
        b"superscriptRange:",
        {"arguments": {2: {"type": "{_NSRange=QQ}"}}},
    )
    r(
        b"NSMutableAttributedString",
        b"unscriptRange:",
        {"arguments": {2: {"type": "{_NSRange=QQ}"}}},
    )
    r(
        b"NSMutableParagraphStyle",
        b"allowsDefaultTighteningForTruncation",
        {"retval": {"type": b"Z"}},
    )
    r(
        b"NSMutableParagraphStyle",
        b"setAllowsDefaultTighteningForTruncation:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(
        b"NSMutableParagraphStyle",
        b"setUsesDefaultHyphenation:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(b"NSMutableParagraphStyle", b"usesDefaultHyphenation", {"retval": {"type": b"Z"}})
    r(b"NSNib", b"instantiateNibWithExternalNameTable:", {"retval": {"type": "Z"}})
    r(
        b"NSNib",
        b"instantiateNibWithOwner:topLevelObjects:",
        {"retval": {"type": "Z"}, "arguments": {3: {"type_modifier": b"o"}}},
    )
    r(
        b"NSNib",
        b"instantiateWithOwner:topLevelObjects:",
        {"retval": {"type": b"Z"}, "arguments": {3: {"type_modifier": b"o"}}},
    )
    r(
        b"NSObject",
        b"accessibilityActionDescription:",
        {"retval": {"type": b"@"}, "arguments": {2: {"type": b"@"}}},
    )
    r(b"NSObject", b"accessibilityActionNames", {"retval": {"type": b"@"}})
    r(
        b"NSObject",
        b"accessibilityActivationPoint",
        {"required": True, "retval": {"type": b"{CGPoint=dd}"}},
    )
    r(
        b"NSObject",
        b"accessibilityAllowedValues",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"accessibilityApplicationFocusedUIElement",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"accessibilityArrayAttributeCount:",
        {"retval": {"type": b"Q"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"accessibilityArrayAttributeValues:index:maxCount:",
        {
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"Q"}, 4: {"type": b"Q"}},
        },
    )
    r(b"NSObject", b"accessibilityAttributeNames", {"retval": {"type": b"@"}})
    r(
        b"NSObject",
        b"accessibilityAttributeValue:",
        {"retval": {"type": b"@"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"accessibilityAttributeValue:forParameter:",
        {"retval": {"type": b"@"}, "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"accessibilityAttributedStringForRange:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"{_NSRange=QQ}"}},
        },
    )
    r(
        b"NSObject",
        b"accessibilityAttributedUserInputLabels",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"accessibilityCancelButton",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"accessibilityCellForColumn:row:",
        {
            "required": True,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"q"}, 3: {"type": b"q"}},
        },
    )
    r(
        b"NSObject",
        b"accessibilityChildren",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"accessibilityChildrenInNavigationOrder",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"accessibilityClearButton",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"accessibilityCloseButton",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"accessibilityColumnCount",
        {"required": True, "retval": {"type": b"q"}},
    )
    r(
        b"NSObject",
        b"accessibilityColumnHeaderUIElements",
        {"required": False, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"accessibilityColumnIndexRange",
        {"required": True, "retval": {"type": b"{_NSRange=QQ}"}},
    )
    r(
        b"NSObject",
        b"accessibilityColumnTitles",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"accessibilityColumns",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"accessibilityContents",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"accessibilityCriticalValue",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"accessibilityCustomActions",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"accessibilityCustomRotors",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"accessibilityDecrementButton",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"accessibilityDefaultButton",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"accessibilityDisclosedByRow",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"accessibilityDisclosedRows",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"accessibilityDisclosureLevel",
        {"required": True, "retval": {"type": b"q"}},
    )
    r(
        b"NSObject",
        b"accessibilityDocument",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"accessibilityElementWithToken:",
        {"required": True, "retval": {"type": b"@"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"accessibilityExtrasMenuBar",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"accessibilityFilename",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"accessibilityFocusedUIElement",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"accessibilityFocusedWindow",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"accessibilityFrame",
        {"required": True, "retval": {"type": b"{CGRect={CGPoint=dd}{CGSize=dd}}"}},
    )
    r(
        b"NSObject",
        b"accessibilityFrameForRange:",
        {
            "required": True,
            "retval": {"type": b"{CGRect={CGPoint=dd}{CGSize=dd}}"},
            "arguments": {2: {"type": b"{_NSRange=QQ}"}},
        },
    )
    r(
        b"NSObject",
        b"accessibilityFullScreenButton",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"accessibilityGrowArea",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"accessibilityHandles",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(b"NSObject", b"accessibilityHeader", {"required": True, "retval": {"type": b"@"}})
    r(
        b"NSObject",
        b"accessibilityHeaderGroup",
        {"required": False, "retval": {"type": b"@"}},
    )
    r(b"NSObject", b"accessibilityHelp", {"required": True, "retval": {"type": b"@"}})
    r(
        b"NSObject",
        b"accessibilityHitTest:",
        {"retval": {"type": b"@"}, "arguments": {2: {"type": "{CGPoint=dd}"}}},
    )
    r(
        b"NSObject",
        b"accessibilityHorizontalScrollBar",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"accessibilityHorizontalUnitDescription",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"accessibilityHorizontalUnits",
        {"required": True, "retval": {"type": b"q"}},
    )
    r(
        b"NSObject",
        b"accessibilityIdentifier",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"accessibilityIncrementButton",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(b"NSObject", b"accessibilityIndex", {"required": True, "retval": {"type": b"q"}})
    r(
        b"NSObject",
        b"accessibilityIndexOfChild:",
        {"retval": {"type": b"Q"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"accessibilityInsertionPointLineNumber",
        {"required": True, "retval": {"type": b"q"}},
    )
    r(
        b"NSObject",
        b"accessibilityIsAttributeSettable:",
        {"retval": {"type": "Z"}, "arguments": {2: {"type": b"@"}}},
    )
    r(b"NSObject", b"accessibilityIsIgnored", {"retval": {"type": "Z"}})
    r(b"NSObject", b"accessibilityLabel", {"required": True, "retval": {"type": b"@"}})
    r(
        b"NSObject",
        b"accessibilityLabelUIElements",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"accessibilityLabelValue",
        {"required": True, "retval": {"type": b"f"}},
    )
    r(
        b"NSObject",
        b"accessibilityLayoutPointForScreenPoint:",
        {
            "required": True,
            "retval": {"type": b"{CGPoint=dd}"},
            "arguments": {2: {"type": b"{CGPoint=dd}"}},
        },
    )
    r(
        b"NSObject",
        b"accessibilityLayoutSizeForScreenSize:",
        {
            "required": True,
            "retval": {"type": b"{CGSize=dd}"},
            "arguments": {2: {"type": b"{CGSize=dd}"}},
        },
    )
    r(
        b"NSObject",
        b"accessibilityLineForIndex:",
        {"required": True, "retval": {"type": b"q"}, "arguments": {2: {"type": b"q"}}},
    )
    r(
        b"NSObject",
        b"accessibilityLinkedUIElements",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"accessibilityMainWindow",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"accessibilityMarkerGroupUIElement",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"accessibilityMarkerTypeDescription",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"accessibilityMarkerUIElements",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"accessibilityMarkerValues",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"accessibilityMaxValue",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"accessibilityMenuBar",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"accessibilityMinValue",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"accessibilityMinimizeButton",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(b"NSObject", b"accessibilityName", {"required": True, "retval": {"type": b"@"}})
    r(
        b"NSObject",
        b"accessibilityNextContents",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(b"NSObject", b"accessibilityNotifiesWhenDestroyed", {"retval": {"type": b"Z"}})
    r(
        b"NSObject",
        b"accessibilityNumberOfCharacters",
        {"required": True, "retval": {"type": b"q"}},
    )
    r(
        b"NSObject",
        b"accessibilityOrientation",
        {"required": True, "retval": {"type": b"q"}},
    )
    r(
        b"NSObject",
        b"accessibilityOverflowButton",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"accessibilityParameterizedAttributeNames",
        {"retval": {"type": b"@"}},
    )
    r(b"NSObject", b"accessibilityParent", {"required": True, "retval": {"type": b"@"}})
    r(
        b"NSObject",
        b"accessibilityPerformAction:",
        {"retval": {"type": "v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"accessibilityPerformCancel",
        {"required": True, "retval": {"type": b"Z"}},
    )
    r(
        b"NSObject",
        b"accessibilityPerformConfirm",
        {"required": True, "retval": {"type": b"Z"}},
    )
    r(
        b"NSObject",
        b"accessibilityPerformDecrement",
        {"required": False, "retval": {"type": b"Z"}},
    )
    r(
        b"NSObject",
        b"accessibilityPerformDelete",
        {"required": True, "retval": {"type": b"Z"}},
    )
    r(
        b"NSObject",
        b"accessibilityPerformIncrement",
        {"required": True, "retval": {"type": b"Z"}},
    )
    r(
        b"NSObject",
        b"accessibilityPerformPick",
        {"required": True, "retval": {"type": b"Z"}},
    )
    r(
        b"NSObject",
        b"accessibilityPerformPress",
        {"required": True, "retval": {"type": b"Z"}},
    )
    r(
        b"NSObject",
        b"accessibilityPerformRaise",
        {"required": True, "retval": {"type": b"Z"}},
    )
    r(
        b"NSObject",
        b"accessibilityPerformShowAlternateUI",
        {"required": True, "retval": {"type": b"Z"}},
    )
    r(
        b"NSObject",
        b"accessibilityPerformShowDefaultUI",
        {"required": True, "retval": {"type": b"Z"}},
    )
    r(
        b"NSObject",
        b"accessibilityPerformShowMenu",
        {"required": True, "retval": {"type": b"Z"}},
    )
    r(
        b"NSObject",
        b"accessibilityPlaceholderValue",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"accessibilityPreviousContents",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(b"NSObject", b"accessibilityProxy", {"required": True, "retval": {"type": b"@"}})
    r(
        b"NSObject",
        b"accessibilityRTFForRange:",
        {
            "required": True,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"{_NSRange=QQ}"}},
        },
    )
    r(
        b"NSObject",
        b"accessibilityRangeForIndex:",
        {
            "required": True,
            "retval": {"type": b"{_NSRange=QQ}"},
            "arguments": {2: {"type": b"q"}},
        },
    )
    r(
        b"NSObject",
        b"accessibilityRangeForLine:",
        {
            "required": True,
            "retval": {"type": b"{_NSRange=QQ}"},
            "arguments": {2: {"type": b"q"}},
        },
    )
    r(
        b"NSObject",
        b"accessibilityRangeForPosition:",
        {
            "required": True,
            "retval": {"type": b"{_NSRange=QQ}"},
            "arguments": {2: {"type": b"{CGPoint=dd}"}},
        },
    )
    r(
        b"NSObject",
        b"accessibilityRangeInTargetElementWithToken:",
        {
            "required": False,
            "retval": {"type": b"{_NSRange=QQ}"},
            "arguments": {2: {"type": b"@"}},
        },
    )
    r(b"NSObject", b"accessibilityRole", {"required": True, "retval": {"type": b"@"}})
    r(
        b"NSObject",
        b"accessibilityRoleDescription",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"accessibilityRowCount",
        {"required": True, "retval": {"type": b"q"}},
    )
    r(
        b"NSObject",
        b"accessibilityRowHeaderUIElements",
        {"required": False, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"accessibilityRowIndexRange",
        {"required": True, "retval": {"type": b"{_NSRange=QQ}"}},
    )
    r(b"NSObject", b"accessibilityRows", {"required": True, "retval": {"type": b"@"}})
    r(
        b"NSObject",
        b"accessibilityRulerMarkerType",
        {"required": True, "retval": {"type": b"q"}},
    )
    r(
        b"NSObject",
        b"accessibilityScreenPointForLayoutPoint:",
        {
            "required": True,
            "retval": {"type": b"{CGPoint=dd}"},
            "arguments": {2: {"type": b"{CGPoint=dd}"}},
        },
    )
    r(
        b"NSObject",
        b"accessibilityScreenSizeForLayoutSize:",
        {
            "required": True,
            "retval": {"type": b"{CGSize=dd}"},
            "arguments": {2: {"type": b"{CGSize=dd}"}},
        },
    )
    r(
        b"NSObject",
        b"accessibilitySearchButton",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"accessibilitySearchMenu",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"accessibilitySelectedCells",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"accessibilitySelectedChildren",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"accessibilitySelectedColumns",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"accessibilitySelectedRows",
        {"required": False, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"accessibilitySelectedText",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"accessibilitySelectedTextRange",
        {"required": True, "retval": {"type": b"{_NSRange=QQ}"}},
    )
    r(
        b"NSObject",
        b"accessibilitySelectedTextRanges",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"accessibilityServesAsTitleForUIElements",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"accessibilitySetOverrideValue:forAttribute:",
        {"retval": {"type": "Z"}, "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"accessibilitySetValue:forAttribute:",
        {"retval": {"type": "v"}, "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"accessibilitySharedCharacterRange",
        {"required": True, "retval": {"type": b"{_NSRange=QQ}"}},
    )
    r(
        b"NSObject",
        b"accessibilitySharedFocusElements",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"accessibilitySharedTextUIElements",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"accessibilityShownMenu",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"accessibilitySortDirection",
        {"required": True, "retval": {"type": b"q"}},
    )
    r(
        b"NSObject",
        b"accessibilitySplitters",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"accessibilityStringForRange:",
        {
            "required": True,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"{_NSRange=QQ}"}},
        },
    )
    r(
        b"NSObject",
        b"accessibilityStyleRangeForIndex:",
        {
            "required": True,
            "retval": {"type": b"{_NSRange=QQ}"},
            "arguments": {2: {"type": b"q"}},
        },
    )
    r(
        b"NSObject",
        b"accessibilitySubrole",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(b"NSObject", b"accessibilityTabs", {"required": True, "retval": {"type": b"@"}})
    r(b"NSObject", b"accessibilityTitle", {"required": True, "retval": {"type": b"@"}})
    r(
        b"NSObject",
        b"accessibilityTitleUIElement",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"accessibilityToolbarButton",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"accessibilityTopLevelUIElement",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(b"NSObject", b"accessibilityURL", {"required": True, "retval": {"type": b"@"}})
    r(
        b"NSObject",
        b"accessibilityUnitDescription",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(b"NSObject", b"accessibilityUnits", {"required": True, "retval": {"type": b"q"}})
    r(
        b"NSObject",
        b"accessibilityUserInputLabels",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(b"NSObject", b"accessibilityValue", {"required": True, "retval": {"type": b"@"}})
    r(
        b"NSObject",
        b"accessibilityValueDescription",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"accessibilityVerticalScrollBar",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"accessibilityVerticalUnitDescription",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"accessibilityVerticalUnits",
        {"required": True, "retval": {"type": b"q"}},
    )
    r(
        b"NSObject",
        b"accessibilityVisibleCells",
        {"required": False, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"accessibilityVisibleCharacterRange",
        {"required": False, "retval": {"type": b"{_NSRange=QQ}"}},
    )
    r(
        b"NSObject",
        b"accessibilityVisibleChildren",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"accessibilityVisibleColumns",
        {"required": False, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"accessibilityVisibleRows",
        {"required": False, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"accessibilityWarningValue",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(b"NSObject", b"accessibilityWindow", {"required": True, "retval": {"type": b"@"}})
    r(
        b"NSObject",
        b"accessibilityWindows",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"accessibilityZoomButton",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(b"NSObject", b"action", {"required": True, "retval": {"type": ":"}})
    r(
        b"NSObject",
        b"activeCompressionOptions",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"activeConversationChanged:toNewConversation:",
        {
            "required": True,
            "retval": {"type": "v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": "q"}},
        },
    )
    r(
        b"NSObject",
        b"activeConversationWillChange:fromOldConversation:",
        {
            "required": True,
            "retval": {"type": "v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": "q"}},
        },
    )
    r(
        b"NSObject",
        b"addAnnotations:range:",
        {
            "required": True,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"{_NSRange=QQ}"}},
        },
    )
    r(
        b"NSObject",
        b"adjustedRangeFromRange:forEditingTextSelection:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"Z"}},
        },
    )
    r(
        b"NSObject",
        b"alertShowHelp:",
        {"required": False, "retval": {"type": "Z"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"allowsMultipleSelection",
        {"required": False, "retval": {"type": b"Z"}},
    )
    r(b"NSObject", b"alpha", {"required": True, "retval": {"type": b"d"}})
    r(
        b"NSObject",
        b"alphaControlAddedOrRemoved:",
        {"required": True, "retval": {"type": "v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"anchoringViewForSharingService:showRelativeToRect:preferredEdge:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"^{CGRect={CGPoint=dd}{CGSize=dd}}"},
                4: {"type": b"^Q"},
            },
        },
    )
    r(
        b"NSObject",
        b"animateDismissalOfViewController:fromViewController:",
        {
            "required": True,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"animatePresentationOfViewController:fromViewController:",
        {
            "required": True,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"animatesToDestination",
        {"required": True, "retval": {"type": b"Z"}},
    )
    r(
        b"NSObject",
        b"animation:didReachProgressMark:",
        {
            "required": False,
            "retval": {"type": "v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": "f"}},
        },
    )
    r(
        b"NSObject",
        b"animation:valueForProgress:",
        {
            "required": False,
            "retval": {"type": "f"},
            "arguments": {2: {"type": b"@"}, 3: {"type": "f"}},
        },
    )
    r(
        b"NSObject",
        b"animationDidEnd:",
        {"required": False, "retval": {"type": "v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"animationDidStop:",
        {"required": False, "retval": {"type": "v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"animationForKey:",
        {"required": True, "retval": {"type": b"@"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"animationShouldStart:",
        {"required": False, "retval": {"type": "Z"}, "arguments": {2: {"type": b"@"}}},
    )
    r(b"NSObject", b"animations", {"required": True, "retval": {"type": b"@"}})
    r(b"NSObject", b"animator", {"required": True, "retval": {"type": b"@"}})
    r(
        b"NSObject",
        b"annotatedSubstringForProposedRange:actualRange:",
        {
            "required": True,
            "retval": {"type": b"@"},
            "arguments": {
                2: {"type": b"{_NSRange=QQ}"},
                3: {"type": b"^{_NSRange=QQ}", "type_modifier": b"o"},
            },
        },
    )
    r(b"NSObject", b"appearance", {"required": True, "retval": {"type": b"@"}})
    r(
        b"NSObject",
        b"application:continueUserActivity:restorationHandler:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {0: {"type": b"^v"}, 1: {"type": b"@"}},
                    },
                    "type": b"@?",
                },
            },
        },
    )
    r(
        b"NSObject",
        b"application:delegateHandlesKey:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"application:didDecodeRestorableState:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"application:didFailToContinueUserActivityWithType:error:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"application:didFailToRegisterForRemoteNotificationsWithError:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"application:didReceiveRemoteNotification:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"application:didRegisterForRemoteNotificationsWithDeviceToken:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"application:didUpdateUserActivity:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"application:handlerForIntent:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"application:openFile:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"application:openFileWithoutUI:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"application:openFiles:",
        {
            "required": False,
            "retval": {"type": "v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"application:openTempFile:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"application:openURLs:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"application:printFile:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(b"NSObject", b"application:printFiles:", {"retval": {"type": "v"}})
    r(
        b"NSObject",
        b"application:printFiles:withSettings:showPrintPanels:",
        {
            "required": False,
            "retval": {"type": "I"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {"type": b"@"},
                5: {"type": "Z"},
            },
        },
    )
    r(
        b"NSObject",
        b"application:userDidAcceptCloudKitShareWithMetadata:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"application:willContinueUserActivityWithType:",
        {
            "required": False,
            "retval": {"type": b"Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"application:willEncodeRestorableState:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"application:willPresentError:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"applicationDidBecomeActive:",
        {"required": False, "retval": {"type": "v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"applicationDidChangeOcclusionState:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"applicationDidChangeScreenParameters:",
        {"required": False, "retval": {"type": "v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"applicationDidFinishLaunching:",
        {"required": False, "retval": {"type": "v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"applicationDidHide:",
        {"required": False, "retval": {"type": "v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"applicationDidResignActive:",
        {"required": False, "retval": {"type": "v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"applicationDidUnhide:",
        {"required": False, "retval": {"type": "v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"applicationDidUpdate:",
        {"required": False, "retval": {"type": "v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"applicationDockMenu:",
        {"required": False, "retval": {"type": b"@"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"applicationOpenUntitledFile:",
        {"required": False, "retval": {"type": "Z"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"applicationProtectedDataDidBecomeAvailable:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"applicationProtectedDataWillBecomeUnavailable:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"applicationShouldAutomaticallyLocalizeKeyEquivalents:",
        {"required": False, "retval": {"type": b"Z"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"applicationShouldHandleReopen:hasVisibleWindows:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": "Z"}},
        },
    )
    r(
        b"NSObject",
        b"applicationShouldOpenUntitledFile:",
        {"required": False, "retval": {"type": "Z"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"applicationShouldTerminate:",
        {"required": False, "retval": {"type": "I"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"applicationShouldTerminateAfterLastWindowClosed:",
        {"required": False, "retval": {"type": "Z"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"applicationSupportsSecureRestorableState:",
        {"required": False, "retval": {"type": "Z"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"applicationWillBecomeActive:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"applicationWillFinishLaunching:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"applicationWillHide:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"applicationWillResignActive:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"applicationWillTerminate:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"applicationWillUnhide:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"applicationWillUpdate:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"applyLayoutAttributes:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"attachColorList:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(b"NSObject", b"attachment", {"required": True, "retval": {"type": b"@"}})
    r(
        b"NSObject",
        b"attachmentBoundsForAttributes:location:textContainer:proposedLineFragment:position:",
        {
            "required": True,
            "retval": {"type": b"{CGRect={CGPoint=dd}{CGSize=dd}}"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {"type": b"@"},
                5: {"type": b"{CGRect={CGPoint=dd}{CGSize=dd}}"},
                6: {"type": b"{CGPoint=dd}"},
            },
        },
    )
    r(
        b"NSObject",
        b"attachmentBoundsForTextContainer:proposedLineFragment:glyphPosition:characterIndex:",
        {
            "required": True,
            "retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                4: {"type": "{CGPoint=dd}"},
                5: {"type": "Q"},
            },
        },
    )
    r(b"NSObject", b"attributedString", {"required": False, "retval": {"type": b"@"}})
    r(
        b"NSObject",
        b"attributedSubstringForProposedRange:actualRange:",
        {
            "required": True,
            "retval": {"type": b"@"},
            "arguments": {
                2: {"type": "{_NSRange=QQ}"},
                3: {"type": "^{_NSRange=QQ}", "type_modifier": b"o"},
            },
        },
    )
    r(
        b"NSObject",
        b"attributedSubstringFromRange:",
        {
            "required": True,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": "{_NSRange=QQ}"}},
        },
    )
    r(b"NSObject", b"autocorrectionType", {"required": False, "retval": {"type": b"q"}})
    r(b"NSObject", b"awakeFromNib", {"retval": {"type": b"v"}})
    r(
        b"NSObject",
        b"baseWritingDirectionAtLocation:",
        {"required": True, "retval": {"type": b"q"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"baselineDeltaForCharacterAtIndex:",
        {"required": False, "retval": {"type": "d"}, "arguments": {2: {"type": "Q"}}},
    )
    r(
        b"NSObject",
        b"bind:toObject:withKeyPath:options:",
        {
            "retval": {"type": b"v"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {"type": b"@"},
                5: {"type": b"@"},
            },
        },
    )
    r(
        b"NSObject",
        b"bounds",
        {"required": True, "retval": {"type": b"{CGRect={CGPoint=dd}{CGSize=dd}}"}},
    )
    r(
        b"NSObject",
        b"browser:acceptDrop:atRow:column:dropOperation:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {"type": "q"},
                5: {"type": "q"},
                6: {"type": "I"},
            },
        },
    )
    r(
        b"NSObject",
        b"browser:canDragRowsWithIndexes:inColumn:withEvent:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {"type": "q"},
                5: {"type": b"@"},
            },
        },
    )
    r(
        b"NSObject",
        b"browser:child:ofItem:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"q"}, 4: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"browser:createRowsForColumn:inMatrix:",
        {
            "required": False,
            "retval": {"type": "v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": "q"}, 4: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"browser:didChangeLastColumn:toColumn:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"q"}, 4: {"type": b"q"}},
        },
    )
    r(
        b"NSObject",
        b"browser:draggingImageForRowsWithIndexes:inColumn:withEvent:offset:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {"type": b"q"},
                5: {"type": b"@"},
                6: {"type": "N^{CGPoint=dd}"},
            },
        },
    )
    r(
        b"NSObject",
        b"browser:headerViewControllerForItem:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"browser:heightOfRow:inColumn:",
        {
            "required": False,
            "retval": {"type": "d"},
            "arguments": {2: {"type": b"@"}, 3: {"type": "q"}, 4: {"type": "q"}},
        },
    )
    r(
        b"NSObject",
        b"browser:isColumnValid:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": "q"}},
        },
    )
    r(
        b"NSObject",
        b"browser:isLeafItem:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"browser:namesOfPromisedFilesDroppedAtDestination:forDraggedRowsWithIndexes:inColumn:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {"type": b"@"},
                5: {"type": "q"},
            },
        },
    )
    r(
        b"NSObject",
        b"browser:nextTypeSelectMatchFromRow:toRow:inColumn:forString:",
        {
            "required": False,
            "retval": {"type": "Q"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": "q"},
                4: {"type": "q"},
                5: {"type": "q"},
                6: {"type": b"@"},
            },
        },
    )
    r(
        b"NSObject",
        b"browser:numberOfChildrenOfItem:",
        {
            "required": False,
            "retval": {"type": b"q"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"browser:numberOfRowsInColumn:",
        {
            "required": False,
            "retval": {"type": "q"},
            "arguments": {2: {"type": b"@"}, 3: {"type": "q"}},
        },
    )
    r(
        b"NSObject",
        b"browser:objectValueForItem:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"browser:previewViewControllerForLeafItem:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"browser:selectCellWithString:inColumn:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": "q"}},
        },
    )
    r(
        b"NSObject",
        b"browser:selectRow:inColumn:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": "q"}, 4: {"type": "q"}},
        },
    )
    r(
        b"NSObject",
        b"browser:selectionIndexesForProposedSelection:inColumn:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": b"q"}},
        },
    )
    r(
        b"NSObject",
        b"browser:setObjectValue:forItem:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"browser:shouldEditItem:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"browser:shouldShowCellExpansionForRow:column:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": "q"}, 4: {"type": "q"}},
        },
    )
    r(
        b"NSObject",
        b"browser:shouldSizeColumn:forUserResize:toWidth:",
        {
            "required": False,
            "retval": {"type": "d"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": "q"},
                4: {"type": "Z"},
                5: {"type": "d"},
            },
        },
    )
    r(
        b"NSObject",
        b"browser:shouldTypeSelectForEvent:withCurrentSearchString:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"browser:sizeToFitWidthOfColumn:",
        {
            "required": False,
            "retval": {"type": "d"},
            "arguments": {2: {"type": b"@"}, 3: {"type": "q"}},
        },
    )
    r(
        b"NSObject",
        b"browser:titleOfColumn:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": "q"}},
        },
    )
    r(
        b"NSObject",
        b"browser:typeSelectStringForRow:inColumn:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": "q"}, 4: {"type": "q"}},
        },
    )
    r(
        b"NSObject",
        b"browser:validateDrop:proposedRow:column:dropOperation:",
        {
            "required": False,
            "retval": {"type": "Q"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {"type": b"^q", "type_modifier": b"N"},
                5: {"type": b"^q", "type_modifier": b"N"},
                6: {"type": b"^Q", "type_modifier": b"N"},
            },
        },
    )
    r(
        b"NSObject",
        b"browser:willDisplayCell:atRow:column:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {"type": "q"},
                5: {"type": "q"},
            },
        },
    )
    r(
        b"NSObject",
        b"browser:writeRowsWithIndexes:inColumn:toPasteboard:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {"type": "q"},
                5: {"type": b"@"},
            },
        },
    )
    r(
        b"NSObject",
        b"browserColumnConfigurationDidChange:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"browserDidScroll:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"browserWillScroll:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(b"NSObject", b"buttonToolTip", {"required": True, "retval": {"type": b"@"}})
    r(b"NSObject", b"canBeDisabled", {"required": True, "retval": {"type": "Z"}})
    r(
        b"NSObject",
        b"cancelOperation:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"candidateListTouchBarItem",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"candidateListTouchBarItem:beginSelectingCandidateAtIndex:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": "q"}},
        },
    )
    r(
        b"NSObject",
        b"candidateListTouchBarItem:changeSelectionFromCandidateAtIndex:toIndex:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": "q"}, 4: {"type": "q"}},
        },
    )
    r(
        b"NSObject",
        b"candidateListTouchBarItem:changedCandidateListVisibility:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": "Z"}},
        },
    )
    r(
        b"NSObject",
        b"candidateListTouchBarItem:endSelectingCandidateAtIndex:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": "q"}},
        },
    )
    r(
        b"NSObject",
        b"capitalizeWord:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"cellBaselineOffset",
        {"required": True, "retval": {"type": "{CGPoint=dd}"}},
    )
    r(
        b"NSObject",
        b"cellFrameForTextContainer:proposedLineFragment:glyphPosition:characterIndex:",
        {
            "required": True,
            "retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                4: {"type": "{CGPoint=dd}"},
                5: {"type": "Q"},
            },
        },
    )
    r(b"NSObject", b"cellSize", {"required": True, "retval": {"type": "{CGSize=dd}"}})
    r(b"NSObject", b"center", {"required": True, "retval": {"type": b"{CGPoint=dd}"}})
    r(
        b"NSObject",
        b"centerSelectionInVisibleArea:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"changeCaseOfLetter:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"changeColor:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"changeFont:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"changeSpelling:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"characterIndexForPoint:",
        {
            "required": True,
            "retval": {"type": "Q"},
            "arguments": {2: {"type": "{CGPoint=dd}"}},
        },
    )
    r(
        b"NSObject",
        b"cloudShareForUserInterfaceItem:",
        {"required": True, "retval": {"type": b"@"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"collectionView:acceptDrop:index:dropOperation:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {"type": "q"},
                5: {"type": "q"},
            },
        },
    )
    r(
        b"NSObject",
        b"collectionView:acceptDrop:indexPath:dropOperation:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {"type": b"@"},
                5: {"type": "q"},
            },
        },
    )
    r(
        b"NSObject",
        b"collectionView:canDragItemsAtIndexPaths:withEvent:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"collectionView:canDragItemsAtIndexes:withEvent:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"collectionView:cancelPrefetchingForItemsAtIndexPaths:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"collectionView:didChangeItemsAtIndexPaths:toHighlightState:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": "q"}},
        },
    )
    r(
        b"NSObject",
        b"collectionView:didDeselectItemsAtIndexPaths:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"collectionView:didEndDisplayingItem:forRepresentedObjectAtIndexPath:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"collectionView:didEndDisplayingSupplementaryView:forElementOfKind:atIndexPath:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {"type": b"@"},
                5: {"type": b"@"},
            },
        },
    )
    r(
        b"NSObject",
        b"collectionView:didSelectItemsAtIndexPaths:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"collectionView:draggingImageForItemsAtIndexPaths:withEvent:offset:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {"type": b"@"},
                5: {"type": "^{CGPoint=dd}", "type_modifier": b"N"},
            },
        },
    )
    r(
        b"NSObject",
        b"collectionView:draggingImageForItemsAtIndexes:withEvent:offset:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {"type": b"@"},
                5: {"type": "^{CGPoint=dd}", "type_modifier": b"N"},
            },
        },
    )
    r(
        b"NSObject",
        b"collectionView:draggingSession:endedAtPoint:dragOperation:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {"type": b"{CGPoint=dd}"},
                5: {"type": b"Q"},
            },
        },
    )
    r(
        b"NSObject",
        b"collectionView:draggingSession:endedAtPoint:draggingOperation:",
        {"arguments": {4: {"type": "{CGPoint=dd}"}, 5: {"type": "q"}}},
    )
    r(
        b"NSObject",
        b"collectionView:draggingSession:willBeginAtPoint:forItemsAtIndexPaths:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {"type": "{CGPoint=dd}"},
                5: {"type": b"@"},
            },
        },
    )
    r(
        b"NSObject",
        b"collectionView:draggingSession:willBeginAtPoint:forItemsAtIndexes:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {"type": "{CGPoint=dd}"},
                5: {"type": b"@"},
            },
        },
    )
    r(
        b"NSObject",
        b"collectionView:itemForRepresentedObjectAtIndexPath:",
        {
            "required": True,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"collectionView:layout:insetForSectionAtIndex:",
        {
            "required": False,
            "retval": {"type": "{NSEdgeInsets=dddd}"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": "q"}},
        },
    )
    r(
        b"NSObject",
        b"collectionView:layout:minimumInteritemSpacingForSectionAtIndex:",
        {
            "required": False,
            "retval": {"type": "d"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": "q"}},
        },
    )
    r(
        b"NSObject",
        b"collectionView:layout:minimumLineSpacingForSectionAtIndex:",
        {
            "required": False,
            "retval": {"type": "d"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": "q"}},
        },
    )
    r(
        b"NSObject",
        b"collectionView:layout:referenceSizeForFooterInSection:",
        {
            "required": False,
            "retval": {"type": "{CGSize=dd}"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": "q"}},
        },
    )
    r(
        b"NSObject",
        b"collectionView:layout:referenceSizeForHeaderInSection:",
        {
            "required": False,
            "retval": {"type": "{CGSize=dd}"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": "q"}},
        },
    )
    r(
        b"NSObject",
        b"collectionView:layout:sizeForItemAtIndexPath:",
        {
            "required": False,
            "retval": {"type": "{CGSize=dd}"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"collectionView:namesOfPromisedFilesDroppedAtDestination:forDraggedItemsAtIndexPaths:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"collectionView:namesOfPromisedFilesDroppedAtDestination:forDraggedItemsAtIndexes:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"collectionView:numberOfItemsInSection:",
        {
            "required": True,
            "retval": {"type": "q"},
            "arguments": {2: {"type": b"@"}, 3: {"type": "q"}},
        },
    )
    r(
        b"NSObject",
        b"collectionView:pasteboardWriterForItemAtIndex:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": "q"}},
        },
    )
    r(
        b"NSObject",
        b"collectionView:pasteboardWriterForItemAtIndexPath:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"collectionView:prefetchItemsAtIndexPaths:",
        {
            "required": True,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"collectionView:shouldChangeItemsAtIndexPaths:toHighlightState:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": "q"}},
        },
    )
    r(
        b"NSObject",
        b"collectionView:shouldDeselectItemsAtIndexPaths:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"collectionView:shouldSelectItemsAtIndexPaths:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"collectionView:transitionLayoutForOldLayout:newLayout:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"collectionView:updateDraggingItemsForDrag:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"collectionView:validateDrop:proposedIndex:dropOperation:",
        {
            "required": False,
            "retval": {"type": "q"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {"type": "^q", "type_modifier": b"N"},
                5: {"type": "^q", "type_modifier": b"N"},
            },
        },
    )
    r(
        b"NSObject",
        b"collectionView:validateDrop:proposedIndexPath:dropOperation:",
        {
            "required": False,
            "retval": {"type": "Q"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {"type": "^@", "type_modifier": b"N"},
                5: {"type": b"^q"},
            },
        },
    )
    r(
        b"NSObject",
        b"collectionView:viewForSupplementaryElementOfKind:atIndexPath:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"collectionView:willDisplayItem:forRepresentedObjectAtIndexPath:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"collectionView:willDisplaySupplementaryView:forElementKind:atIndexPath:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {"type": b"@"},
                5: {"type": b"@"},
            },
        },
    )
    r(
        b"NSObject",
        b"collectionView:writeItemsAtIndexPaths:toPasteboard:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"collectionView:writeItemsAtIndexes:toPasteboard:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"comboBox:completedString:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"comboBox:indexOfItemWithStringValue:",
        {
            "required": False,
            "retval": {"type": "Q"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"comboBox:objectValueForItemAtIndex:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": "q"}},
        },
    )
    r(
        b"NSObject",
        b"comboBoxCell:completedString:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"comboBoxCell:indexOfItemWithStringValue:",
        {
            "required": False,
            "retval": {"type": "Q"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"comboBoxCell:objectValueForItemAtIndex:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": "q"}},
        },
    )
    r(
        b"NSObject",
        b"comboBoxSelectionDidChange:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"comboBoxSelectionIsChanging:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"comboBoxWillDismiss:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"comboBoxWillPopUp:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(b"NSObject", b"commitEditing", {"required": True, "retval": {"type": "Z"}})
    r(
        b"NSObject",
        b"commitEditingAndReturnError:",
        {
            "required": True,
            "retval": {"type": b"Z"},
            "arguments": {2: {"type": b"^@", "type_modifier": b"o"}},
        },
    )
    r(
        b"NSObject",
        b"commitEditingWithDelegate:didCommitSelector:contextInfo:",
        {
            "required": True,
            "retval": {"type": "v"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": ":", "sel_of_type": b"v@:@Z^v"},
                4: {"type": "^v"},
            },
        },
    )
    r(
        b"NSObject",
        b"compare:",
        {"required": True, "retval": {"type": b"q"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"complete:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"compressWithPrioritizedCompressionOptions:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"concludeDragOperation:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"confinementRectForMenu:onScreen:",
        {
            "required": False,
            "retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(b"NSObject", b"container", {"required": True, "retval": {"type": b"@"}})
    r(
        b"NSObject",
        b"contentInsets",
        {"required": True, "retval": {"type": b"{NSDirectionalEdgeInsets=dddd}"}},
    )
    r(
        b"NSObject",
        b"contentSize",
        {"required": True, "retval": {"type": b"{CGSize=dd}"}},
    )
    r(b"NSObject", b"contentType", {"required": True, "retval": {"type": b"@"}})
    r(b"NSObject", b"contentView", {"required": False, "retval": {"type": b"@"}})
    r(
        b"NSObject",
        b"contentViewAtIndex:effectiveCharacterRange:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": "Q"}, 3: {"type": "o^{_NSRange=QQ}"}},
        },
    )
    r(
        b"NSObject",
        b"control:didFailToFormatString:errorDescription:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"control:didFailToValidatePartialString:errorDescription:",
        {
            "required": False,
            "retval": {"type": "v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"control:isValidObject:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"control:textShouldBeginEditing:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"control:textShouldEndEditing:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"control:textView:completions:forPartialWordRange:indexOfSelectedItem:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {"type": b"@"},
                5: {"type": "{_NSRange=QQ}"},
                6: {"null_accepted": False, "type": "^q", "type_modifier": b"N"},
            },
        },
    )
    r(
        b"NSObject",
        b"control:textView:doCommandBySelector:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {"type": ":", "sel_of_type": b"v@:@"},
            },
        },
    )
    r(
        b"NSObject",
        b"controlTextDidBeginEditing:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"controlTextDidChange:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"controlTextDidEndEditing:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"conversationIdentifier",
        {"required": True, "retval": {"type": "q"}},
    )
    r(b"NSObject", b"currentMode", {"required": True, "retval": {"type": "i"}})
    r(
        b"NSObject",
        b"customWindowsToEnterFullScreenForWindow:",
        {"required": False, "retval": {"type": b"@"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"customWindowsToEnterFullScreenForWindow:onScreen:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"customWindowsToExitFullScreenForWindow:",
        {"required": False, "retval": {"type": b"@"}, "arguments": {2: {"type": b"@"}}},
    )
    r(b"NSObject", b"dataDetectionType", {"required": False, "retval": {"type": b"q"}})
    r(
        b"NSObject",
        b"datePickerCell:validateProposedDateValue:timeInterval:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": "^@", "type_modifier": b"N"},
                4: {"type": "^d", "type_modifier": b"N"},
            },
        },
    )
    r(
        b"NSObject",
        b"defaultAnimationForKey:",
        {"required": True, "retval": {"type": b"@"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"defaultPlaceholderForMarker:withBinding:",
        {"retval": {"type": b"@"}, "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"deleteBackward:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"deleteBackwardByDecomposingPreviousCharacter:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"deleteForward:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"deleteToBeginningOfLine:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"deleteToBeginningOfParagraph:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"deleteToEndOfLine:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"deleteToEndOfParagraph:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"deleteToMark:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"deleteWordBackward:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"deleteWordForward:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"detachColorList:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"detachableWindowForPopover:",
        {"required": False, "retval": {"type": b"@"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"didBeginInteractingWithScrubber:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"didCancelInteractingWithScrubber:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"didFinishInteractingWithScrubber:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"didReplaceCharacters",
        {"required": False, "retval": {"type": b"v"}},
    )
    r(
        b"NSObject",
        b"didTransitionFromLayout:toLayout:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(b"NSObject", b"discardEditing", {"required": True, "retval": {"type": b"v"}})
    r(
        b"NSObject",
        b"doCommandBySelector:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": ":", "sel_of_type": b"v@:@"}},
        },
    )
    r(
        b"NSObject",
        b"doCommandBySelector:client:",
        {
            "required": True,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": ":", "sel_of_type": b"v@:@"}, 3: {"type": b"@"}},
        },
    )
    r(b"NSObject", b"dockMenu", {"required": False, "retval": {"type": b"@"}})
    r(b"NSObject", b"documentRange", {"required": True, "retval": {"type": b"@"}})
    r(
        b"NSObject",
        b"documentVisibleRect",
        {"required": False, "retval": {"type": b"{CGRect={CGPoint=dd}{CGSize=dd}}"}},
    )
    r(b"NSObject", b"draggedImage", {"required": True, "retval": {"type": b"@"}})
    r(
        b"NSObject",
        b"draggedImage:beganAt:",
        {
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": "{CGPoint=dd}"}},
        },
    )
    r(
        b"NSObject",
        b"draggedImage:endedAt:deposited:",
        {
            "retval": {"type": b"v"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": "{CGPoint=dd}"},
                4: {"type": "Z"},
            },
        },
    )
    r(
        b"NSObject",
        b"draggedImage:endedAt:operation:",
        {
            "retval": {"type": b"v"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": "{CGPoint=dd}"},
                4: {"type": "Q"},
            },
        },
    )
    r(
        b"NSObject",
        b"draggedImage:movedTo:",
        {
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": "{CGPoint=dd}"}},
        },
    )
    r(
        b"NSObject",
        b"draggedImageLocation",
        {"required": True, "retval": {"type": "{CGPoint=dd}"}},
    )
    r(
        b"NSObject",
        b"draggingDestinationWindow",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"draggingEnded:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"draggingEntered:",
        {"required": False, "retval": {"type": "Q"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"draggingExited:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(b"NSObject", b"draggingFormation", {"required": True, "retval": {"type": b"q"}})
    r(
        b"NSObject",
        b"draggingLocation",
        {"required": True, "retval": {"type": "{CGPoint=dd}"}},
    )
    r(b"NSObject", b"draggingPasteboard", {"required": True, "retval": {"type": b"@"}})
    r(
        b"NSObject",
        b"draggingSequenceNumber",
        {"required": True, "retval": {"type": "q"}},
    )
    r(
        b"NSObject",
        b"draggingSession:endedAtPoint:operation:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"{CGPoint=dd}"},
                4: {"type": b"Q"},
            },
        },
    )
    r(
        b"NSObject",
        b"draggingSession:movedToPoint:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"{CGPoint=dd}"}},
        },
    )
    r(
        b"NSObject",
        b"draggingSession:sourceOperationMaskForDraggingContext",
        {"retval": {"type": "Q"}, "arguments": {3: {"type": "q"}}},
    )
    r(
        b"NSObject",
        b"draggingSession:sourceOperationMaskForDraggingContext:",
        {
            "required": True,
            "retval": {"type": b"Q"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"q"}},
        },
    )
    r(
        b"NSObject",
        b"draggingSession:willBeginAtPoint:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"{CGPoint=dd}"}},
        },
    )
    r(b"NSObject", b"draggingSource", {"required": True, "retval": {"type": b"@"}})
    r(
        b"NSObject",
        b"draggingSourceOperationMask",
        {"required": True, "retval": {"type": "Q"}},
    )
    r(
        b"NSObject",
        b"draggingSourceOperationMaskForLocal:",
        {"retval": {"type": "Q"}, "arguments": {2: {"type": "Z"}}},
    )
    r(
        b"NSObject",
        b"draggingUpdated:",
        {"required": False, "retval": {"type": "Q"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"drawCharactersInRange:forContentView:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"{_NSRange=QQ}"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"drawWithFrame:inView:",
        {
            "required": True,
            "retval": {"type": "v"},
            "arguments": {
                2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                3: {"type": b"@"},
            },
        },
    )
    r(
        b"NSObject",
        b"drawWithFrame:inView:characterIndex:",
        {
            "required": True,
            "retval": {"type": "v"},
            "arguments": {
                2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                3: {"type": b"@"},
                4: {"type": "Q"},
            },
        },
    )
    r(
        b"NSObject",
        b"drawWithFrame:inView:characterIndex:layoutManager:",
        {
            "required": True,
            "retval": {"type": "v"},
            "arguments": {
                2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                3: {"type": b"@"},
                4: {"type": "Q"},
                5: {"type": b"@"},
            },
        },
    )
    r(
        b"NSObject",
        b"drawerDidClose:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"drawerDidOpen:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"drawerShouldClose:",
        {"required": False, "retval": {"type": "Z"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"drawerShouldOpen:",
        {"required": False, "retval": {"type": "Z"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"drawerWillClose:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"drawerWillOpen:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"drawerWillResizeContents:toSize:",
        {
            "required": False,
            "retval": {"type": "{CGSize=dd}"},
            "arguments": {2: {"type": b"@"}, 3: {"type": "{CGSize=dd}"}},
        },
    )
    r(
        b"NSObject",
        b"drawsVerticallyForCharacterAtIndex:",
        {"required": False, "retval": {"type": "Z"}, "arguments": {2: {"type": "q"}}},
    )
    r(b"NSObject", b"editable", {"retval": {"type": b"Z"}})
    r(b"NSObject", b"effectiveAppearance", {"required": True, "retval": {"type": b"@"}})
    r(
        b"NSObject",
        b"effectiveContentInsets",
        {"required": True, "retval": {"type": b"{NSDirectionalEdgeInsets=dddd}"}},
    )
    r(
        b"NSObject",
        b"effectiveContentSize",
        {"required": True, "retval": {"type": b"{CGSize=dd}"}},
    )
    r(
        b"NSObject",
        b"enumerateCaretOffsetsInLineFragmentAtLocation:usingBlock:",
        {
            "required": True,
            "retval": {"type": b"v"},
            "arguments": {
                2: {"type": b"@"},
                3: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {
                            0: {"type": b"^v"},
                            1: {"type": b"d"},
                            2: {"type": b"@"},
                            3: {"type": b"Z"},
                            4: {"type": b"o^Z"},
                        },
                    },
                    "type": b"@?",
                },
            },
        },
    )
    r(
        b"NSObject",
        b"enumerateContainerBoundariesFromLocation:reverse:usingBlock:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"Z"},
                4: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {
                            0: {"type": b"^v"},
                            1: {"type": b"@"},
                            2: {"type": b"o^Z"},
                        },
                    },
                    "type": b"@?",
                },
            },
        },
    )
    r(
        b"NSObject",
        b"enumerateDraggingItemsWithOptions:forView:classes:searchOptions:usingBlock:",
        {
            "required": True,
            "retval": {"type": b"v"},
            "arguments": {
                2: {"type": b"Q"},
                3: {"type": b"@"},
                4: {"type": b"@"},
                5: {"type": b"@"},
                6: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {
                            0: {"type": b"^v"},
                            1: {"type": b"@"},
                            2: {"type": b"q"},
                            3: {"type": b"o^Z"},
                        },
                    },
                    "type": b"@?",
                },
            },
        },
    )
    r(
        b"NSObject",
        b"enumerateSubstringsFromLocation:options:usingBlock:",
        {
            "required": True,
            "retval": {"type": b"v"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"Q"},
                4: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {
                            0: {"type": b"^v"},
                            1: {"type": b"@"},
                            2: {"type": b"@"},
                            3: {"type": b"@"},
                            4: {"type": b"o^Z"},
                        },
                    },
                    "type": b"@?",
                },
            },
        },
    )
    r(
        b"NSObject",
        b"enumerateTextElementsFromLocation:options:usingBlock:",
        {
            "required": True,
            "retval": {"type": b"@"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"Q"},
                4: {
                    "callable": {
                        "retval": {"type": b"Z"},
                        "arguments": {0: {"type": b"^v"}, 1: {"type": b"@"}},
                    },
                    "type": b"@?",
                },
            },
        },
    )
    r(
        b"NSObject",
        b"exposeBinding:",
        {"retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(b"NSObject", b"exposedBindings", {"retval": {"type": b"@"}})
    r(
        b"NSObject",
        b"filePromiseProvider:fileNameForType:",
        {
            "required": True,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"filePromiseProvider:writePromiseToURL:completionHandler:",
        {
            "required": True,
            "retval": {"type": b"v"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {0: {"type": b"^v"}, 1: {"type": b"@"}},
                    },
                    "type": "@?",
                },
            },
        },
    )
    r(b"NSObject", b"findBarView", {"required": True, "retval": {"type": b"@"}})
    r(
        b"NSObject",
        b"findBarViewDidChangeHeight",
        {"required": True, "retval": {"type": b"v"}},
    )
    r(b"NSObject", b"findBarVisible", {"retval": {"type": b"Z"}})
    r(
        b"NSObject",
        b"firstRectForCharacterRange:",
        {
            "required": True,
            "retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            "arguments": {2: {"type": "{_NSRange=QQ}"}},
        },
    )
    r(
        b"NSObject",
        b"firstRectForCharacterRange:actualRange:",
        {
            "required": True,
            "retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            "arguments": {
                2: {"type": "{_NSRange=QQ}"},
                3: {"type": "^{_NSRange=QQ}", "type_modifier": b"o"},
            },
        },
    )
    r(
        b"NSObject",
        b"firstSelectedRange",
        {"required": False, "retval": {"type": b"{_NSRange=QQ}"}},
    )
    r(
        b"NSObject",
        b"fontManager:willIncludeFont:",
        {"retval": {"type": "Z"}, "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"fractionOfDistanceThroughGlyphForPoint:",
        {
            "required": False,
            "retval": {"type": "d"},
            "arguments": {2: {"type": "{CGPoint=dd}"}},
        },
    )
    r(
        b"NSObject",
        b"frame",
        {"required": True, "retval": {"type": b"{CGRect={CGPoint=dd}{CGSize=dd}}"}},
    )
    r(
        b"NSObject",
        b"gestureRecognizer:shouldAttemptToRecognizeWithEvent:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"gestureRecognizer:shouldBeRequiredToFailByGestureRecognizer:",
        {
            "required": False,
            "retval": {"type": b"Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"gestureRecognizer:shouldReceiveTouch:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:",
        {
            "required": False,
            "retval": {"type": b"Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"gestureRecognizer:shouldRequireFailureOfGestureRecognizer:",
        {
            "required": False,
            "retval": {"type": b"Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"gestureRecognizerShouldBegin:",
        {"required": False, "retval": {"type": b"Z"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"grammarCheckingType",
        {"required": False, "retval": {"type": b"q"}},
    )
    r(b"NSObject", b"hasMarkedText", {"required": True, "retval": {"type": "Z"}})
    r(
        b"NSObject",
        b"highlight:withFrame:inView:",
        {
            "required": True,
            "retval": {"type": b"v"},
            "arguments": {
                2: {"type": "Z"},
                3: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                4: {"type": b"@"},
            },
        },
    )
    r(
        b"NSObject",
        b"hyphenCharacterForGlyphAtIndex:",
        {"retval": {"type": "i"}, "arguments": {2: {"type": "Q"}}},
    )
    r(
        b"NSObject",
        b"hyphenationFactorForGlyphAtIndex:",
        {"retval": {"type": "f"}, "arguments": {2: {"type": "Q"}}},
    )
    r(b"NSObject", b"iconProvider", {"required": False, "retval": {"type": b"@"}})
    r(b"NSObject", b"identifier", {"required": True, "retval": {"type": b"@"}})
    r(
        b"NSObject",
        b"ignoreModifierKeysForDraggingSession:",
        {"required": False, "retval": {"type": b"Z"}, "arguments": {2: {"type": b"@"}}},
    )
    r(b"NSObject", b"ignoreModifierKeysWhileDragging", {"retval": {"type": "Z"}})
    r(
        b"NSObject",
        b"ignoreSpelling:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"image:didLoadPartOfRepresentation:withValidRows:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": "q"}},
        },
    )
    r(
        b"NSObject",
        b"image:didLoadRepresentation:withStatus:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": "Q"}},
        },
    )
    r(
        b"NSObject",
        b"image:didLoadRepresentationHeader:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"image:willLoadRepresentation:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"imageDidNotDraw:inRect:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            },
        },
    )
    r(
        b"NSObject",
        b"imageForBounds:attributes:location:textContainer:",
        {
            "required": True,
            "retval": {"type": b"@"},
            "arguments": {
                2: {"type": b"{CGRect={CGPoint=dd}{CGSize=dd}}"},
                3: {"type": b"@"},
                4: {"type": b"@"},
                5: {"type": b"@"},
            },
        },
    )
    r(
        b"NSObject",
        b"imageForBounds:textContainer:characterIndex:",
        {
            "required": True,
            "retval": {"type": b"@"},
            "arguments": {
                2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                3: {"type": b"@"},
                4: {"type": "Q"},
            },
        },
    )
    r(b"NSObject", b"imageProvider", {"required": False, "retval": {"type": b"@"}})
    r(
        b"NSObject",
        b"indent:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(b"NSObject", b"indexPath", {"required": True, "retval": {"type": b"@"}})
    r(
        b"NSObject",
        b"infoForBinding:",
        {"retval": {"type": b"@"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"initWithPasteboardPropertyList:ofType:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"initWithPickerMask:colorPanel:",
        {
            "required": True,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": "Q"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"inlinePredictionType",
        {"required": False, "retval": {"type": b"q"}},
    )
    r(
        b"NSObject",
        b"inputClientBecomeActive:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"inputClientDisabled:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"inputClientEnabled:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"inputClientResignActive:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"insertBacktab:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"insertContainerBreak:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"insertDoubleQuoteIgnoringSubstitution:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"insertGlyphs:length:forStartingGlyphAtIndex:characterIndex:",
        {
            "required": True,
            "retval": {"type": b"v"},
            "arguments": {
                2: {"type": "^I", "type_modifier": b"n", "c_array_length_in_arg": 3},
                3: {"type": "Q"},
                4: {"type": "Q"},
                5: {"type": "Q"},
            },
        },
    )
    r(
        b"NSObject",
        b"insertLineBreak:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"insertNewButtonImage:in:",
        {
            "required": True,
            "retval": {"type": "v"},
            "arguments": {2: {"type": "@"}, 3: {"type": "@"}},
        },
    )
    r(
        b"NSObject",
        b"insertNewline:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"insertNewlineIgnoringFieldEditor:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"insertParagraphSeparator:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"insertSingleQuoteIgnoringSubstitution:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"insertTab:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"insertTabIgnoringFieldEditor:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"insertText:",
        {"required": True, "retval": {"type": "v"}, "arguments": {2: {"type": "@"}}},
    )
    r(
        b"NSObject",
        b"insertText:client:",
        {
            "required": True,
            "retval": {"type": "v"},
            "arguments": {2: {"type": "@"}, 3: {"type": "@"}},
        },
    )
    r(
        b"NSObject",
        b"insertText:replacementRange:",
        {
            "required": True,
            "retval": {"type": "v"},
            "arguments": {2: {"type": "@"}, 3: {"type": "{_NSRange=QQ}"}},
        },
    )
    r(
        b"NSObject",
        b"ioCommandBySelector:",
        {"arguments": {2: {"type": ":", "sel_of_type": b"v@:@"}}},
    )
    r(
        b"NSObject",
        b"isAccessibilityAlternateUIVisible",
        {"required": True, "retval": {"type": b"Z"}},
    )
    r(
        b"NSObject",
        b"isAccessibilityDisclosed",
        {"required": True, "retval": {"type": b"Z"}},
    )
    r(
        b"NSObject",
        b"isAccessibilityEdited",
        {"required": True, "retval": {"type": b"Z"}},
    )
    r(
        b"NSObject",
        b"isAccessibilityElement",
        {"required": True, "retval": {"type": b"Z"}},
    )
    r(
        b"NSObject",
        b"isAccessibilityEnabled",
        {"required": True, "retval": {"type": b"Z"}},
    )
    r(
        b"NSObject",
        b"isAccessibilityExpanded",
        {"required": True, "retval": {"type": b"Z"}},
    )
    r(
        b"NSObject",
        b"isAccessibilityFocused",
        {"required": False, "retval": {"type": b"Z"}},
    )
    r(
        b"NSObject",
        b"isAccessibilityFrontmost",
        {"required": True, "retval": {"type": b"Z"}},
    )
    r(
        b"NSObject",
        b"isAccessibilityHidden",
        {"required": True, "retval": {"type": b"Z"}},
    )
    r(b"NSObject", b"isAccessibilityMain", {"required": True, "retval": {"type": b"Z"}})
    r(
        b"NSObject",
        b"isAccessibilityMinimized",
        {"required": True, "retval": {"type": b"Z"}},
    )
    r(
        b"NSObject",
        b"isAccessibilityModal",
        {"required": True, "retval": {"type": b"Z"}},
    )
    r(
        b"NSObject",
        b"isAccessibilityOrderedByRow",
        {"required": True, "retval": {"type": b"Z"}},
    )
    r(
        b"NSObject",
        b"isAccessibilityProtectedContent",
        {"required": True, "retval": {"type": b"Z"}},
    )
    r(
        b"NSObject",
        b"isAccessibilityRequired",
        {"required": True, "retval": {"type": "Z"}},
    )
    r(
        b"NSObject",
        b"isAccessibilitySelected",
        {"required": True, "retval": {"type": b"Z"}},
    )
    r(
        b"NSObject",
        b"isAccessibilitySelectorAllowed:",
        {"required": True, "retval": {"type": b"Z"}, "arguments": {2: {"type": b":"}}},
    )
    r(b"NSObject", b"isContentDiscarded", {"retval": {"type": "Z"}})
    r(b"NSObject", b"isEditable", {"required": False, "retval": {"type": "Z"}})
    r(b"NSObject", b"isExplicitlyIncluded", {"retval": {"type": "Z"}})
    r(b"NSObject", b"isFindBarVisible", {"required": True, "retval": {"type": "Z"}})
    r(b"NSObject", b"isHidden", {"required": True, "retval": {"type": b"Z"}})
    r(b"NSObject", b"isSelectable", {"required": False, "retval": {"type": "Z"}})
    r(b"NSObject", b"item", {"required": True, "retval": {"type": b"@"}})
    r(
        b"NSObject",
        b"itemsForSharingServicePickerToolbarItem:",
        {"required": True, "retval": {"type": b"@"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"itemsForSharingServicePickerTouchBarItem:",
        {"required": True, "retval": {"type": b"@"}, "arguments": {2: {"type": b"@"}}},
    )
    r(b"NSObject", b"key", {"retval": {"type": b"@"}})
    r(
        b"NSObject",
        b"keyPathsForValuesAffectingPreview",
        {"required": False, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"layer:shouldInheritContentsScale:fromWindow:",
        {
            "required": False,
            "retval": {"type": b"Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"d"}, 4: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"layoutManager:boundingBoxForControlGlyphAtIndex:forTextContainer:proposedLineFragment:glyphPosition:characterIndex:",
        {
            "required": False,
            "retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": "Q"},
                4: {"type": b"@"},
                5: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                6: {"type": "{CGPoint=dd}"},
                7: {"type": "Q"},
            },
        },
    )
    r(
        b"NSObject",
        b"layoutManager:didCompleteLayoutForTextContainer:atEnd:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": "Z"}},
        },
    )
    r(
        b"NSObject",
        b"layoutManager:lineSpacingAfterGlyphAtIndex:withProposedLineFragmentRect:",
        {
            "required": False,
            "retval": {"type": "d"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": "Q"},
                4: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            },
        },
    )
    r(
        b"NSObject",
        b"layoutManager:paragraphSpacingAfterGlyphAtIndex:withProposedLineFragmentRect:",
        {
            "required": False,
            "retval": {"type": "d"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": "Q"},
                4: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            },
        },
    )
    r(
        b"NSObject",
        b"layoutManager:paragraphSpacingBeforeGlyphAtIndex:withProposedLineFragmentRect:",
        {
            "required": False,
            "retval": {"type": "d"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": "Q"},
                4: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            },
        },
    )
    r(
        b"NSObject",
        b"layoutManager:shouldBreakLineByHyphenatingBeforeCharacterAtIndex:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": "Q"}},
        },
    )
    r(
        b"NSObject",
        b"layoutManager:shouldBreakLineByWordBeforeCharacterAtIndex:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": "Q"}},
        },
    )
    r(
        b"NSObject",
        b"layoutManager:shouldGenerateGlyphs:properties:characterIndexes:font:forGlyphRange:",
        {
            "required": False,
            "retval": {"type": b"Q"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"^S"},
                4: {"type": b"^q"},
                5: {"type": b"^Q"},
                6: {"type": b"@"},
                7: {"type": b"{_NSRange=QQ}"},
            },
        },
    )
    r(
        b"NSObject",
        b"layoutManager:shouldGenerateGlyphs:properties:characterIndexes:forGlyphRange:",
        {
            "arguments": {
                3: {"type": "n^S", "c_array_length_in_arg": 6},
                4: {"type": "n^Q", "c_array_length_in_arg": 6},
                5: {"type": "n^Q", "c_array_length_in_arg": 6},
                6: {"type": "{_NSRange=QQ}"},
            }
        },
    )
    r(
        b"NSObject",
        b"layoutManager:shouldSetLineFragmentRect:lineFragmentUsedRect:baselineOffset:inTextContainer:forGlyphRange:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": "N^{CGRect={CGPoint=dd}{CGSize=dd}}"},
                4: {"type": "N^{CGRect={CGPoint=dd}{CGSize=dd}}"},
                5: {"type": "N^d"},
                6: {"type": b"@"},
                7: {"type": "{_NSRange=QQ}"},
            },
        },
    )
    r(
        b"NSObject",
        b"layoutManager:shouldUseAction:forControlCharacterAtIndex:",
        {
            "required": False,
            "retval": {"type": "q"},
            "arguments": {2: {"type": b"@"}, 3: {"type": "Q"}, 4: {"type": "q"}},
        },
    )
    r(
        b"NSObject",
        b"layoutManager:shouldUseTemporaryAttributes:forDrawingToScreen:atCharacterIndex:effectiveRange:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {"type": "Z"},
                5: {"type": "Q"},
                6: {"type": "^{_NSRange=QQ}", "type_modifier": b"o"},
            },
        },
    )
    r(
        b"NSObject",
        b"layoutManager:textContainer:didChangeGeometryFromSize:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {"type": "{CGSize=dd}"},
            },
        },
    )
    r(
        b"NSObject",
        b"layoutManagerDidInvalidateLayout:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(b"NSObject", b"layoutOptions", {"required": True, "retval": {"type": b"Q"}})
    r(b"NSObject", b"layoutOrientation", {"required": True, "retval": {"type": b"q"}})
    r(
        b"NSObject",
        b"lineFragmentRangeForPoint:inContainerAtLocation:",
        {
            "required": True,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"{CGPoint=dd}"}, 3: {"type": b"@"}},
        },
    )
    r(b"NSObject", b"linkDetectionType", {"required": False, "retval": {"type": b"q"}})
    r(b"NSObject", b"listener:shouldAcceptNewConnection:", {"retval": {"type": "Z"}})
    r(b"NSObject", b"localizedKey", {"retval": {"type": b"@"}})
    r(
        b"NSObject",
        b"localizedSummaryItems",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"localizedTitlesForItem:",
        {"required": True, "retval": {"type": b"@"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"locationFromLocation:withOffset:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"q"}},
        },
    )
    r(
        b"NSObject",
        b"lowercaseWord:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"makeBaseWritingDirectionLeftToRight:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"makeBaseWritingDirectionNatural:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"makeBaseWritingDirectionRightToLeft:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"makeTextWritingDirectionLeftToRight:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"makeTextWritingDirectionNatural:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"makeTextWritingDirectionRightToLeft:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"markedRange",
        {"required": True, "retval": {"type": "{_NSRange=QQ}"}},
    )
    r(
        b"NSObject",
        b"markedTextAbandoned:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"markedTextSelectionChanged:client:",
        {
            "required": True,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": "{_NSRange=QQ}"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"menu:updateItem:atIndex:shouldCancel:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {"type": "q"},
                5: {"type": "Z"},
            },
        },
    )
    r(
        b"NSObject",
        b"menu:willHighlightItem:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"menuDidClose:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"menuHasKeyEquivalent:forEvent:target:action:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {"type": "^@", "type_modifier": b"o"},
                5: {"type": "^:", "type_modifier": b"o"},
            },
        },
    )
    r(
        b"NSObject",
        b"menuNeedsUpdate:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"menuWillOpen:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"minContentSize",
        {"required": True, "retval": {"type": "{CGSize=dd}"}},
    )
    r(
        b"NSObject",
        b"minimumSizeWithPrioritizedCompressionOptions:",
        {
            "required": True,
            "retval": {"type": b"{CGSize=dd}"},
            "arguments": {2: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"mouseDownOnCharacterIndex:atCoordinate:withModifier:client:",
        {
            "required": True,
            "retval": {"type": "Z"},
            "arguments": {
                2: {"type": "Q"},
                3: {"type": "{CGPoint=dd}"},
                4: {"type": "Q"},
                5: {"type": b"@"},
            },
        },
    )
    r(
        b"NSObject",
        b"mouseDraggedOnCharacterIndex:atCoordinate:withModifier:client:",
        {
            "required": True,
            "retval": {"type": "Z"},
            "arguments": {
                2: {"type": "Q"},
                3: {"type": "{CGPoint=dd}"},
                4: {"type": "Q"},
                5: {"type": b"@"},
            },
        },
    )
    r(
        b"NSObject",
        b"mouseUpOnCharacterIndex:atCoordinate:withModifier:client:",
        {
            "required": True,
            "retval": {"type": b"v"},
            "arguments": {
                2: {"type": "Q"},
                3: {"type": "{CGPoint=dd}"},
                4: {"type": "Q"},
                5: {"type": b"@"},
            },
        },
    )
    r(
        b"NSObject",
        b"moveBackward:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"moveBackwardAndModifySelection:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"moveDown:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"moveDownAndModifySelection:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"moveForward:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"moveForwardAndModifySelection:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"moveLeft:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"moveLeftAndModifySelection:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"moveParagraphBackwardAndModifySelection:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"moveParagraphForwardAndModifySelection:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"moveRight:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"moveRightAndModifySelection:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"moveToBeginningOfDocument:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"moveToBeginningOfDocumentAndModifySelection:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"moveToBeginningOfLine:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"moveToBeginningOfLineAndModifySelection:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"moveToBeginningOfParagraph:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"moveToBeginningOfParagraphAndModifySelection:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"moveToEndOfDocument:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"moveToEndOfDocumentAndModifySelection:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"moveToEndOfLine:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"moveToEndOfLineAndModifySelection:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"moveToEndOfParagraph:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"moveToEndOfParagraphAndModifySelection:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"moveToLeftEndOfLine:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"moveToLeftEndOfLineAndModifySelection:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"moveToRightEndOfLine:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"moveToRightEndOfLineAndModifySelection:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"moveUp:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"moveUpAndModifySelection:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"moveWordBackward:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"moveWordBackwardAndModifySelection:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"moveWordForward:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"moveWordForwardAndModifySelection:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"moveWordLeft:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"moveWordLeftAndModifySelection:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"moveWordRight:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"moveWordRightAndModifySelection:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(b"NSObject", b"name", {"required": True, "retval": {"type": b"@"}})
    r(
        b"NSObject",
        b"namesOfPromisedFilesDroppedAtDestination:",
        {"required": True, "retval": {"type": b"@"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"numberOfItemsForScrubber:",
        {"required": True, "retval": {"type": "q"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"numberOfItemsInComboBox:",
        {"required": False, "retval": {"type": "q"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"numberOfItemsInComboBoxCell:",
        {"required": False, "retval": {"type": "q"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"numberOfItemsInMenu:",
        {"required": False, "retval": {"type": "q"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"numberOfRowsInTableView:",
        {"required": False, "retval": {"type": "q"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"numberOfSectionsInCollectionView:",
        {"required": False, "retval": {"type": "q"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"numberOfValidItemsForDrop",
        {"required": True, "retval": {"type": b"q"}},
    )
    r(
        b"NSObject",
        b"objectDidBeginEditing:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"objectDidEndEditing:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"offsetFromLocation:toLocation:",
        {
            "required": False,
            "retval": {"type": b"q"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"operationQueueForFilePromiseProvider:",
        {"required": False, "retval": {"type": b"@"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"optionDescriptionsForBinding:",
        {"retval": {"type": b"@"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"optionsForSharingService:shareProvider:",
        {
            "required": False,
            "retval": {"type": b"Q"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"outlineView:acceptDrop:item:childIndex:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {"type": b"@"},
                5: {"type": "q"},
            },
        },
    )
    r(
        b"NSObject",
        b"outlineView:child:ofItem:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": "q"}, 4: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"outlineView:dataCellForTableColumn:item:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"outlineView:didAddRowView:forRow:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": b"q"}},
        },
    )
    r(
        b"NSObject",
        b"outlineView:didClickTableColumn:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"outlineView:didDragTableColumn:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"outlineView:didRemoveRowView:forRow:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": b"q"}},
        },
    )
    r(
        b"NSObject",
        b"outlineView:draggingSession:endedAtPoint:",
        {"arguments": {4: {"type": "{CGPoint=dd}"}}},
    )
    r(
        b"NSObject",
        b"outlineView:draggingSession:endedAtPoint:operation:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {"type": b"{CGPoint=dd}"},
                5: {"type": b"Q"},
            },
        },
    )
    r(
        b"NSObject",
        b"outlineView:draggingSession:willBeginAtPoint:",
        {"arguments": {4: {"type": "{CGPoint=dd}"}}},
    )
    r(
        b"NSObject",
        b"outlineView:draggingSession:willBeginAtPoint:forItems:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {"type": b"{CGPoint=dd}"},
                5: {"type": b"@"},
            },
        },
    )
    r(
        b"NSObject",
        b"outlineView:heightOfRowByItem:",
        {
            "required": False,
            "retval": {"type": "d"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"outlineView:isGroupItem:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"outlineView:isItemExpandable:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"outlineView:itemForPersistentObject:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"outlineView:mouseDownInHeaderOfTableColumn:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"outlineView:namesOfPromisedFilesDroppedAtDestination:forDraggedItems:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"outlineView:nextTypeSelectMatchFromItem:toItem:forString:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {"type": b"@"},
                5: {"type": b"@"},
            },
        },
    )
    r(
        b"NSObject",
        b"outlineView:numberOfChildrenOfItem:",
        {
            "required": False,
            "retval": {"type": "q"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"outlineView:objectValueForTableColumn:byItem:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"outlineView:pasteboardWriterForItem:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"outlineView:persistentObjectForItem:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"outlineView:rowViewForItem:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"outlineView:selectionIndexesForProposedSelection:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"outlineView:setObjectValue:forTableColumn:byItem:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {"type": b"@"},
                5: {"type": b"@"},
            },
        },
    )
    r(
        b"NSObject",
        b"outlineView:shouldCollapseItem:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"outlineView:shouldEditTableColumn:item:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"outlineView:shouldExpandItem:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"outlineView:shouldReorderColumn:toColumn:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": "q"}, 4: {"type": "q"}},
        },
    )
    r(
        b"NSObject",
        b"outlineView:shouldSelectItem:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"outlineView:shouldSelectTableColumn:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"outlineView:shouldShowCellExpansionForTableColumn:item:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"outlineView:shouldShowOutlineCellForItem:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"outlineView:shouldTrackCell:forTableColumn:item:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {"type": b"@"},
                5: {"type": b"@"},
            },
        },
    )
    r(
        b"NSObject",
        b"outlineView:shouldTypeSelectForEvent:withCurrentSearchString:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"outlineView:sizeToFitWidthOfColumn:",
        {
            "required": False,
            "retval": {"type": "d"},
            "arguments": {2: {"type": b"@"}, 3: {"type": "q"}},
        },
    )
    r(
        b"NSObject",
        b"outlineView:sortDescriptorsDidChange:",
        {
            "required": False,
            "retval": {"type": "v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"outlineView:tintConfigurationForItem:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"outlineView:toolTipForCell:rect:tableColumn:item:mouseLocation:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {"type": "^{CGRect={CGPoint=dd}{CGSize=dd}}", "type_modifier": b"N"},
                5: {"type": b"@"},
                6: {"type": b"@"},
                7: {"type": "{CGPoint=dd}"},
            },
        },
    )
    r(
        b"NSObject",
        b"outlineView:typeSelectStringForTableColumn:item:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"outlineView:updateDraggingItemsForDrag:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"outlineView:userCanChangeVisibilityOfTableColumn:",
        {
            "required": False,
            "retval": {"type": b"Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"outlineView:userDidChangeVisibilityOfTableColumns:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"outlineView:validateDrop:proposedItem:proposedChildIndex:",
        {
            "required": False,
            "retval": {"type": "Q"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {"type": b"@"},
                5: {"type": "q"},
            },
        },
    )
    r(
        b"NSObject",
        b"outlineView:viewForTableColumn:item:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"outlineView:willDisplayCell:forTableColumn:item:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {"type": b"@"},
                5: {"type": b"@"},
            },
        },
    )
    r(
        b"NSObject",
        b"outlineView:willDisplayOutlineCell:forTableColumn:item:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {"type": b"@"},
                5: {"type": b"@"},
            },
        },
    )
    r(
        b"NSObject",
        b"outlineView:writeItems:toPasteboard:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"outlineViewColumnDidMove:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"outlineViewColumnDidResize:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"outlineViewItemDidCollapse:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"outlineViewItemDidExpand:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"outlineViewItemWillCollapse:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"outlineViewItemWillExpand:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"outlineViewSelectionDidChange:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"outlineViewSelectionIsChanging:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"pageController:didTransitionToObject:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"pageController:frameForObject:",
        {
            "required": False,
            "retval": {"type": b"{CGRect={CGPoint=dd}{CGSize=dd}}"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"pageController:identifierForObject:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"pageController:prepareViewController:withObject:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"pageController:viewControllerForIdentifier:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"pageControllerDidEndLiveTransition:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"pageControllerWillStartLiveTransition:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"pageDown:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"pageDownAndModifySelection:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"pageUp:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"pageUpAndModifySelection:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"panel:compareFilename:with:caseSensitive:",
        {
            "retval": {"type": "q"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {"type": b"@"},
                5: {"type": "Z"},
            },
        },
    )
    r(
        b"NSObject",
        b"panel:didChangeToDirectoryURL:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"panel:directoryDidChange:",
        {"retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"panel:isValidFilename:",
        {"retval": {"type": "Z"}, "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"panel:shouldEnableURL:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"panel:shouldShowFilename:",
        {"retval": {"type": "Z"}, "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"panel:userEnteredFilename:confirmed:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": "Z"}},
        },
    )
    r(
        b"NSObject",
        b"panel:validateURL:error:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {"type": "^@", "type_modifier": b"o"},
            },
        },
    )
    r(
        b"NSObject",
        b"panel:willExpand:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": "Z"}},
        },
    )
    r(
        b"NSObject",
        b"panelSelectionDidChange:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"pasteboard:item:provideDataForType:",
        {
            "required": True,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"pasteboard:provideDataForType:",
        {
            "required": True,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"pasteboardChangedOwner:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"pasteboardFinishedWithDataProvider:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"pasteboardPropertyListForType:",
        {"required": True, "retval": {"type": b"@"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"pathCell:willDisplayOpenPanel:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"pathCell:willPopUpMenu:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"pathControl:acceptDrop:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"pathControl:shouldDragItem:withPasteboard:",
        {
            "required": False,
            "retval": {"type": b"Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"pathControl:shouldDragPathComponentCell:withPasteboard:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"pathControl:validateDrop:",
        {
            "required": False,
            "retval": {"type": "Q"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"pathControl:willDisplayOpenPanel:",
        {
            "required": False,
            "retval": {"type": "v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"pathControl:willPopUpMenu:",
        {
            "required": False,
            "retval": {"type": "v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"performActionForItem:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"performDragOperation:",
        {"required": False, "retval": {"type": "Z"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"performEditingTransactionForTextStorage:usingBlock:",
        {
            "required": True,
            "retval": {"type": b"v"},
            "arguments": {
                2: {"type": b"@"},
                3: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {0: {"type": b"^v"}},
                    },
                    "type": b"@?",
                },
            },
        },
    )
    r(
        b"NSObject",
        b"performFeedbackPattern:performanceTime:",
        {
            "required": True,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"q"}, 3: {"type": "Q"}},
        },
    )
    r(
        b"NSObject",
        b"performSegueWithIdentifier:sender:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"popoverDidClose:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"popoverDidDetach:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"popoverDidShow:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"popoverShouldClose:",
        {"required": False, "retval": {"type": b"Z"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"popoverShouldDetach:",
        {"required": False, "retval": {"type": b"Z"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"popoverWillClose:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"popoverWillShow:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"preferredLayoutAttributesFittingAttributes:",
        {"required": False, "retval": {"type": b"@"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"preferredTextAccessoryPlacement",
        {"required": False, "retval": {"type": b"q"}},
    )
    r(
        b"NSObject",
        b"prepareForDragOperation:",
        {"required": False, "retval": {"type": "Z"}, "arguments": {2: {"type": b"@"}}},
    )
    r(b"NSObject", b"prepareForInterfaceBuilder", {"retval": {"type": b"v"}})
    r(b"NSObject", b"prepareForReuse", {"required": False, "retval": {"type": b"v"}})
    r(
        b"NSObject",
        b"prepareForSegue:sender:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"previewRepresentableActivityItemsForWindow:",
        {"required": False, "retval": {"type": b"@"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"processEditingForTextStorage:edited:range:changeInLength:invalidateRange:",
        {
            "arguments": {
                3: {"type": "q"},
                4: {"type": "{_NSRange=QQ}"},
                5: {"type": "q"},
                6: {"type": "{_NSRange=QQ}"},
            }
        },
    )
    r(
        b"NSObject",
        b"processEditingForTextStorage:edited:range:changeInLength:invalidatedRange:",
        {
            "required": True,
            "retval": {"type": b"v"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"Q"},
                4: {"type": b"{_NSRange=QQ}"},
                5: {"type": b"q"},
                6: {"type": b"{_NSRange=QQ}"},
            },
        },
    )
    r(
        b"NSObject",
        b"provideNewButtonImage",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"provideNewView:",
        {"required": True, "retval": {"type": b"@"}, "arguments": {2: {"type": "Z"}}},
    )
    r(
        b"NSObject",
        b"quickLookPreviewItems:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"readSelectionFromPasteboard:",
        {"required": False, "retval": {"type": "Z"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"readableTypesForPasteboard:",
        {"required": True, "retval": {"type": b"@"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"readingOptionsForType:pasteboard:",
        {
            "required": False,
            "retval": {"type": b"Q"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"rectsForCharacterInRange:",
        {"arguments": {2: {"type": "{_NSRange=QQ}"}}},
    )
    r(
        b"NSObject",
        b"rectsForCharacterRange:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"{_NSRange=QQ}"}},
        },
    )
    r(
        b"NSObject",
        b"remoteObjectProxyWithErrorHandler:",
        {
            "arguments": {
                2: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {0: {"type": b"^v"}, 1: {"type": b"@"}},
                    },
                    "type": "@?",
                }
            }
        },
    )
    r(
        b"NSObject",
        b"removeAnnotation:range:",
        {
            "required": True,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"{_NSRange=QQ}"}},
        },
    )
    r(
        b"NSObject",
        b"replaceCharactersInRange:withAnnotatedString:",
        {
            "required": True,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"{_NSRange=QQ}"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"replaceCharactersInRange:withString:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"{_NSRange=QQ}"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"replaceContentsInRange:withTextElements:",
        {
            "required": True,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"representedElementCategory",
        {"required": True, "retval": {"type": b"q"}},
    )
    r(
        b"NSObject",
        b"representedElementKind",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(b"NSObject", b"resetSpringLoading", {"required": True, "retval": {"type": b"v"}})
    r(
        b"NSObject",
        b"restoreUserActivityState:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"restoreWindowWithIdentifier:state:completionHandler:",
        {
            "required": True,
            "retval": {"type": b"v"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {
                            0: {"type": b"^v"},
                            1: {"type": b"@"},
                            2: {"type": b"@"},
                        },
                    },
                    "type": "@?",
                },
            },
        },
    )
    r(
        b"NSObject",
        b"rootItemForBrowser:",
        {"required": False, "retval": {"type": b"@"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"rotor:resultForSearchParameters:",
        {
            "required": True,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"ruleEditor:child:forCriterion:withRowType:",
        {
            "required": True,
            "retval": {"type": b"@"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": "q"},
                4: {"type": b"@"},
                5: {"type": "Q"},
            },
        },
    )
    r(
        b"NSObject",
        b"ruleEditor:displayValueForCriterion:inRow:",
        {
            "required": True,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": "q"}},
        },
    )
    r(
        b"NSObject",
        b"ruleEditor:numberOfChildrenForCriterion:withRowType:",
        {
            "required": True,
            "retval": {"type": "q"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": "Q"}},
        },
    )
    r(
        b"NSObject",
        b"ruleEditor:predicatePartsForCriterion:withDisplayValue:inRow:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {"type": b"@"},
                5: {"type": "q"},
            },
        },
    )
    r(
        b"NSObject",
        b"ruleEditorRowsDidChange:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"rulerView:didAddMarker:",
        {"retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"rulerView:didMoveMarker:",
        {"retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"rulerView:didRemoveMarker:",
        {"retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"rulerView:handleMouseDown:",
        {"retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"rulerView:locationForPoint:",
        {
            "retval": {"type": "d"},
            "arguments": {2: {"type": b"@"}, 3: {"type": "{CGPoint=dd}"}},
        },
    )
    r(
        b"NSObject",
        b"rulerView:pointForLocation:",
        {
            "retval": {"type": b"{CGPoint=dd}"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"d"}},
        },
    )
    r(
        b"NSObject",
        b"rulerView:pointForlocation:",
        {
            "retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            "arguments": {3: {"type": "d"}},
        },
    )
    r(
        b"NSObject",
        b"rulerView:shouldAddMarker:",
        {"retval": {"type": b"Z"}, "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"rulerView:shouldMoveMarker:",
        {"retval": {"type": b"Z"}, "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"rulerView:shouldRemoveMarker:",
        {"retval": {"type": b"Z"}, "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"rulerView:willAddMarker:atLocation:",
        {
            "retval": {"type": "d"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": "d"}},
        },
    )
    r(
        b"NSObject",
        b"rulerView:willMoveMarker:toLocation:",
        {
            "retval": {"type": "d"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": "d"}},
        },
    )
    r(
        b"NSObject",
        b"rulerView:willSetClientView:",
        {"retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"scrollLineDown:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"scrollLineUp:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"scrollPageDown:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"scrollPageUp:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"scrollRangeToVisible:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"{_NSRange=QQ}"}},
        },
    )
    r(
        b"NSObject",
        b"scrollToBeginningOfDocument:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"scrollToEndOfDocument:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"scrubber:didChangeVisibleRange:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": "{_NSRange=QQ}"}},
        },
    )
    r(
        b"NSObject",
        b"scrubber:didHighlightItemAtIndex:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": "q"}},
        },
    )
    r(
        b"NSObject",
        b"scrubber:didSelectItemAtIndex:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": "q"}},
        },
    )
    r(
        b"NSObject",
        b"scrubber:layout:sizeForItemAtIndex:",
        {
            "required": False,
            "retval": {"type": "{CGSize=dd}"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": "q"}},
        },
    )
    r(
        b"NSObject",
        b"scrubber:viewForItemAtIndex:",
        {
            "required": True,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": "q"}},
        },
    )
    r(
        b"NSObject",
        b"searchFieldDidEndSearching:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"searchFieldDidStartSearching:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"searchForItemsWithSearchString:resultLimit:matchedItemHandler:",
        {
            "required": True,
            "retval": {"type": b"v"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": "q"},
                4: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {0: {"type": b"^v"}, 1: {"type": b"@"}},
                    },
                    "type": "@?",
                },
            },
        },
    )
    r(
        b"NSObject",
        b"sectionCollapseButton",
        {"required": False, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"selectAll:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"selectAndShowRange:",
        {
            "required": True,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"{_NSRange=QQ}"}},
        },
    )
    r(
        b"NSObject",
        b"selectLine:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"selectParagraph:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"selectToMark:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"selectWord:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(b"NSObject", b"selectable", {"retval": {"type": b"Z"}})
    r(
        b"NSObject",
        b"selectedRange",
        {"required": True, "retval": {"type": "{_NSRange=QQ}"}},
    )
    r(b"NSObject", b"selectedRanges", {"required": False, "retval": {"type": b"@"}})
    r(
        b"NSObject",
        b"selectionRect",
        {"retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
    )
    r(
        b"NSObject",
        b"selectionShouldChangeInOutlineView:",
        {"required": False, "retval": {"type": "Z"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"selectionShouldChangeInTableView:",
        {"required": False, "retval": {"type": "Z"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityActivationPoint:",
        {
            "required": True,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"{CGPoint=dd}"}},
        },
    )
    r(
        b"NSObject",
        b"setAccessibilityAllowedValues:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityAlternateUIVisible:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"Z"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityApplicationFocusedUIElement:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityAttributedUserInputLabels:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityCancelButton:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityChildren:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityChildrenInNavigationOrder:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityClearButton:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityCloseButton:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityColumnCount:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"q"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityColumnHeaderUIElements:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityColumnIndexRange:",
        {
            "required": True,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"{_NSRange=QQ}"}},
        },
    )
    r(
        b"NSObject",
        b"setAccessibilityColumnTitles:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityColumns:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityContents:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityCriticalValue:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityCustomActions:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityCustomRotors:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityDecrementButton:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityDefaultButton:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityDisclosed:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"Z"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityDisclosedByRow:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityDisclosedRows:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityDisclosureLevel:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"q"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityDocument:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityEdited:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"Z"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityElement:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"Z"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityEnabled:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"Z"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityExpanded:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"Z"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityExtrasMenuBar:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityFilename:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityFocused:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"Z"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityFocusedWindow:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityFrame:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"{CGRect={CGPoint=dd}{CGSize=dd}}"}},
        },
    )
    r(
        b"NSObject",
        b"setAccessibilityFrontmost:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"Z"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityFullScreenButton:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityGrowArea:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityHandles:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityHeader:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityHelp:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityHidden:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"Z"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityHorizontalScrollBar:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityHorizontalUnitDescription:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityHorizontalUnits:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"q"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityIdentifier:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityIncrementButton:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityIndex:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"q"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityInsertionPointLineNumber:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"q"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityLabel:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityLabelUIElements:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityLabelValue:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"f"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityLinkedUIElements:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityMain:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"Z"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityMainWindow:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityMarkerGroupUIElement:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityMarkerTypeDescription:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityMarkerUIElements:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityMarkerValues:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityMaxValue:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityMenuBar:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityMinValue:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityMinimizeButton:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityMinimized:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"Z"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityModal:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"Z"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityNextContents:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityNumberOfCharacters:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"q"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityOrderedByRow:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"Z"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityOrientation:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"q"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityOverflowButton:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityParent:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityPlaceholderValue:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityPreviousContents:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityProtectedContent:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"Z"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityProxy:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityRequired:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"Z"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityRole:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityRoleDescription:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityRowCount:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"q"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityRowHeaderUIElements:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityRowIndexRange:",
        {
            "required": True,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"{_NSRange=QQ}"}},
        },
    )
    r(
        b"NSObject",
        b"setAccessibilityRows:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityRulerMarkerType:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"q"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilitySearchButton:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilitySearchMenu:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilitySelected:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"Z"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilitySelectedCells:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilitySelectedChildren:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilitySelectedColumns:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilitySelectedRows:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilitySelectedText:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilitySelectedTextRange:",
        {
            "required": True,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"{_NSRange=QQ}"}},
        },
    )
    r(
        b"NSObject",
        b"setAccessibilitySelectedTextRanges:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityServesAsTitleForUIElements:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilitySharedCharacterRange:",
        {
            "required": True,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"{_NSRange=QQ}"}},
        },
    )
    r(
        b"NSObject",
        b"setAccessibilitySharedFocusElements:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilitySharedTextUIElements:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityShownMenu:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilitySortDirection:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"q"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilitySplitters:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilitySubrole:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityTabs:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityTitle:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityTitleUIElement:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityToolbarButton:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityTopLevelUIElement:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityURL:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityUnitDescription:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityUnits:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"q"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityUserInputLabels:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityValue:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityValueDescription:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityVerticalScrollBar:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityVerticalUnitDescription:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityVerticalUnits:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"q"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityVisibleCells:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityVisibleCharacterRange:",
        {
            "required": True,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"{_NSRange=QQ}"}},
        },
    )
    r(
        b"NSObject",
        b"setAccessibilityVisibleChildren:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityVisibleColumns:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityVisibleRows:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityWarningValue:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityWindow:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityWindows:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAccessibilityZoomButton:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAllowsMultipleSelection:",
        {"retval": {"type": b"v"}, "arguments": {2: {"type": b"Z"}}},
    )
    r(
        b"NSObject",
        b"setAlpha:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"d"}}},
    )
    r(
        b"NSObject",
        b"setAnimatesToDestination:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"Z"}}},
    )
    r(
        b"NSObject",
        b"setAnimations:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAnnotations:range:",
        {
            "required": True,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"{_NSRange=QQ}"}},
        },
    )
    r(
        b"NSObject",
        b"setAppearance:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAttachment:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setAutocorrectionType:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"q"}}},
    )
    r(
        b"NSObject",
        b"setCenter:",
        {
            "required": True,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"{CGPoint=dd}"}},
        },
    )
    r(
        b"NSObject",
        b"setColor:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setContentType:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setDataDetectionType:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"q"}}},
    )
    r(
        b"NSObject",
        b"setDefaultPlaceholder:forMarker:withBinding:",
        {
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"setDockTile:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setDraggingFormation:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"q"}}},
    )
    r(
        b"NSObject",
        b"setEditable:",
        {"retval": {"type": b"v"}, "arguments": {2: {"type": b"Z"}}},
    )
    r(
        b"NSObject",
        b"setFindBarView:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setFindBarVisible:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": "Z"}}},
    )
    r(
        b"NSObject",
        b"setFirstSelectedRange:",
        {"retval": {"type": b"v"}, "arguments": {2: {"type": b"{_NSRange=QQ}"}}},
    )
    r(
        b"NSObject",
        b"setGrammarCheckingType:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"q"}}},
    )
    r(
        b"NSObject",
        b"setHidden:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"Z"}}},
    )
    r(
        b"NSObject",
        b"setIdentifier:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setInlinePredictionType:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"q"}}},
    )
    r(
        b"NSObject",
        b"setIntAttribute:value:forGlyphAtIndex:",
        {
            "required": True,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": "q"}, 3: {"type": "q"}, 4: {"type": "Q"}},
        },
    )
    r(
        b"NSObject",
        b"setKey:",
        {"retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setLinkDetectionType:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"q"}}},
    )
    r(
        b"NSObject",
        b"setLocalizedKey:",
        {"retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setMark:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setMarkedText:selectedRange:",
        {
            "required": True,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": "{_NSRange=QQ}"}},
        },
    )
    r(
        b"NSObject",
        b"setMarkedText:selectedRange:replacementRange:",
        {
            "required": True,
            "retval": {"type": b"v"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": "{_NSRange=QQ}"},
                4: {"type": "{_NSRange=QQ}"},
            },
        },
    )
    r(
        b"NSObject",
        b"setMode:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": "i"}}},
    )
    r(
        b"NSObject",
        b"setNumberOfValidItemsForDrop:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"q"}}},
    )
    r(
        b"NSObject",
        b"setSectionCollapseButton:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setSelectable:",
        {"retval": {"type": b"v"}, "arguments": {2: {"type": b"Z"}}},
    )
    r(
        b"NSObject",
        b"setSelectedRanges:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setSmartDashesType:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"q"}}},
    )
    r(
        b"NSObject",
        b"setSmartInsertDeleteType:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"q"}}},
    )
    r(
        b"NSObject",
        b"setSmartQuotesType:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"q"}}},
    )
    r(
        b"NSObject",
        b"setSpellCheckingType:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"q"}}},
    )
    r(
        b"NSObject",
        b"setString:",
        {"retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setTextCompletionType:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"q"}}},
    )
    r(
        b"NSObject",
        b"setTextReplacementType:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"q"}}},
    )
    r(
        b"NSObject",
        b"setTextStorage:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setValue:",
        {"retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setVisibleCharacterRanges:",
        {"retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"setZIndex:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"q"}}},
    )
    r(
        b"NSObject",
        b"sharingService:didCompleteForItems:error:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"sharingService:didFailToShareItems:error:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"sharingService:didSaveShare:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"sharingService:didShareItems:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"sharingService:didStopSharing:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"sharingService:sourceFrameOnScreenForShareItem:",
        {
            "required": False,
            "retval": {"type": b"{CGRect={CGPoint=dd}{CGSize=dd}}"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"sharingService:sourceWindowForShareItems:sharingContentScope:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": b"^q"}},
        },
    )
    r(
        b"NSObject",
        b"sharingService:transitionImageForShareItem:contentRect:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {"type": b"^{CGRect={CGPoint=dd}{CGSize=dd}}"},
            },
        },
    )
    r(
        b"NSObject",
        b"sharingService:willShareItems:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"sharingServicePicker:delegateForSharingService:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"sharingServicePicker:didChooseSharingService:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"sharingServicePicker:sharingServicesForItems:proposedSharingServices:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"shouldPerformSegueWithIdentifier:sender:",
        {
            "required": False,
            "retval": {"type": b"Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"shouldReplaceCharactersInRanges:withStrings:",
        {
            "required": False,
            "retval": {"type": b"Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"showAllHelpTopicsForSearchString:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"showRelativeToRect:ofView:preferredEdge:",
        {
            "arguments": {
                2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                4: {"type": "Q"},
            }
        },
    )
    r(
        b"NSObject",
        b"slideDraggedImageTo:",
        {
            "required": True,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": "{CGPoint=dd}"}},
        },
    )
    r(b"NSObject", b"smartDashesType", {"required": False, "retval": {"type": b"q"}})
    r(
        b"NSObject",
        b"smartInsertDeleteType",
        {"required": False, "retval": {"type": b"q"}},
    )
    r(b"NSObject", b"smartQuotesType", {"required": False, "retval": {"type": b"q"}})
    r(
        b"NSObject",
        b"sound:didFinishPlaying:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": "Z"}},
        },
    )
    r(
        b"NSObject",
        b"speechRecognizer:didRecognizeCommand:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"speechSynthesizer:didEncounterErrorAtIndex:ofString:message:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": "Q"},
                4: {"type": b"@"},
                5: {"type": b"@"},
            },
        },
    )
    r(
        b"NSObject",
        b"speechSynthesizer:didEncounterSyncMessage:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"speechSynthesizer:didFinishSpeaking:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": "Z"}},
        },
    )
    r(
        b"NSObject",
        b"speechSynthesizer:willSpeakPhoneme:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": "s"}},
        },
    )
    r(
        b"NSObject",
        b"speechSynthesizer:willSpeakWord:ofString:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": "{_NSRange=QQ}"},
                4: {"type": b"@"},
            },
        },
    )
    r(b"NSObject", b"spellCheckingType", {"required": False, "retval": {"type": b"q"}})
    r(
        b"NSObject",
        b"splitView:additionalEffectiveRectOfDividerAtIndex:",
        {
            "required": False,
            "retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            "arguments": {2: {"type": b"@"}, 3: {"type": "q"}},
        },
    )
    r(
        b"NSObject",
        b"splitView:canCollapseSubview:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"splitView:constrainMaxCoordinate:ofSubviewAt:",
        {
            "required": False,
            "retval": {"type": b"d"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"d"}, 4: {"type": b"q"}},
        },
    )
    r(
        b"NSObject",
        b"splitView:constrainMinCoordinate:ofSubviewAt:",
        {
            "required": False,
            "retval": {"type": b"d"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"d"}, 4: {"type": b"q"}},
        },
    )
    r(
        b"NSObject",
        b"splitView:constrainSplitPosition:ofSubviewAt:",
        {
            "required": False,
            "retval": {"type": b"d"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"d"}, 4: {"type": b"q"}},
        },
    )
    r(
        b"NSObject",
        b"splitView:effectiveRect:forDrawnRect:ofDividerAtIndex:",
        {
            "required": False,
            "retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                4: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                5: {"type": "q"},
            },
        },
    )
    r(
        b"NSObject",
        b"splitView:onstrainMaxCoordinate:ofSubviewAt:",
        {"retval": {"type": "d"}, "arguments": {3: {"type": "d"}, 4: {"type": "q"}}},
    )
    r(
        b"NSObject",
        b"splitView:onstrainMinCoordinate:ofSubviewAt:",
        {"retval": {"type": "d"}, "arguments": {3: {"type": "d"}, 4: {"type": "q"}}},
    )
    r(
        b"NSObject",
        b"splitView:onstrainSplitPosition:ofSubviewAt:",
        {"retval": {"type": "d"}, "arguments": {3: {"type": "d"}, 4: {"type": "q"}}},
    )
    r(
        b"NSObject",
        b"splitView:resizeSubviewsWithOldSize:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": "{CGSize=dd}"}},
        },
    )
    r(
        b"NSObject",
        b"splitView:shouldAdjustSizeOfSubview:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"splitView:shouldCollapseSubview:forDoubleClickOnDividerAtIndex:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": "q"}},
        },
    )
    r(
        b"NSObject",
        b"splitView:shouldHideDividerAtIndex:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": "q"}},
        },
    )
    r(
        b"NSObject",
        b"splitViewDidResizeSubviews:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"splitViewWillResizeSubviews:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"springLoadingActivated:draggingInfo:",
        {
            "required": True,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": "Z"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"springLoadingEntered:",
        {"required": False, "retval": {"type": "Q"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"springLoadingExited:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"springLoadingHighlight",
        {"required": True, "retval": {"type": b"q"}},
    )
    r(
        b"NSObject",
        b"springLoadingHighlightChanged:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"springLoadingUpdated:",
        {"required": False, "retval": {"type": "Q"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"stackView:didReattachViews:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"stackView:willDetachViews:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(b"NSObject", b"string", {"required": False, "retval": {"type": b"@"}})
    r(
        b"NSObject",
        b"stringAtIndex:effectiveRange:endsWithSearchBoundary:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {
                2: {"type": b"Q"},
                3: {"type": b"^{_NSRange=QQ}"},
                4: {"type": b"^Z"},
            },
        },
    )
    r(
        b"NSObject",
        b"stringAtIndex:effectiveRange:endswithSearchBoundary:",
        {
            "arguments": {
                2: {"type": "Q"},
                3: {"type": "o^{_NSRange=QQ}"},
                4: {"type": "o^Z"},
            }
        },
    )
    r(b"NSObject", b"stringLength", {"required": False, "retval": {"type": b"Q"}})
    r(
        b"NSObject",
        b"supportsMode:",
        {"required": True, "retval": {"type": "Z"}, "arguments": {2: {"type": "i"}}},
    )
    r(
        b"NSObject",
        b"swapWithMark:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"synchronizeToBackingStore:",
        {
            "required": True,
            "retval": {"type": b"v"},
            "arguments": {
                2: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {0: {"type": b"^v"}, 1: {"type": b"@"}},
                    },
                    "type": b"@?",
                }
            },
        },
    )
    r(
        b"NSObject",
        b"tabView:didSelectTabViewItem:",
        {
            "required": False,
            "retval": {"type": "v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"tabView:shouldSelectTabViewItem:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"tabView:willSelectTabViewItem:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"tabViewDidChangeNumberOfTabViewItems:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"tableView:acceptDrop:row:dropOperation:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {"type": "q"},
                5: {"type": "Q"},
            },
        },
    )
    r(
        b"NSObject",
        b"tableView:dataCellForTableColumn:row:",
        {
            "required": False,
            "retval": {"type": "@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": "q"}},
        },
    )
    r(
        b"NSObject",
        b"tableView:didAddRowView:forRow:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": b"q"}},
        },
    )
    r(
        b"NSObject",
        b"tableView:didClickTableColumn:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"tableView:didDragTableColumn:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"tableView:didRemoveRowView:forRow:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": b"q"}},
        },
    )
    r(
        b"NSObject",
        b"tableView:draggingSession:endedAtPoint:operation:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {"type": b"{CGPoint=dd}"},
                5: {"type": b"Q"},
            },
        },
    )
    r(
        b"NSObject",
        b"tableView:draggingSession:willBeginAtPoint:forRowIndexes:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {"type": b"{CGPoint=dd}"},
                5: {"type": b"@"},
            },
        },
    )
    r(
        b"NSObject",
        b"tableView:heightOfRow:",
        {
            "required": False,
            "retval": {"type": "d"},
            "arguments": {2: {"type": b"@"}, 3: {"type": "q"}},
        },
    )
    r(
        b"NSObject",
        b"tableView:isGroupRow:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": "q"}},
        },
    )
    r(
        b"NSObject",
        b"tableView:mouseDownInHeaderOfTableColumn:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"tableView:namesOfPromisedFilesDroppedAtDestination:forDraggedRowsWithIndexes:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"tableView:nextTypeSelectMatchFromRow:toRow:forString:",
        {
            "required": False,
            "retval": {"type": "q"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": "q"},
                4: {"type": "q"},
                5: {"type": b"@"},
            },
        },
    )
    r(
        b"NSObject",
        b"tableView:objectValueForTableColumn:row:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": "q"}},
        },
    )
    r(
        b"NSObject",
        b"tableView:pasteboardWriterForRow:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": "q"}},
        },
    )
    r(
        b"NSObject",
        b"tableView:rowActionsForRow:edge:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": "q"}, 4: {"type": "q"}},
        },
    )
    r(
        b"NSObject",
        b"tableView:rowViewForRow:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"q"}},
        },
    )
    r(
        b"NSObject",
        b"tableView:selectionIndexesForProposedSelection:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"tableView:setObjectValue:forTableColumn:row:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {"type": b"@"},
                5: {"type": "q"},
            },
        },
    )
    r(
        b"NSObject",
        b"tableView:shouldEditTableColumn:row:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": "q"}},
        },
    )
    r(
        b"NSObject",
        b"tableView:shouldReorderColumn:toColumn:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": "q"}, 4: {"type": "q"}},
        },
    )
    r(
        b"NSObject",
        b"tableView:shouldSelectRow:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": "q"}},
        },
    )
    r(
        b"NSObject",
        b"tableView:shouldSelectTableColumn:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"tableView:shouldShowCellExpansionForTableColumn:row:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": "q"}},
        },
    )
    r(
        b"NSObject",
        b"tableView:shouldTrackCell:forTableColumn:row:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {"type": b"@"},
                5: {"type": "q"},
            },
        },
    )
    r(
        b"NSObject",
        b"tableView:shouldTypeSelectForEvent:withCurrentSearchString:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"tableView:sizeToFitWidthOfColumn:",
        {
            "required": False,
            "retval": {"type": "d"},
            "arguments": {2: {"type": b"@"}, 3: {"type": "q"}},
        },
    )
    r(
        b"NSObject",
        b"tableView:sortDescriptorsDidChange:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"tableView:toolTipForCell:rect:tableColumn:row:mouseLocation:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {"type": "^{CGRect={CGPoint=dd}{CGSize=dd}}", "type_modifier": b"N"},
                5: {"type": b"@"},
                6: {"type": "q"},
                7: {"type": "{CGPoint=dd}"},
            },
        },
    )
    r(
        b"NSObject",
        b"tableView:typeSelectStringForTableColumn:row:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": "q"}},
        },
    )
    r(
        b"NSObject",
        b"tableView:updateDraggingItemsForDrag:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"tableView:userCanChangeVisibilityOfTableColumn:",
        {
            "required": False,
            "retval": {"type": b"Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"tableView:userDidChangeVisibilityOfTableColumns:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"tableView:validateDrop:proposedRow:proposedDropOperation:",
        {
            "required": False,
            "retval": {"type": "Q"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {"type": "q"},
                5: {"type": "Q"},
            },
        },
    )
    r(
        b"NSObject",
        b"tableView:viewForTableColumn:row:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": b"q"}},
        },
    )
    r(
        b"NSObject",
        b"tableView:willDisplayCell:forTableColumn:row:",
        {
            "required": False,
            "retval": {"type": "v"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {"type": b"@"},
                5: {"type": "q"},
            },
        },
    )
    r(
        b"NSObject",
        b"tableView:writeRows:toPasteboard:",
        {
            "retval": {"type": "Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"tableView:writeRowsWithIndexes:toPasteboard:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"tableViewColumnDidMove:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"tableViewColumnDidResize:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"tableViewSelectionDidChange:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"tableViewSelectionIsChanging:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(b"NSObject", b"tag", {"required": True, "retval": {"type": "q"}})
    r(
        b"NSObject",
        b"terminate:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(b"NSObject", b"textCompletionType", {"required": False, "retval": {"type": b"q"}})
    r(
        b"NSObject",
        b"textContentManager:shouldEnumerateTextElement:options:",
        {
            "required": False,
            "retval": {"type": b"Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": b"Q"}},
        },
    )
    r(
        b"NSObject",
        b"textContentManager:textElementAtLocation:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"textContentStorage:textParagraphWithRange:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"{_NSRange=QQ}"}},
        },
    )
    r(
        b"NSObject",
        b"textDidBeginEditing:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"textDidChange:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"textDidEndEditing:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"textField:textView:candidates:forSelectedRange:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {"type": b"@"},
                5: {"type": "{_NSRange=QQ}"},
            },
        },
    )
    r(
        b"NSObject",
        b"textField:textView:candidatesForSelectedRange:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {"type": "{_NSRange=QQ}"},
            },
        },
    )
    r(
        b"NSObject",
        b"textField:textView:shouldSelectCandidateAtIndex:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": "Q"}},
        },
    )
    r(
        b"NSObject",
        b"textLayoutManager:renderingAttributesForLink:atLocation:defaultAttributes:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {"type": b"@"},
                5: {"type": b"@"},
            },
        },
    )
    r(
        b"NSObject",
        b"textLayoutManager:shouldBreakLineBeforeLocation:hyphenating:",
        {
            "required": False,
            "retval": {"type": b"Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": b"Z"}},
        },
    )
    r(
        b"NSObject",
        b"textLayoutManager:textLayoutFragmentForLocation:inTextElement:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"textLayoutOrientationAtLocation:",
        {"required": False, "retval": {"type": b"q"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"textRangeForSelectionGranularity:enclosingLocation:",
        {
            "required": True,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"q"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"textReplacementType",
        {"required": False, "retval": {"type": b"q"}},
    )
    r(
        b"NSObject",
        b"textShouldBeginEditing:",
        {"required": False, "retval": {"type": "Z"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"textShouldEndEditing:",
        {"required": False, "retval": {"type": "Z"}, "arguments": {2: {"type": b"@"}}},
    )
    r(b"NSObject", b"textStorage", {"required": True, "retval": {"type": b"@"}})
    r(
        b"NSObject",
        b"textStorage:didProcessEditing:range:changeInLength:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": "Q"},
                4: {"type": "{_NSRange=QQ}"},
                5: {"type": "q"},
            },
        },
    )
    r(
        b"NSObject",
        b"textStorage:willProcessEditing:range:changeInLength:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": "Q"},
                4: {"type": "{_NSRange=QQ}"},
                5: {"type": "q"},
            },
        },
    )
    r(
        b"NSObject",
        b"textStorageDidProcessEditing:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"textStorageWillProcessEditing:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"textView:URLForContentsOfTextAttachment:atIndex:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": b"Q"}},
        },
    )
    r(
        b"NSObject",
        b"textView:candidates:forSelectedRange:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {"type": "{_NSRange=QQ}"},
            },
        },
    )
    r(
        b"NSObject",
        b"textView:candidatesForSelectedRange:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": "{_NSRange=QQ}"}},
        },
    )
    r(
        b"NSObject",
        b"textView:clickedOnCell:inRect:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            },
        },
    )
    r(
        b"NSObject",
        b"textView:clickedOnCell:inRect:atIndex:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                5: {"type": "Q"},
            },
        },
    )
    r(
        b"NSObject",
        b"textView:clickedOnLink:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"textView:clickedOnLink:atIndex:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": "Q"}},
        },
    )
    r(
        b"NSObject",
        b"textView:completions:forPartialWordRange:indexOfSelectedItem:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {"type": "{_NSRange=QQ}"},
                5: {"type": "^q", "type_modifier": b"N"},
            },
        },
    )
    r(
        b"NSObject",
        b"textView:didCheckTextInRange:types:options:results:orthography:wordCount:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": "{_NSRange=QQ}"},
                4: {"type": "q"},
                5: {"type": b"@"},
                6: {"type": b"@"},
                7: {"type": b"@"},
                8: {"type": "q"},
            },
        },
    )
    r(
        b"NSObject",
        b"textView:doCommandBySelector:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": ":", "sel_of_type": b"v@:@"}},
        },
    )
    r(
        b"NSObject",
        b"textView:doubleClickedOnCell:inRect:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {"type": b"{CGRect={CGPoint=dd}{CGSize=dd}}"},
            },
        },
    )
    r(
        b"NSObject",
        b"textView:doubleClickedOnCell:inRect:atIndex:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                5: {"type": "Q"},
            },
        },
    )
    r(
        b"NSObject",
        b"textView:draggedCell:inRect:event:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                5: {"type": b"@"},
            },
        },
    )
    r(
        b"NSObject",
        b"textView:draggedCell:inRect:event:atIndex:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                5: {"type": b"@"},
                6: {"type": "Q"},
            },
        },
    )
    r(
        b"NSObject",
        b"textView:menu:forEvent:atIndex:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {"type": b"@"},
                5: {"type": "Q"},
            },
        },
    )
    r(
        b"NSObject",
        b"textView:shouldChangeTextInRange:replacementString:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": "{_NSRange=QQ}"},
                4: {"type": b"@"},
            },
        },
    )
    r(
        b"NSObject",
        b"textView:shouldChangeTextInRanges:replacementStrings:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"textView:shouldChangeTypingAttributes:toAttributes:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"textView:shouldSelectCandidateAtIndex:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": "Q"}},
        },
    )
    r(
        b"NSObject",
        b"textView:shouldSetSpellingState:range:",
        {
            "required": False,
            "retval": {"type": "q"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": "q"},
                4: {"type": "{_NSRange=QQ}"},
            },
        },
    )
    r(
        b"NSObject",
        b"textView:shouldUpdateTouchBarItemIdentifiers:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"textView:willChangeSelectionFromCharacterRange:toCharacterRange:",
        {
            "required": False,
            "retval": {"type": "{_NSRange=QQ}"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": "{_NSRange=QQ}"},
                4: {"type": "{_NSRange=QQ}"},
            },
        },
    )
    r(
        b"NSObject",
        b"textView:willChangeSelectionFromCharacterRanges:toCharacterRanges:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"textView:willCheckTextInRange:options:types:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": "{_NSRange=QQ}"},
                4: {"type": b"@"},
                5: {"type": "^q", "type_modifier": b"N"},
            },
        },
    )
    r(
        b"NSObject",
        b"textView:willDisplayToolTip:forCharacterAtIndex:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": "Q"}},
        },
    )
    r(
        b"NSObject",
        b"textView:willShowSharingServicePicker:forItems:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"textView:writablePasteboardTypesForCell:atIndex:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": "Q"}},
        },
    )
    r(
        b"NSObject",
        b"textView:writeCell:atIndex:toPasteboard:type:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {"type": "Q"},
                5: {"type": b"@"},
                6: {"type": b"@"},
            },
        },
    )
    r(
        b"NSObject",
        b"textViewDidChangeSelection:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"textViewDidChangeTypingAttributes:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"textViewportLayoutController:configureRenderingSurfaceForTextLayoutFragment:",
        {
            "required": True,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"textViewportLayoutControllerDidLayout:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"textViewportLayoutControllerWillLayout:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(b"NSObject", b"title", {"required": False, "retval": {"type": b"@"}})
    r(
        b"NSObject",
        b"tokenField:completionsForSubstring:indexOfToken:indexOfSelectedItem:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {"type": "q"},
                5: {"type": "^q", "type_modifier": b"o"},
            },
        },
    )
    r(
        b"NSObject",
        b"tokenField:displayStringForRepresentedObject:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"tokenField:editingStringForRepresentedObject:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"tokenField:hasMenuForRepresentedObject:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"tokenField:menuForRepresentedObject:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"tokenField:readFromPasteboard:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"tokenField:representedObjectForEditingString:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"tokenField:shouldAddObjects:atIndex:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": "Q"}},
        },
    )
    r(
        b"NSObject",
        b"tokenField:styleForRepresentedObject:",
        {
            "required": False,
            "retval": {"type": "Q"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"tokenField:writeRepresentedObjects:toPasteboard:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"tokenFieldCell:completionsForSubstring:indexOfToken:indexOfSelectedItem:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {"type": "q"},
                5: {"type": "^q", "type_modifier": b"o"},
            },
        },
    )
    r(
        b"NSObject",
        b"tokenFieldCell:displayStringForRepresentedObject:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"tokenFieldCell:editingStringForRepresentedObject:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"tokenFieldCell:hasMenuForRepresentedObject:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"tokenFieldCell:menuForRepresentedObject:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"tokenFieldCell:readFromPasteboard:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"tokenFieldCell:representedObjectForEditingString:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"tokenFieldCell:shouldAddObjects:atIndex:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": "Q"}},
        },
    )
    r(
        b"NSObject",
        b"tokenFieldCell:styleForRepresentedObject:",
        {
            "required": False,
            "retval": {"type": "Q"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"tokenFieldCell:writeRepresentedObjects:toPasteboard:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"toolbar:itemForItemIdentifier:willBeInsertedIntoToolbar:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": "Z"}},
        },
    )
    r(
        b"NSObject",
        b"toolbar:itemIdentifier:canBeInsertedAtIndex:",
        {
            "required": False,
            "retval": {"type": b"Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": b"q"}},
        },
    )
    r(
        b"NSObject",
        b"toolbarAllowedItemIdentifiers:",
        {"required": False, "retval": {"type": b"@"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"toolbarDefaultItemIdentifiers:",
        {"required": False, "retval": {"type": b"@"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"toolbarDidRemoveItem:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"toolbarImmovableItemIdentifiers:",
        {"required": False, "retval": {"type": b"@"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"toolbarSelectableItemIdentifiers:",
        {"required": False, "retval": {"type": b"@"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"toolbarWillAddItem:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(b"NSObject", b"touchBar", {"required": True, "retval": {"type": b"@"}})
    r(
        b"NSObject",
        b"touchBar:makeItemForIdentifier:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"trackMouse:inRect:ofView:atCharacterIndex:untilMouseUp:",
        {
            "required": True,
            "retval": {"type": "Z"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                4: {"type": b"@"},
                5: {"type": "Q"},
                6: {"type": "Z"},
            },
        },
    )
    r(
        b"NSObject",
        b"trackMouse:inRect:ofView:untilMouseUp:",
        {
            "required": True,
            "retval": {"type": "Z"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                4: {"type": b"@"},
                5: {"type": "Z"},
            },
        },
    )
    r(
        b"NSObject",
        b"transpose:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"transposeWords:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"unbind:",
        {"retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"undoManagerForTextView:",
        {"required": False, "retval": {"type": b"@"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"unionRectInVisibleSelectedRange",
        {"required": False, "retval": {"type": b"{CGRect={CGPoint=dd}{CGSize=dd}}"}},
    )
    r(b"NSObject", b"unmarkText", {"required": True, "retval": {"type": b"v"}})
    r(
        b"NSObject",
        b"updateDraggingItemsForDrag:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"uppercaseWord:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"validAttributesForMarkedText",
        {"required": True, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"validModesForFontPanel:",
        {"required": False, "retval": {"type": "Q"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"validateMenuItem:",
        {"required": True, "retval": {"type": "Z"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"validateToolbarItem:",
        {"required": True, "retval": {"type": "Z"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"validateUserInterfaceItem:",
        {"required": True, "retval": {"type": "Z"}, "arguments": {2: {"type": b"@"}}},
    )
    r(b"NSObject", b"value", {"retval": {"type": b"@"}})
    r(
        b"NSObject",
        b"valueClassForBinding:",
        {"retval": {"type": "#"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"view:stringForToolTip:point:userData:",
        {
            "required": True,
            "retval": {"type": b"@"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": "i"},
                4: {"type": "{CGPoint=dd}"},
                5: {"type": "^v"},
            },
        },
    )
    r(
        b"NSObject",
        b"viewForRange:firstRect:actualRange:",
        {
            "required": True,
            "retval": {"type": b"@"},
            "arguments": {
                2: {"type": b"{_NSRange=QQ}"},
                3: {
                    "type": b"^{CGRect={CGPoint=dd}{CGSize=dd}}",
                    "type_modifier": b"o",
                },
                4: {"type": b"^{_NSRange=QQ}", "type_modifier": b"o"},
            },
        },
    )
    r(
        b"NSObject",
        b"viewProviderForParentView:location:textContainer:",
        {
            "required": True,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"viewSizeChanged:",
        {"required": True, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"viewportBoundsForTextViewportLayoutController:",
        {
            "required": True,
            "retval": {"type": b"{CGRect={CGPoint=dd}{CGSize=dd}}"},
            "arguments": {2: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"visibleCharacterRanges",
        {"required": False, "retval": {"type": b"@"}},
    )
    r(
        b"NSObject",
        b"wantsPeriodicDraggingUpdates",
        {"required": False, "retval": {"type": "Z"}},
    )
    r(
        b"NSObject",
        b"wantsToDelayTextChangeNotifications",
        {"required": True, "retval": {"type": "Z"}},
    )
    r(
        b"NSObject",
        b"wantsToHandleMouseEvents",
        {"required": True, "retval": {"type": "Z"}},
    )
    r(
        b"NSObject",
        b"wantsToInterpretAllKeystrokes",
        {"required": True, "retval": {"type": "Z"}},
    )
    r(b"NSObject", b"wantsToTrackMouse", {"required": True, "retval": {"type": "Z"}})
    r(
        b"NSObject",
        b"wantsToTrackMouseForEvent:inRect:ofView:atCharacterIndex:",
        {
            "required": True,
            "retval": {"type": "Z"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                4: {"type": b"@"},
                5: {"type": "Q"},
            },
        },
    )
    r(
        b"NSObject",
        b"willTransitionFromLayout:toLayout:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"window:didDecodeRestorableState:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"window:shouldDragDocumentWithEvent:from:withPasteboard:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {"type": "{CGPoint=dd}"},
                5: {"type": b"@"},
            },
        },
    )
    r(
        b"NSObject",
        b"window:shouldPopUpDocumentPathMenu:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"window:startCustomAnimationToEnterFullScreenOnScreen:withDuration:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}, 4: {"type": b"d"}},
        },
    )
    r(
        b"NSObject",
        b"window:startCustomAnimationToEnterFullScreenWithDuration:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"d"}},
        },
    )
    r(
        b"NSObject",
        b"window:startCustomAnimationToExitFullScreenWithDuration:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"d"}},
        },
    )
    r(
        b"NSObject",
        b"window:willEncodeRestorableState:",
        {
            "required": False,
            "retval": {"type": b"v"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"window:willPositionSheet:usingRect:",
        {
            "required": False,
            "retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"@"},
                4: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            },
        },
    )
    r(
        b"NSObject",
        b"window:willResizeForVersionBrowserWithMaxPreferredSize:maxAllowedSize:",
        {
            "required": False,
            "retval": {"type": b"{CGSize=dd}"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": b"{CGSize=dd}"},
                4: {"type": b"{CGSize=dd}"},
            },
        },
    )
    r(
        b"NSObject",
        b"window:willUseFullScreenContentSize:",
        {
            "required": False,
            "retval": {"type": b"{CGSize=dd}"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"{CGSize=dd}"}},
        },
    )
    r(
        b"NSObject",
        b"window:willUseFullScreenPresentationOptions:",
        {
            "required": False,
            "retval": {"type": b"Q"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"Q"}},
        },
    )
    r(
        b"NSObject",
        b"windowDidBecomeKey:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"windowDidBecomeMain:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"windowDidChangeBackingProperties:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"windowDidChangeOcclusionState:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"windowDidChangeScreen:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"windowDidChangeScreenProfile:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"windowDidDeminiaturize:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"windowDidEndLiveResize:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"windowDidEndSheet:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"windowDidEnterFullScreen:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"windowDidEnterVersionBrowser:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"windowDidExitFullScreen:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"windowDidExitVersionBrowser:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"windowDidExpose:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"windowDidFailToEnterFullScreen:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"windowDidFailToExitFullScreen:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"windowDidMiniaturize:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"windowDidMove:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"windowDidResignKey:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"windowDidResignMain:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"windowDidResize:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"windowDidUpdate:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(b"NSObject", b"windowLevel", {"required": False, "retval": {"type": "q"}})
    r(
        b"NSObject",
        b"windowShouldClose:",
        {"required": False, "retval": {"type": "Z"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"windowShouldZoom:toFrame:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            },
        },
    )
    r(
        b"NSObject",
        b"windowWillBeginSheet:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"windowWillClose:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"windowWillEnterFullScreen:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"windowWillEnterVersionBrowser:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"windowWillExitFullScreen:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"windowWillExitVersionBrowser:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"windowWillMiniaturize:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"windowWillMove:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"windowWillResize:toSize:",
        {
            "required": False,
            "retval": {"type": "{CGSize=dd}"},
            "arguments": {2: {"type": b"@"}, 3: {"type": "{CGSize=dd}"}},
        },
    )
    r(
        b"NSObject",
        b"windowWillReturnFieldEditor:toObject:",
        {
            "required": False,
            "retval": {"type": b"@"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"windowWillReturnUndoManager:",
        {"required": False, "retval": {"type": b"@"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"windowWillStartLiveResize:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"windowWillUseStandardFrame:defaultFrame:",
        {
            "required": False,
            "retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            "arguments": {
                2: {"type": b"@"},
                3: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            },
        },
    )
    r(
        b"NSObject",
        b"writableTypesForPasteboard:",
        {"required": True, "retval": {"type": b"@"}, "arguments": {2: {"type": b"@"}}},
    )
    r(
        b"NSObject",
        b"writeSelectionToPasteboard:types:",
        {
            "required": False,
            "retval": {"type": "Z"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"writingOptionsForType:pasteboard:",
        {
            "required": False,
            "retval": {"type": b"Q"},
            "arguments": {2: {"type": b"@"}, 3: {"type": b"@"}},
        },
    )
    r(
        b"NSObject",
        b"yank:",
        {"required": False, "retval": {"type": b"v"}, "arguments": {2: {"type": b"@"}}},
    )
    r(b"NSObject", b"zIndex", {"required": True, "retval": {"type": b"q"}})
    r(b"NSObjectController", b"automaticallyPreparesContent", {"retval": {"type": "Z"}})
    r(b"NSObjectController", b"canAdd", {"retval": {"type": "Z"}})
    r(b"NSObjectController", b"canRemove", {"retval": {"type": "Z"}})
    r(
        b"NSObjectController",
        b"fetchWithRequest:merge:error:",
        {
            "retval": {"type": "Z"},
            "arguments": {3: {"type": "Z"}, 4: {"type_modifier": b"o"}},
        },
    )
    r(b"NSObjectController", b"isEditable", {"retval": {"type": "Z"}})
    r(
        b"NSObjectController",
        b"setAutomaticallyPreparesContent:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(b"NSObjectController", b"setEditable:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSObjectController",
        b"setUsesLazyFetching:",
        {"retval": {"type": "v"}, "arguments": {2: {"type": "Z"}}},
    )
    r(b"NSObjectController", b"usesLazyFetching", {"retval": {"type": "Z"}})
    r(b"NSObjectController", b"validateUserInterfaceItem:", {"retval": {"type": "Z"}})
    r(b"NSOpenGLContext", b"CGLContextObj", {"retval": {"type": "^{_CGLContextObj}"}})
    r(
        b"NSOpenGLContext",
        b"getValues:forParameter:",
        {"arguments": {2: {"type": "^i"}}},
    )
    r(
        b"NSOpenGLContext",
        b"setOffScreen:width:height:rowbytes:",
        {"arguments": {2: {"type_modifier": b"n", "c_array_of_variable_length": True}}},
    )
    r(
        b"NSOpenGLContext",
        b"setValues:forParameter:",
        {"arguments": {2: {"type_modifier": b"n", "c_array_of_variable_length": True}}},
    )
    r(
        b"NSOpenGLLayer",
        b"canDrawInOpenGLContext:pixelFormat:forLayerTime:displayTime:",
        {
            "retval": {"type": "Z"},
            "arguments": {
                5: {
                    "type": b"^{_CVTimeStamp=IiqQdq{CVSMPTETime=ssIIIssss}QQ}",
                    "type_modifier": b"n",
                }
            },
        },
    )
    r(
        b"NSOpenGLLayer",
        b"drawInOpenGLContext:pixelFormat:forLayerTime:displayTime:",
        {
            "arguments": {
                5: {
                    "type": b"^{_CVTimeStamp=IiqQdq{CVSMPTETime=ssIIIssss}QQ}",
                    "type_modifier": b"n",
                }
            }
        },
    )
    r(
        b"NSOpenGLPixelFormat",
        b"CGLPixelFormatObj",
        {"retval": {"type": "^{_CGLPixelFormatObject}"}},
    )
    r(
        b"NSOpenGLPixelFormat",
        b"getValues:forAttribute:forVirtualScreen:",
        {"arguments": {2: {"type": "^i", "type_modifier": b"o"}}},
    )
    r(
        b"NSOpenGLPixelFormat",
        b"initWithAttributes:",
        {
            "arguments": {
                2: {
                    "c_array_delimited_by_null": True,
                    "type": "r^I",
                    "type_modifier": b"n",
                }
            }
        },
    )
    r(
        b"NSOpenGLView",
        b"initWithFrame:pixelFormat:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSOpenGLView",
        b"setWantsBestResolutionOpenGLSurface:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(
        b"NSOpenGLView",
        b"setWantsExtendedDynamicRangeOpenGLSurface:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(b"NSOpenGLView", b"wantsBestResolutionOpenGLSurface", {"retval": {"type": b"Z"}})
    r(
        b"NSOpenGLView",
        b"wantsExtendedDynamicRangeOpenGLSurface",
        {"retval": {"type": b"Z"}},
    )
    r(b"NSOpenPanel", b"allowsMultipleSelection", {"retval": {"type": "Z"}})
    r(
        b"NSOpenPanel",
        b"beginForDirectory:file:types:modelessDelegate:didEndSelector:contextInfo:",
        {"arguments": {6: {"type": ":", "sel_of_type": b"v@:@q^v"}, 7: {"type": "^v"}}},
    )
    r(
        b"NSOpenPanel",
        b"beginSheetForDirectory:file:types:modalForWindow:modalDelegate:didEndSelector:contextInfo:",
        {"arguments": {7: {"sel_of_type": b"v@:@q^v"}, 8: {"type": "^v"}}},
    )
    r(b"NSOpenPanel", b"canChooseDirectories", {"retval": {"type": "Z"}})
    r(b"NSOpenPanel", b"canChooseFiles", {"retval": {"type": "Z"}})
    r(b"NSOpenPanel", b"canDownloadUbiquitousContents", {"retval": {"type": b"Z"}})
    r(b"NSOpenPanel", b"canResolveUbiquitousConflicts", {"retval": {"type": b"Z"}})
    r(b"NSOpenPanel", b"isAccessoryViewDisclosed", {"retval": {"type": "Z"}})
    r(b"NSOpenPanel", b"resolvesAliases", {"retval": {"type": "Z"}})
    r(b"NSOpenPanel", b"setAccessoryViewDisclosed:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSOpenPanel", b"setAllowsMultipleSelection:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSOpenPanel", b"setCanChooseDirectories:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSOpenPanel", b"setCanChooseFiles:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSOpenPanel",
        b"setCanDownloadUbiquitousContents:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(
        b"NSOpenPanel",
        b"setCanResolveUbiquitousConflicts:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(b"NSOpenPanel", b"setResolvesAliases:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSOutlineView", b"autoresizesOutlineColumn", {"retval": {"type": "Z"}})
    r(b"NSOutlineView", b"autosaveExpandedItems", {"retval": {"type": "Z"}})
    r(
        b"NSOutlineView",
        b"collapseItem:collapseChildren:",
        {"arguments": {3: {"type": "Z"}}},
    )
    r(
        b"NSOutlineView",
        b"expandItem:expandChildren:",
        {"arguments": {3: {"type": "Z"}}},
    )
    r(
        b"NSOutlineView",
        b"frameOfOutlineCellAtRow:",
        {"retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
    )
    r(b"NSOutlineView", b"indentationMarkerFollowsCell", {"retval": {"type": "Z"}})
    r(b"NSOutlineView", b"isExpandable:", {"retval": {"type": "Z"}})
    r(b"NSOutlineView", b"isItemExpanded:", {"retval": {"type": "Z"}})
    r(
        b"NSOutlineView",
        b"reloadItem:reloadChildren:",
        {"arguments": {3: {"type": "Z"}}},
    )
    r(
        b"NSOutlineView",
        b"setAutoresizesOutlineColumn:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(b"NSOutlineView", b"setAutosaveExpandedItems:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSOutlineView",
        b"setIndentationMarkerFollowsCell:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(
        b"NSOutlineView",
        b"setStronglyReferencesItems:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(
        b"NSOutlineView",
        b"shouldCollapseAutoExpandedItemsForDeposited:",
        {"retval": {"type": "Z"}, "arguments": {2: {"type": "Z"}}},
    )
    r(b"NSOutlineView", b"stronglyReferencesItems", {"retval": {"type": "Z"}})
    r(
        b"NSPDFImageRep",
        b"bounds",
        {"retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
    )
    r(b"NSPDFInfo", b"isFileExtensionHidden", {"retval": {"type": b"Z"}})
    r(b"NSPDFInfo", b"setFileExtensionHidden:", {"arguments": {2: {"type": b"Z"}}})
    r(
        b"NSPDFPanel",
        b"beginSheetWithPDFInfo:modalForWindow:completionHandler:",
        {
            "arguments": {
                4: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {0: {"type": b"^v"}, 1: {"type": b"q"}},
                    }
                }
            }
        },
    )
    r(
        b"NSPICTImageRep",
        b"boundingBox",
        {"retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
    )
    r(
        b"NSPageLayout",
        b"beginSheetUsingPrintInfo:onWindow:completionHandler:",
        {
            "arguments": {
                4: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {0: {"type": b"^v"}, 1: {"type": b"q"}},
                    }
                }
            }
        },
    )
    r(
        b"NSPageLayout",
        b"beginSheetWithPrintInfo:modalForWindow:delegate:didEndSelector:contextInfo:",
        {"arguments": {5: {"sel_of_type": b"v@:@q^v"}, 6: {"type": "^v"}}},
    )
    r(b"NSPanel", b"becomesKeyOnlyIfNeeded", {"retval": {"type": "Z"}})
    r(b"NSPanel", b"isFloatingPanel", {"retval": {"type": "Z"}})
    r(b"NSPanel", b"setBecomesKeyOnlyIfNeeded:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSPanel", b"setFloatingPanel:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSPanel", b"setWorksWhenModal:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSPanel", b"worksWhenModal", {"retval": {"type": "Z"}})
    r(
        b"NSParagraphStyle",
        b"allowsDefaultTighteningForTruncation",
        {"retval": {"type": "Z"}},
    )
    r(b"NSParagraphStyle", b"usesDefaultHyphenation", {"retval": {"type": "Z"}})
    r(
        b"NSPasteboard",
        b"canReadItemWithDataConformingToTypes:",
        {"retval": {"type": "Z"}},
    )
    r(b"NSPasteboard", b"canReadObjectForClasses:options:", {"retval": {"type": "Z"}})
    r(b"NSPasteboard", b"setData:forType:", {"retval": {"type": "Z"}})
    r(b"NSPasteboard", b"setPropertyList:forType:", {"retval": {"type": "Z"}})
    r(b"NSPasteboard", b"setString:forType:", {"retval": {"type": "Z"}})
    r(b"NSPasteboard", b"writeFileContents:", {"retval": {"type": "Z"}})
    r(b"NSPasteboard", b"writeFileWrapper:", {"retval": {"type": "Z"}})
    r(b"NSPasteboard", b"writeObjects:", {"retval": {"type": "Z"}})
    r(b"NSPasteboardItem", b"setData:forType:", {"retval": {"type": "Z"}})
    r(b"NSPasteboardItem", b"setDataProvider:forTypes:", {"retval": {"type": "Z"}})
    r(b"NSPasteboardItem", b"setPropertyList:forType:", {"retval": {"type": "Z"}})
    r(b"NSPasteboardItem", b"setString:forType:", {"retval": {"type": "Z"}})
    r(
        b"NSPathCell",
        b"mouseEntered:withFrame:inView:",
        {"arguments": {3: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSPathCell",
        b"mouseExited:withFrame:inView:",
        {"arguments": {3: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSPathCell",
        b"pathComponentCellAtPoint:withFrame:inView:",
        {
            "arguments": {
                2: {"type": "{CGPoint=dd}"},
                3: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            }
        },
    )
    r(
        b"NSPathCell",
        b"rectOfPathComponentCell:withFrame:inView:",
        {
            "retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            "arguments": {3: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
        },
    )
    r(
        b"NSPathCell",
        b"setDoubleAction:",
        {"retval": {"type": "v"}, "arguments": {2: {"sel_of_type": b"v@:@"}}},
    )
    r(b"NSPathControl", b"isEditable", {"retval": {"type": b"Z"}})
    r(
        b"NSPathControl",
        b"setDoubleAction:",
        {"arguments": {2: {"sel_of_type": b"v@:@"}}},
    )
    r(
        b"NSPathControl",
        b"setDraggingSourceOperationMask:forLocal:",
        {"arguments": {3: {"type": "Z"}}},
    )
    r(b"NSPathControl", b"setEditable:", {"arguments": {2: {"type": b"Z"}}})
    r(
        b"NSPersistentDocument",
        b"configurePersistentStoreCoordinatorForURL:ofType:error:",
        {"retval": {"type": "Z"}, "arguments": {4: {"type_modifier": b"o"}}},
    )
    r(
        b"NSPersistentDocument",
        b"configurePersistentStoreCoordinatorForURL:ofType:modelConfiguration:storeOptions:error:",
        {"retval": {"type": "Z"}, "arguments": {6: {"type_modifier": b"o"}}},
    )
    r(
        b"NSPersistentDocument",
        b"readFromURL:ofType:error:",
        {"retval": {"type": "Z"}, "arguments": {4: {"type_modifier": b"o"}}},
    )
    r(
        b"NSPersistentDocument",
        b"revertToContentsOfURL:ofType:error:",
        {"retval": {"type": "Z"}, "arguments": {4: {"type_modifier": b"o"}}},
    )
    r(
        b"NSPersistentDocument",
        b"writeToURL:ofType:forSaveOperation:originalContentsURL:error:",
        {"retval": {"type": "Z"}, "arguments": {6: {"type_modifier": b"o"}}},
    )
    r(b"NSPickerTouchBarItem", b"isEnabled", {"retval": {"type": b"Z"}})
    r(b"NSPickerTouchBarItem", b"isEnabledAtIndex:", {"retval": {"type": b"Z"}})
    r(
        b"NSPickerTouchBarItem",
        b"pickerTouchBarItemWithIdentifier:images:selectionMode:target:action:",
        {"arguments": {6: {"sel_of_type": b"v@:@"}}},
    )
    r(
        b"NSPickerTouchBarItem",
        b"pickerTouchBarItemWithIdentifier:labels:selectionMode:target:action:",
        {"arguments": {6: {"sel_of_type": b"v@:@"}}},
    )
    r(
        b"NSPickerTouchBarItem",
        b"setAction:",
        {"arguments": {2: {"sel_of_type": b"v@:@"}}},
    )
    r(b"NSPickerTouchBarItem", b"setEnabled:", {"arguments": {2: {"type": b"Z"}}})
    r(
        b"NSPickerTouchBarItem",
        b"setEnabled:atIndex:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(b"NSPopUpButton", b"autoenablesItems", {"retval": {"type": "Z"}})
    r(
        b"NSPopUpButton",
        b"indexOfItemWithTarget:andAction:",
        {"arguments": {3: {"sel_of_type": b"v@:@"}}},
    )
    r(
        b"NSPopUpButton",
        b"initWithFrame:pullsDown:",
        {
            "arguments": {
                2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                3: {"type": "Z"},
            }
        },
    )
    r(b"NSPopUpButton", b"pullsDown", {"retval": {"type": "Z"}})
    r(b"NSPopUpButton", b"selectItemWithTag:", {"retval": {"type": "Z"}})
    r(b"NSPopUpButton", b"setAutoenablesItems:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSPopUpButton", b"setPullsDown:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSPopUpButtonCell", b"altersStateOfSelectedItem", {"retval": {"type": "Z"}})
    r(
        b"NSPopUpButtonCell",
        b"attachPopUpWithFrame:inView:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(b"NSPopUpButtonCell", b"autoenablesItems", {"retval": {"type": "Z"}})
    r(
        b"NSPopUpButtonCell",
        b"indexOfItemWithTarget:andAction:",
        {"arguments": {3: {"sel_of_type": b"v@:@"}}},
    )
    r(
        b"NSPopUpButtonCell",
        b"initTextCell:pullsDown:",
        {"arguments": {3: {"type": "Z"}}},
    )
    r(
        b"NSPopUpButtonCell",
        b"performClickWithFrame:inView:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(b"NSPopUpButtonCell", b"pullsDown", {"retval": {"type": "Z"}})
    r(b"NSPopUpButtonCell", b"selectItemWithTag:", {"retval": {"type": "Z"}})
    r(
        b"NSPopUpButtonCell",
        b"setAltersStateOfSelectedItem:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(b"NSPopUpButtonCell", b"setAutoenablesItems:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSPopUpButtonCell", b"setPullsDown:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSPopUpButtonCell", b"setUsesItemFromMenu:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSPopUpButtonCell", b"usesItemFromMenu", {"retval": {"type": "Z"}})
    r(b"NSPopover", b"animates", {"retval": {"type": b"Z"}})
    r(b"NSPopover", b"hasFullSizeContent", {"retval": {"type": b"Z"}})
    r(b"NSPopover", b"isDetached", {"retval": {"type": "Z"}})
    r(b"NSPopover", b"isShown", {"retval": {"type": b"Z"}})
    r(b"NSPopover", b"setAnimates:", {"arguments": {2: {"type": b"Z"}}})
    r(b"NSPopover", b"setDetached:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSPopover", b"setHasFullSizeContent:", {"arguments": {2: {"type": b"Z"}}})
    r(b"NSPopover", b"setShown:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSPopoverTouchBarItem",
        b"setShowsCloseButton:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(b"NSPopoverTouchBarItem", b"showsCloseButton", {"retval": {"type": "Z"}})
    r(b"NSPrintInfo", b"PMPageFormat", {"retval": {"type": "^{OpaquePMPageFormat=}"}})
    r(
        b"NSPrintInfo",
        b"PMPrintSession",
        {"retval": {"type": "^{OpaquePMPrintSession=}"}},
    )
    r(
        b"NSPrintInfo",
        b"PMPrintSettings",
        {"retval": {"type": "^{OpaquePMPrintSettings=}"}},
    )
    r(
        b"NSPrintInfo",
        b"imageablePageBounds",
        {"retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
    )
    r(b"NSPrintInfo", b"isHorizontallyCentered", {"retval": {"type": "Z"}})
    r(b"NSPrintInfo", b"isSelectionOnly", {"retval": {"type": "Z"}})
    r(b"NSPrintInfo", b"isVerticallyCentered", {"retval": {"type": "Z"}})
    r(b"NSPrintInfo", b"paperSize", {"retval": {"type": "{CGSize=dd}"}})
    r(b"NSPrintInfo", b"setHorizontallyCentered:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSPrintInfo", b"setPaperSize:", {"arguments": {2: {"type": "{CGSize=dd}"}}})
    r(b"NSPrintInfo", b"setSelectionOnly:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSPrintInfo", b"setVerticallyCentered:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSPrintInfo", b"sizeForPaperName:", {"retval": {"type": "{CGSize=dd}"}})
    r(
        b"NSPrintOperation",
        b"EPSOperationWithView:insideRect:toData:",
        {"arguments": {3: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSPrintOperation",
        b"EPSOperationWithView:insideRect:toData:printInfo:",
        {"arguments": {3: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSPrintOperation",
        b"EPSOperationWithView:insideRect:toPath:printInfo:",
        {"arguments": {3: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSPrintOperation",
        b"PDFOperationWithView:insideRect:toData:",
        {"arguments": {3: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSPrintOperation",
        b"PDFOperationWithView:insideRect:toData:printInfo:",
        {"arguments": {3: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSPrintOperation",
        b"PDFOperationWithView:insideRect:toPath:printInfo:",
        {"arguments": {3: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(b"NSPrintOperation", b"canSpawnSeparateThread", {"retval": {"type": "Z"}})
    r(b"NSPrintOperation", b"deliverResult", {"retval": {"type": "Z"}})
    r(b"NSPrintOperation", b"isCopyingOperation", {"retval": {"type": "Z"}})
    r(b"NSPrintOperation", b"pageRange", {"retval": {"type": "{_NSRange=QQ}"}})
    r(b"NSPrintOperation", b"runOperation", {"retval": {"type": "Z"}})
    r(
        b"NSPrintOperation",
        b"runOperationModalForWindow:delegate:didRunSelector:contextInfo:",
        {"arguments": {4: {"sel_of_type": b"v@:@Z^v"}, 5: {"type": "^v"}}},
    )
    r(
        b"NSPrintOperation",
        b"setCanSpawnSeparateThread:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(b"NSPrintOperation", b"setShowPanels:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSPrintOperation", b"setShowsPrintPanel:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSPrintOperation", b"setShowsProgressPanel:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSPrintOperation", b"showPanels", {"retval": {"type": "Z"}})
    r(b"NSPrintOperation", b"showsPrintPanel", {"retval": {"type": "Z"}})
    r(b"NSPrintOperation", b"showsProgressPanel", {"retval": {"type": "Z"}})
    r(
        b"NSPrintPanel",
        b"beginSheetUsingPrintInfo:onWindow:completionHandler:",
        {
            "arguments": {
                4: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {0: {"type": b"^v"}, 1: {"type": b"q"}},
                    }
                }
            }
        },
    )
    r(
        b"NSPrintPanel",
        b"beginSheetWithPrintInfo:modalForWindow:delegate:didEndSelector:contextInfo:",
        {"arguments": {5: {"sel_of_type": b"v@:@q^v"}, 6: {"type": "^v"}}},
    )
    r(b"NSPrinter", b"acceptsBinary", {"retval": {"type": "Z"}})
    r(b"NSPrinter", b"booleanForKey:inTable:", {"retval": {"type": "Z"}})
    r(
        b"NSPrinter",
        b"imageRectForPaper:",
        {"retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
    )
    r(b"NSPrinter", b"isColor", {"retval": {"type": "Z"}})
    r(b"NSPrinter", b"isFontAvailable:", {"retval": {"type": "Z"}})
    r(b"NSPrinter", b"isKey:inTable:", {"retval": {"type": "Z"}})
    r(b"NSPrinter", b"isOutputStackInReverseOrder", {"retval": {"type": "Z"}})
    r(b"NSPrinter", b"pageSizeForPaper:", {"retval": {"type": "{CGSize=dd}"}})
    r(
        b"NSPrinter",
        b"printerWithName:domain:includeUnavailable:",
        {"arguments": {4: {"type": "Z"}}},
    )
    r(
        b"NSPrinter",
        b"rectForKey:inTable:",
        {"retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
    )
    r(b"NSPrinter", b"sizeForKey:inTable:", {"retval": {"type": "{CGSize=dd}"}})
    r(b"NSProgressIndicator", b"isBezeled", {"retval": {"type": "Z"}})
    r(b"NSProgressIndicator", b"isDisplayedWhenStopped", {"retval": {"type": "Z"}})
    r(b"NSProgressIndicator", b"isIndeterminate", {"retval": {"type": "Z"}})
    r(b"NSProgressIndicator", b"setBezeled:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSProgressIndicator",
        b"setDisplayedWhenStopped:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(b"NSProgressIndicator", b"setIndeterminate:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSProgressIndicator",
        b"setUsesThreadedAnimation:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(b"NSProgressIndicator", b"usesThreadedAnimation", {"retval": {"type": "Z"}})
    r(b"NSQuickDrawView", b"qdPort", {"retval": {"type": "^v"}})
    r(b"NSResponder", b"acceptsFirstResponder", {"retval": {"type": "Z"}})
    r(b"NSResponder", b"becomeFirstResponder", {"retval": {"type": "Z"}})
    r(
        b"NSResponder",
        b"doCommandBySelector:",
        {"arguments": {2: {"sel_of_type": b"v@:@"}}},
    )
    r(b"NSResponder", b"noResponderFor:", {"arguments": {2: {"sel_of_type": b"v@:@"}}})
    r(b"NSResponder", b"performKeyEquivalent:", {"retval": {"type": "Z"}})
    r(b"NSResponder", b"performMnemonic:", {"retval": {"type": "Z"}})
    r(b"NSResponder", b"presentError:", {"retval": {"type": "Z"}})
    r(
        b"NSResponder",
        b"presentError:modalForWindow:delegate:didPresentSelector:contextInfo:",
        {"arguments": {5: {"sel_of_type": b"v@:Z^v"}, 6: {"type": "^v"}}},
    )
    r(b"NSResponder", b"resignFirstResponder", {"retval": {"type": "Z"}})
    r(b"NSResponder", b"shouldBeTreatedAsInkEvent:", {"retval": {"type": "Z"}})
    r(
        b"NSResponder",
        b"supplementalTargetForAction:sender:",
        {"arguments": {2: {"sel_of_type": b"v@:@"}}},
    )
    r(
        b"NSResponder",
        b"tryToPerform:with:",
        {"retval": {"type": "Z"}, "arguments": {2: {"sel_of_type": b"v@:@"}}},
    )
    r(
        b"NSResponder",
        b"validateProposedFirstResponder:forEvent:",
        {"retval": {"type": b"Z"}},
    )
    r(b"NSResponder", b"wantsForwardedScrollEventsForAxis:", {"retval": {"type": b"Z"}})
    r(
        b"NSResponder",
        b"wantsScrollEventsForSwipeTrackingOnAxis:",
        {"retval": {"type": b"Z"}},
    )
    r(b"NSRuleEditor", b"canRemoveAllRows", {"retval": {"type": "Z"}})
    r(
        b"NSRuleEditor",
        b"insertRowAtIndex:withType:asSubrowOfRow:animate:",
        {"arguments": {5: {"type": "Z"}}},
    )
    r(b"NSRuleEditor", b"isEditable", {"retval": {"type": "Z"}})
    r(
        b"NSRuleEditor",
        b"removeRowsAtIndexes:includeSubrows:",
        {"arguments": {3: {"type": "Z"}}},
    )
    r(
        b"NSRuleEditor",
        b"selectRowIndexes:byExtendingSelection:",
        {"arguments": {3: {"type": "Z"}}},
    )
    r(b"NSRuleEditor", b"setCanRemoveAllRows:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSRuleEditor", b"setEditable:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSRulerMarker",
        b"drawRect:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(b"NSRulerMarker", b"imageOrigin", {"retval": {"type": "{CGPoint=dd}"}})
    r(
        b"NSRulerMarker",
        b"imageRectInRuler",
        {"retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
    )
    r(
        b"NSRulerMarker",
        b"initWithRulerView:markerLocation:image:imageOrigin:",
        {"arguments": {5: {"type": "{CGPoint=dd}"}}},
    )
    r(b"NSRulerMarker", b"isDragging", {"retval": {"type": "Z"}})
    r(b"NSRulerMarker", b"isMovable", {"retval": {"type": "Z"}})
    r(b"NSRulerMarker", b"isRemovable", {"retval": {"type": "Z"}})
    r(
        b"NSRulerMarker",
        b"setImageOrigin:",
        {"arguments": {2: {"type": "{CGPoint=dd}"}}},
    )
    r(b"NSRulerMarker", b"setMovable:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSRulerMarker", b"setRemovable:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSRulerMarker",
        b"trackMouse:adding:",
        {"retval": {"type": "Z"}, "arguments": {3: {"type": "Z"}}},
    )
    r(
        b"NSRulerView",
        b"drawHashMarksAndLabelsInRect:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSRulerView",
        b"drawMarkersInRect:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(b"NSRulerView", b"isFlipped", {"retval": {"type": "Z"}})
    r(b"NSRulerView", b"trackMarker:withMouseEvent:", {"retval": {"type": "Z"}})
    r(
        b"NSRunningApplication",
        b"activateFromApplication:options:",
        {"retval": {"type": b"Z"}},
    )
    r(b"NSRunningApplication", b"activateWithOptions:", {"retval": {"type": "Z"}})
    r(b"NSRunningApplication", b"forceTerminate", {"retval": {"type": "Z"}})
    r(b"NSRunningApplication", b"hide", {"retval": {"type": "Z"}})
    r(b"NSRunningApplication", b"isActive", {"retval": {"type": "Z"}})
    r(b"NSRunningApplication", b"isFinishedLaunching", {"retval": {"type": "Z"}})
    r(b"NSRunningApplication", b"isHidden", {"retval": {"type": "Z"}})
    r(b"NSRunningApplication", b"isTerminated", {"retval": {"type": "Z"}})
    r(b"NSRunningApplication", b"ownsMenuBar", {"retval": {"type": b"Z"}})
    r(b"NSRunningApplication", b"terminate", {"retval": {"type": "Z"}})
    r(b"NSRunningApplication", b"unhide", {"retval": {"type": "Z"}})
    r(b"NSSavePanel", b"allowsOtherFileTypes", {"retval": {"type": "Z"}})
    r(
        b"NSSavePanel",
        b"beginForDirectory:file:types:modelessDelegate:didEndSelector:contextInfo:",
        {"arguments": {6: {"type": ":", "sel_of_type": b"v@:@q^v"}, 7: {"type": "^v"}}},
    )
    r(
        b"NSSavePanel",
        b"beginSheetForDirectory:file:modalForWindow:modalDelegate:didEndSelector:contextInfo:",
        {"arguments": {6: {"sel_of_type": b"v@:@q^v"}, 7: {"type": "^v"}}},
    )
    r(
        b"NSSavePanel",
        b"beginSheetForDirectory:file:types:modalForWindow:modalDelegate:didEndSelector:contextInfo:",
        {"arguments": {7: {"sel_of_type": b"v@:@q^v"}, 8: {"type": "^v"}}},
    )
    r(
        b"NSSavePanel",
        b"beginSheetModalForWindow:completionHandler:",
        {
            "arguments": {
                3: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {0: {"type": b"^v"}, 1: {"type": b"q"}},
                    }
                }
            }
        },
    )
    r(
        b"NSSavePanel",
        b"beginWithCompletionHandler:",
        {
            "arguments": {
                2: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {0: {"type": b"^v"}, 1: {"type": b"q"}},
                    }
                }
            }
        },
    )
    r(b"NSSavePanel", b"canCreateDirectories", {"retval": {"type": "Z"}})
    r(b"NSSavePanel", b"canSelectHiddenExtension", {"retval": {"type": "Z"}})
    r(b"NSSavePanel", b"isExpanded", {"retval": {"type": "Z"}})
    r(b"NSSavePanel", b"isExtensionHidden", {"retval": {"type": "Z"}})
    r(b"NSSavePanel", b"setAllowsOtherFileTypes:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSSavePanel", b"setCanCreateDirectories:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSSavePanel",
        b"setCanSelectHiddenExtension:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(b"NSSavePanel", b"setExtensionHidden:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSSavePanel", b"setShowsHiddenFiles:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSSavePanel", b"setShowsTagField:", {"arguments": {2: {"type": b"Z"}}})
    r(
        b"NSSavePanel",
        b"setTreatsFilePackagesAsDirectories:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(b"NSSavePanel", b"showsHiddenFiles", {"retval": {"type": "Z"}})
    r(b"NSSavePanel", b"showsTagField", {"retval": {"type": b"Z"}})
    r(b"NSSavePanel", b"treatsFilePackagesAsDirectories", {"retval": {"type": "Z"}})
    r(b"NSScreen", b"canRepresentDisplayGamut:", {"retval": {"type": "Z"}})
    r(
        b"NSScreen",
        b"displayLinkWithTarget:selector:",
        {"arguments": {3: {"type": ":", "sel_of_type": b"v@:@"}}},
    )
    r(b"NSScreen", b"frame", {"retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}})
    r(b"NSScreen", b"screensHaveSeparateSpaces", {"retval": {"type": b"Z"}})
    r(
        b"NSScreen",
        b"supportedWindowDepths",
        {"retval": {"c_array_delimited_by_null": True}},
    )
    r(
        b"NSScreen",
        b"visibleFrame",
        {"retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
    )
    r(b"NSScrollView", b"allowsMagnification", {"retval": {"type": b"Z"}})
    r(b"NSScrollView", b"autohidesScrollers", {"retval": {"type": "Z"}})
    r(b"NSScrollView", b"automaticallyAdjustsContentInsets", {"retval": {"type": b"Z"}})
    r(b"NSScrollView", b"contentSize", {"retval": {"type": "{CGSize=dd}"}})
    r(
        b"NSScrollView",
        b"contentSizeForFrameSize:hasHorizontalScroller:hasVerticalScroller:borderType:",
        {
            "retval": {"type": "{CGSize=dd}"},
            "arguments": {
                2: {"type": "{CGSize=dd}"},
                3: {"type": "Z"},
                4: {"type": "Z"},
            },
        },
    )
    r(
        b"NSScrollView",
        b"documentVisibleRect",
        {"retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
    )
    r(b"NSScrollView", b"drawsBackground", {"retval": {"type": "Z"}})
    r(
        b"NSScrollView",
        b"frameSizeForContentSize:hasHorizontalScroller:hasVerticalScroller:borderType:",
        {
            "retval": {"type": "{CGSize=dd}"},
            "arguments": {
                2: {"type": "{CGSize=dd}"},
                3: {"type": "Z"},
                4: {"type": "Z"},
            },
        },
    )
    r(b"NSScrollView", b"hasHorizontalRuler", {"retval": {"type": "Z"}})
    r(b"NSScrollView", b"hasHorizontalScroller", {"retval": {"type": "Z"}})
    r(b"NSScrollView", b"hasVerticalRuler", {"retval": {"type": "Z"}})
    r(b"NSScrollView", b"hasVerticalScroller", {"retval": {"type": "Z"}})
    r(b"NSScrollView", b"rulersVisible", {"retval": {"type": "Z"}})
    r(b"NSScrollView", b"scrollsDynamically", {"retval": {"type": "Z"}})
    r(b"NSScrollView", b"setAllowsMagnification:", {"arguments": {2: {"type": b"Z"}}})
    r(b"NSScrollView", b"setAutohidesScrollers:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSScrollView",
        b"setAutomaticallyAdjustsContentInsets:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(b"NSScrollView", b"setDrawsBackground:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSScrollView", b"setHasHorizontalRuler:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSScrollView", b"setHasHorizontalScroller:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSScrollView", b"setHasVerticalRuler:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSScrollView", b"setHasVerticalScroller:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSScrollView", b"setRulersVisible:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSScrollView", b"setScrollsDynamically:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSScrollView",
        b"setUsesPredominantAxisScrolling:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(b"NSScrollView", b"usesPredominantAxisScrolling", {"retval": {"type": b"Z"}})
    r(b"NSScroller", b"drawArrow:highlight:", {"arguments": {3: {"type": "Z"}}})
    r(
        b"NSScroller",
        b"drawKnobSlotInRect:highlight:",
        {
            "arguments": {
                2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                3: {"type": "Z"},
            }
        },
    )
    r(b"NSScroller", b"highlight:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSScroller", b"isCompatibleWithOverlayScrollers", {"retval": {"type": b"Z"}})
    r(
        b"NSScroller",
        b"rectForPart:",
        {"retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
    )
    r(b"NSScroller", b"testPart:", {"arguments": {2: {"type": "{CGPoint=dd}"}}})
    r(b"NSScrubber", b"floatsSelectionViews", {"retval": {"type": "Z"}})
    r(b"NSScrubber", b"isContinuous", {"retval": {"type": "Z"}})
    r(
        b"NSScrubber",
        b"performSequentialBatchUpdates:",
        {
            "arguments": {
                2: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {0: {"type": b"^v"}},
                    }
                }
            }
        },
    )
    r(b"NSScrubber", b"setContinuous:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSScrubber", b"setFloatsSelectionViews:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSScrubber",
        b"setShowsAdditionalContentIndicators:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(b"NSScrubber", b"setShowsArrowButtons:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSScrubber", b"showsAdditionalContentIndicators", {"retval": {"type": "Z"}})
    r(b"NSScrubber", b"showsArrowButtons", {"retval": {"type": "Z"}})
    r(b"NSScrubberArrangedView", b"isHighlighted", {"retval": {"type": "Z"}})
    r(b"NSScrubberArrangedView", b"isSelected", {"retval": {"type": "Z"}})
    r(b"NSScrubberArrangedView", b"setHighlighted:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSScrubberArrangedView", b"setSelected:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSScrubberLayout",
        b"automaticallyMirrorsInRightToLeftLayout",
        {"retval": {"type": "Z"}},
    )
    r(
        b"NSScrubberLayout",
        b"shouldInvalidateLayoutForChangeFromVisibleRect:toVisibleRect:",
        {"retval": {"type": "Z"}},
    )
    r(
        b"NSScrubberLayout",
        b"shouldInvalidateLayoutForHighlightChange",
        {"retval": {"type": "Z"}},
    )
    r(
        b"NSScrubberLayout",
        b"shouldInvalidateLayoutForSelectionChange",
        {"retval": {"type": "Z"}},
    )
    r(b"NSSearchField", b"centersPlaceholder", {"retval": {"type": "Z"}})
    r(
        b"NSSearchField",
        b"rectForCancelButtonWhenCentered:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(
        b"NSSearchField",
        b"rectForSearchButtonWhenCentered:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(
        b"NSSearchField",
        b"rectForSearchTextWhenCentered:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(b"NSSearchField", b"sendsSearchStringImmediately", {"retval": {"type": b"Z"}})
    r(b"NSSearchField", b"sendsWholeSearchString", {"retval": {"type": b"Z"}})
    r(b"NSSearchField", b"setCentersPlaceholder:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSSearchField",
        b"setSendsSearchStringImmediately:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(
        b"NSSearchField",
        b"setSendsWholeSearchString:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(
        b"NSSearchFieldCell",
        b"cancelButtonRectForBounds:",
        {
            "retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            "arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
        },
    )
    r(
        b"NSSearchFieldCell",
        b"searchButtonRectForBounds:",
        {
            "retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            "arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
        },
    )
    r(
        b"NSSearchFieldCell",
        b"searchTextRectForBounds:",
        {
            "retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            "arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
        },
    )
    r(b"NSSearchFieldCell", b"sendsSearchStringImmediately", {"retval": {"type": "Z"}})
    r(b"NSSearchFieldCell", b"sendsWholeSearchString", {"retval": {"type": "Z"}})
    r(
        b"NSSearchFieldCell",
        b"setSendsSearchStringImmediately:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(
        b"NSSearchFieldCell",
        b"setSendsWholeSearchString:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(
        b"NSSearchToolbarItem",
        b"resignsFirstResponderWithCancel",
        {"retval": {"type": b"Z"}},
    )
    r(
        b"NSSearchToolbarItem",
        b"setResignsFirstResponderWithCancel:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(b"NSSecureTextFieldCell", b"echosBullets", {"retval": {"type": "Z"}})
    r(b"NSSecureTextFieldCell", b"setEchosBullets:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSSegmentedCell",
        b"drawSegment:inFrame:withView:",
        {"arguments": {3: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(b"NSSegmentedCell", b"isEnabledForSegment:", {"retval": {"type": "Z"}})
    r(b"NSSegmentedCell", b"isSelectedForSegment:", {"retval": {"type": "Z"}})
    r(b"NSSegmentedCell", b"selectSegmentWithTag:", {"retval": {"type": "Z"}})
    r(b"NSSegmentedCell", b"setEnabled:forSegment:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSSegmentedCell", b"setSelected:forSegment:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSSegmentedControl", b"isEnabledForSegment:", {"retval": {"type": "Z"}})
    r(b"NSSegmentedControl", b"isSelectedForSegment:", {"retval": {"type": "Z"}})
    r(b"NSSegmentedControl", b"isSpringLoaded", {"retval": {"type": b"Z"}})
    r(
        b"NSSegmentedControl",
        b"segmentedControlWithImages:trackingMode:target:action:",
        {"arguments": {5: {"sel_of_type": b"v@:@"}}},
    )
    r(
        b"NSSegmentedControl",
        b"segmentedControlWithLabels:trackingMode:target:action:",
        {"arguments": {5: {"sel_of_type": b"v@:@"}}},
    )
    r(b"NSSegmentedControl", b"selectSegmentWithTag:", {"retval": {"type": "Z"}})
    r(
        b"NSSegmentedControl",
        b"setEnabled:forSegment:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(
        b"NSSegmentedControl",
        b"setSelected:forSegment:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(
        b"NSSegmentedControl",
        b"setShowsMenuIndicator:forSegment:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(b"NSSegmentedControl", b"setSpringLoaded:", {"arguments": {2: {"type": b"Z"}}})
    r(
        b"NSSegmentedControl",
        b"showsMenuIndicatorForSegment:",
        {"retval": {"type": "Z"}},
    )
    r(
        b"NSSet",
        b"enumerateIndexPathsWithOptions:usingBlock:",
        {
            "arguments": {
                3: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {
                            0: {"type": b"^v"},
                            1: {"type": b"@"},
                            2: {"type": b"o^Z"},
                        },
                    }
                }
            }
        },
    )
    r(b"NSShadow", b"setShadowOffset:", {"arguments": {2: {"type": "{CGSize=dd}"}}})
    r(b"NSShadow", b"shadowOffset", {"retval": {"type": "{CGSize=dd}"}})
    r(b"NSSharingService", b"canPerformWithItems:", {"retval": {"type": b"Z"}})
    r(
        b"NSSharingService",
        b"initWithTitle:image:alternateImage:handler:",
        {
            "arguments": {
                5: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {0: {"type": b"^v"}},
                    }
                }
            }
        },
    )
    r(b"NSSharingServicePickerTouchBarItem", b"isEnabled", {"retval": {"type": "Z"}})
    r(
        b"NSSharingServicePickerTouchBarItem",
        b"setEnabled:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(
        b"NSSimpleHorizontalTypesetter",
        b"growGlyphCaches:fillGlyphInfo:",
        {"arguments": {3: {"type": "Z"}}},
    )
    r(
        b"NSSimpleHorizontalTypesetter",
        b"layoutControlGlyphForLineFragment:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSSimpleHorizontalTypesetter",
        b"layoutGlyphsInHorizontalLineFragment:baseline:",
        {"arguments": {2: {"type_modifier": b"N"}, 3: {"type_modifier": b"N"}}},
    )
    r(
        b"NSSimpleHorizontalTypesetter",
        b"layoutGlyphsInLayoutManager:startingAtGlyphIndex:maxNumberOfLineFragments:nextGlyphIndex:",
        {"arguments": {5: {"type_modifier": b"o"}}},
    )
    r(
        b"NSSimpleHorizontalTypesetter",
        b"typesetterLaidOneGlyph:",
        {"arguments": {2: {"type_modifier": b"N"}}},
    )
    r(
        b"NSSimpleHorizontalTypesetter",
        b"willSetLineFragmentRect:forGlyphRange:usedRect:",
        {
            "arguments": {
                2: {"type": "^{CGRect={CGPoint=dd}{CGSize=dd}}", "type_modifier": b"N"},
                3: {"type": "{_NSRange=QQ}"},
                4: {"type": "^{CGRect={CGPoint=dd}{CGSize=dd}}", "type_modifier": b"N"},
            }
        },
    )
    r(b"NSSlider", b"acceptsFirstMouse:", {"retval": {"type": "Z"}})
    r(b"NSSlider", b"allowsTickMarkValuesOnly", {"retval": {"type": "Z"}})
    r(
        b"NSSlider",
        b"indexOfTickMarkAtPoint:",
        {"arguments": {2: {"type": "{CGPoint=dd}"}}},
    )
    r(b"NSSlider", b"isVertical", {"retval": {"type": "Z"}})
    r(
        b"NSSlider",
        b"rectOfTickMarkAtIndex:",
        {"retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
    )
    r(b"NSSlider", b"setAllowsTickMarkValuesOnly:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSSlider", b"setVertical:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSSlider",
        b"sliderWithValue:minValue:maxValue:target:action:",
        {"arguments": {6: {"sel_of_type": b"v@:@"}}},
    )
    r(b"NSSliderAccessory", b"isEnabled", {"retval": {"type": "Z"}})
    r(b"NSSliderAccessory", b"setEnabled:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSSliderAccessoryBehavior",
        b"behaviorWithHandler:",
        {
            "arguments": {
                2: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {0: {"type": b"^v"}, 1: {"type": b"@"}},
                    }
                }
            }
        },
    )
    r(b"NSSliderCell", b"allowsTickMarkValuesOnly", {"retval": {"type": "Z"}})
    r(b"NSSliderCell", b"barRectFlipped:", {"arguments": {2: {"type": b"Z"}}})
    r(
        b"NSSliderCell",
        b"drawBarInside:flipped:",
        {
            "arguments": {
                2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                3: {"type": "Z"},
            }
        },
    )
    r(
        b"NSSliderCell",
        b"drawKnob:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSSliderCell",
        b"indexOfTickMarkAtPoint:",
        {"arguments": {2: {"type": "{CGPoint=dd}"}}},
    )
    r(b"NSSliderCell", b"isVertical", {"retval": {"type": "Z"}})
    r(
        b"NSSliderCell",
        b"knobRectFlipped:",
        {
            "retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            "arguments": {2: {"type": "Z"}},
        },
    )
    r(b"NSSliderCell", b"prefersTrackingUntilMouseUp", {"retval": {"type": "Z"}})
    r(
        b"NSSliderCell",
        b"rectOfTickMarkAtIndex:",
        {
            "retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            "arguments": {2: {"type": "q"}},
        },
    )
    r(
        b"NSSliderCell",
        b"setAllowsTickMarkValuesOnly:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(b"NSSliderCell", b"setVertical:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSSliderCell",
        b"trackRect",
        {"retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
    )
    r(
        b"NSSound",
        b"canInitWithPasteboard:",
        {"retval": {"type": "Z"}, "arguments": {2: {"type": "@"}}},
    )
    r(
        b"NSSound",
        b"initWithContentsOfFile:byReference:",
        {"arguments": {3: {"type": "Z"}}},
    )
    r(
        b"NSSound",
        b"initWithContentsOfURL:byReference:",
        {"arguments": {3: {"type": "Z"}}},
    )
    r(b"NSSound", b"isPlaying", {"retval": {"type": "Z"}})
    r(b"NSSound", b"loops", {"retval": {"type": "Z"}})
    r(b"NSSound", b"name", {"retval": {"type": "@"}})
    r(b"NSSound", b"pause", {"retval": {"type": "Z"}})
    r(b"NSSound", b"play", {"retval": {"type": "Z"}})
    r(b"NSSound", b"resume", {"retval": {"type": "Z"}})
    r(b"NSSound", b"setLoops:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSSound", b"setName:", {"retval": {"type": "Z"}})
    r(b"NSSound", b"stop", {"retval": {"type": "Z"}})
    r(b"NSSpeechRecognizer", b"blocksOtherRecognizers", {"retval": {"type": "Z"}})
    r(b"NSSpeechRecognizer", b"listensInForegroundOnly", {"retval": {"type": "Z"}})
    r(
        b"NSSpeechRecognizer",
        b"setBlocksOtherRecognizers:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(
        b"NSSpeechRecognizer",
        b"setListensInForegroundOnly:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(b"NSSpeechSynthesizer", b"isAnyApplicationSpeaking", {"retval": {"type": b"Z"}})
    r(b"NSSpeechSynthesizer", b"isSpeaking", {"retval": {"type": "Z"}})
    r(
        b"NSSpeechSynthesizer",
        b"objectForProperty:error:",
        {"arguments": {3: {"type_modifier": b"o"}}},
    )
    r(
        b"NSSpeechSynthesizer",
        b"setObject:forProperty:error:",
        {"retval": {"type": "Z"}, "arguments": {4: {"type_modifier": b"o"}}},
    )
    r(
        b"NSSpeechSynthesizer",
        b"setUsesFeedbackWindow:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(b"NSSpeechSynthesizer", b"setVoice:", {"retval": {"type": "Z"}})
    r(b"NSSpeechSynthesizer", b"startSpeakingString:", {"retval": {"type": "Z"}})
    r(b"NSSpeechSynthesizer", b"startSpeakingString:toURL:", {"retval": {"type": "Z"}})
    r(b"NSSpeechSynthesizer", b"usesFeedbackWindow", {"retval": {"type": "Z"}})
    r(b"NSSpeechSynthesizer", b"voice", {"retval": {"type": "@"}})
    r(b"NSSpellChecker", b"automaticallyIdentifiesLanguages", {"retval": {"type": "Z"}})
    r(
        b"NSSpellChecker",
        b"checkGrammarOfString:startingAt:language:wrap:inSpellDocumentWithTag:details:",
        {
            "retval": {"type": "{_NSRange=QQ}"},
            "arguments": {5: {"type": "Z"}, 7: {"type_modifier": b"o"}},
        },
    )
    r(
        b"NSSpellChecker",
        b"checkSpellingOfString:startingAt:",
        {"retval": {"type": "{_NSRange=QQ}"}},
    )
    r(
        b"NSSpellChecker",
        b"checkSpellingOfString:startingAt:language:wrap:inSpellDocumentWithTag:wordCount:",
        {
            "retval": {"type": "{_NSRange=QQ}"},
            "arguments": {5: {"type": "Z"}, 7: {"type_modifier": b"o"}},
        },
    )
    r(
        b"NSSpellChecker",
        b"checkString:range:types:options:inSpellDocumentWithTag:orthography:wordCount:",
        {
            "arguments": {
                3: {"type": "{_NSRange=QQ}"},
                7: {"type_modifier": b"o"},
                8: {"type_modifier": b"o"},
            }
        },
    )
    r(
        b"NSSpellChecker",
        b"completionsForPartialWordRange:inString:language:inSpellDocumentWithTag:",
        {"arguments": {2: {"type": "{_NSRange=QQ}"}}},
    )
    r(
        b"NSSpellChecker",
        b"deletesAutospaceBetweenString:andString:language:",
        {"retval": {"type": "Z"}},
    )
    r(b"NSSpellChecker", b"hasLearnedWord:", {"retval": {"type": "Z"}})
    r(b"NSSpellChecker", b"isAutomaticCapitalizationEnabled", {"retval": {"type": "Z"}})
    r(
        b"NSSpellChecker",
        b"isAutomaticDashSubstitutionEnabled",
        {"retval": {"type": b"Z"}},
    )
    r(
        b"NSSpellChecker",
        b"isAutomaticInlinePredictionEnabled",
        {"retval": {"type": b"Z"}},
    )
    r(
        b"NSSpellChecker",
        b"isAutomaticPeriodSubstitutionEnabled",
        {"retval": {"type": "Z"}},
    )
    r(
        b"NSSpellChecker",
        b"isAutomaticQuoteSubstitutionEnabled",
        {"retval": {"type": b"Z"}},
    )
    r(
        b"NSSpellChecker",
        b"isAutomaticSpellingCorrectionEnabled",
        {"retval": {"type": b"Z"}},
    )
    r(
        b"NSSpellChecker",
        b"isAutomaticTextCompletionEnabled",
        {"retval": {"type": b"Z"}},
    )
    r(
        b"NSSpellChecker",
        b"isAutomaticTextReplacementEnabled",
        {"retval": {"type": b"Z"}},
    )
    r(
        b"NSSpellChecker",
        b"preventsAutocorrectionBeforeString:language:",
        {"retval": {"type": "Z"}},
    )
    r(
        b"NSSpellChecker",
        b"requestCandidatesForSelectedRange:inString:types:options:inSpellDocumentWithTag:completionHandler:",
        {
            "arguments": {
                7: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {
                            0: {"type": b"^v"},
                            1: {"type": b"q"},
                            2: {"type": b"@"},
                        },
                    }
                }
            }
        },
    )
    r(
        b"NSSpellChecker",
        b"requestCheckingOfString:range:types:options:inSpellDocumentWithTag:completionHandler:",
        {
            "arguments": {
                3: {"type": "{_NSRange=QQ}"},
                7: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {
                            0: {"type": b"^v"},
                            1: {"type": b"q"},
                            2: {"type": b"@"},
                            3: {"type": b"@"},
                            4: {"type": b"q"},
                        },
                    }
                },
            }
        },
    )
    r(
        b"NSSpellChecker",
        b"setAutomaticallyIdentifiesLanguages:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(b"NSSpellChecker", b"setLanguage:", {"retval": {"type": "Z"}})
    r(b"NSSpellChecker", b"sharedSpellCheckerExists", {"retval": {"type": b"Z"}})
    r(
        b"NSSpellChecker",
        b"showCorrectionIndicatorOfType:primaryString:alternativeStrings:forStringInRect:view:completionHandler:",
        {
            "arguments": {
                7: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {0: {"type": b"^v"}, 1: {"type": b"@"}},
                    }
                }
            }
        },
    )
    r(b"NSSpellChecker", b"unlearnWord:", {"arguments": {2: {"type": "@"}}})
    r(b"NSSplitView", b"arrangesAllSubviews", {"retval": {"type": "Z"}})
    r(
        b"NSSplitView",
        b"drawDividerInRect:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(b"NSSplitView", b"isPaneSplitter", {"retval": {"type": "Z"}})
    r(b"NSSplitView", b"isSpringLoaded", {"retval": {"type": "Z"}})
    r(b"NSSplitView", b"isSubviewCollapsed:", {"retval": {"type": "Z"}})
    r(b"NSSplitView", b"isVertical", {"retval": {"type": "Z"}})
    r(b"NSSplitView", b"setArrangesAllSubviews:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSSplitView", b"setIsPaneSplitter:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSSplitView", b"setVertical:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSSplitViewController",
        b"splitView:canCollapseSubview:",
        {"retval": {"type": b"Z"}},
    )
    r(
        b"NSSplitViewController",
        b"splitView:shouldCollapseSubview:forDoubleClickOnDividerAtIndex:",
        {"retval": {"type": b"Z"}},
    )
    r(
        b"NSSplitViewController",
        b"splitView:shouldHideDividerAtIndex:",
        {"retval": {"type": b"Z"}},
    )
    r(
        b"NSSplitViewController",
        b"validateUserInterfaceItem:",
        {"retval": {"type": "Z"}},
    )
    r(b"NSSplitViewItem", b"allowsFullHeightLayout", {"retval": {"type": b"Z"}})
    r(b"NSSplitViewItem", b"canCollapse", {"retval": {"type": b"Z"}})
    r(b"NSSplitViewItem", b"canCollapseFromWindowResize", {"retval": {"type": b"Z"}})
    r(b"NSSplitViewItem", b"isCollapsed", {"retval": {"type": b"Z"}})
    r(b"NSSplitViewItem", b"isSpringLoaded", {"retval": {"type": "Z"}})
    r(
        b"NSSplitViewItem",
        b"setAllowsFullHeightLayout:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(b"NSSplitViewItem", b"setCanCollapse:", {"arguments": {2: {"type": b"Z"}}})
    r(
        b"NSSplitViewItem",
        b"setCanCollapseFromWindowResize:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(b"NSSplitViewItem", b"setCollapsed:", {"arguments": {2: {"type": b"Z"}}})
    r(b"NSSplitViewItem", b"setSpringLoaded:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSStackView", b"detachesHiddenViews", {"retval": {"type": "Z"}})
    r(b"NSStackView", b"hasEqualSpacing", {"retval": {"type": b"Z"}})
    r(b"NSStackView", b"setDetachesHiddenViews:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSStackView", b"setHasEqualSpacing:", {"arguments": {2: {"type": b"Z"}}})
    r(b"NSStatusBar", b"isVertical", {"retval": {"type": "Z"}})
    r(b"NSStatusBarButton", b"appearsDisabled", {"retval": {"type": b"Z"}})
    r(b"NSStatusBarButton", b"setAppearsDisabled:", {"arguments": {2: {"type": b"Z"}}})
    r(
        b"NSStatusItem",
        b"drawStatusBarBackgroundInRect:withHighlight:",
        {
            "arguments": {
                2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                3: {"type": "Z"},
            }
        },
    )
    r(b"NSStatusItem", b"highlightMode", {"retval": {"type": "Z"}})
    r(b"NSStatusItem", b"isEnabled", {"retval": {"type": "Z"}})
    r(b"NSStatusItem", b"isVisible", {"retval": {"type": "Z"}})
    r(b"NSStatusItem", b"setAction:", {"arguments": {2: {"sel_of_type": b"v@:@"}}})
    r(
        b"NSStatusItem",
        b"setDoubleAction:",
        {"arguments": {2: {"sel_of_type": b"v@:@"}}},
    )
    r(b"NSStatusItem", b"setEnabled:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSStatusItem", b"setHighlightMode:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSStatusItem", b"setVisible:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSStepper", b"autorepeat", {"retval": {"type": "Z"}})
    r(b"NSStepper", b"setAutorepeat:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSStepper", b"setValueWraps:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSStepper", b"valueWraps", {"retval": {"type": "Z"}})
    r(b"NSStepperCell", b"autorepeat", {"retval": {"type": "Z"}})
    r(b"NSStepperCell", b"setAutorepeat:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSStepperCell", b"setValueWraps:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSStepperCell", b"valueWraps", {"retval": {"type": "Z"}})
    r(
        b"NSStepperTouchBarItem",
        b"stepperTouchBarItemWithIdentifier:drawingHandler:",
        {
            "arguments": {
                3: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {
                            0: {"type": b"^v"},
                            1: {"type": b"{CGRect={CGPoint=dd}{CGSize=dd}}"},
                            2: {"type": b"d"},
                        },
                    }
                }
            }
        },
    )
    r(
        b"NSStoryboard",
        b"instantiateControllerWithIdentifier:creator:",
        {
            "arguments": {
                3: {
                    "callable": {
                        "retval": {"type": b"@"},
                        "arguments": {0: {"type": b"^v"}, 1: {"type": b"@"}},
                    }
                }
            }
        },
    )
    r(
        b"NSStoryboard",
        b"instantiateInitialControllerWithCreator:",
        {
            "arguments": {
                2: {
                    "callable": {
                        "retval": {"type": b"@"},
                        "arguments": {0: {"type": b"^v"}, 1: {"type": b"@"}},
                    }
                }
            }
        },
    )
    r(
        b"NSStoryboardSegue",
        b"initWithIdentifier:source:destination:performHandler:",
        {
            "arguments": {
                5: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {0: {"type": b"^v"}},
                    }
                }
            }
        },
    )
    r(
        b"NSStoryboardSegue",
        b"performHandler",
        {
            "retval": {
                "callable": {
                    "retval": {"type": b"v"},
                    "arguments": {0: {"type": b"^v"}},
                }
            }
        },
    )
    r(
        b"NSStoryboardSegue",
        b"segueWithIdentifier:source:destination:performHandler:",
        {
            "arguments": {
                5: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {0: {"type": b"^v"}},
                    }
                }
            }
        },
    )
    r(
        b"NSStoryboardSegue",
        b"setPerformHandler:",
        {
            "arguments": {
                2: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {0: {"type": b"^v"}},
                    }
                }
            }
        },
    )
    r(
        b"NSString",
        b"boundingRectWithSize:options:attributes:",
        {
            "retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            "arguments": {2: {"type": "{CGSize=dd}"}},
        },
    )
    r(
        b"NSString",
        b"drawAtPoint:withAttributes:",
        {"arguments": {2: {"type": "{CGPoint=dd}"}}},
    )
    r(
        b"NSString",
        b"drawInRect:withAttributes:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSString",
        b"drawWithRect:options:attributes:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(b"NSString", b"sizeWithAttributes:", {"retval": {"type": "{CGSize=dd}"}})
    r(b"NSTabView", b"allowsTruncatedLabels", {"retval": {"type": "Z"}})
    r(
        b"NSTabView",
        b"contentRect",
        {"retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
    )
    r(b"NSTabView", b"drawsBackground", {"retval": {"type": "Z"}})
    r(b"NSTabView", b"minimumSize", {"retval": {"type": "{CGSize=dd}"}})
    r(b"NSTabView", b"setAllowsTruncatedLabels:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSTabView", b"setDrawsBackground:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSTabView",
        b"tabViewItemAtPoint:",
        {"arguments": {2: {"type": "{CGPoint=dd}"}}},
    )
    r(
        b"NSTabViewController",
        b"canPropagateSelectedChildViewControllerTitle",
        {"retval": {"type": b"Z"}},
    )
    r(
        b"NSTabViewController",
        b"setCanPropagateSelectedChildViewControllerTitle:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(
        b"NSTabViewController",
        b"tabView:shouldSelectTabViewItem:",
        {"retval": {"type": b"Z"}},
    )
    r(
        b"NSTabViewController",
        b"toolbar:itemForItemIdentifier:willBeInsertedIntoToolbar:",
        {"arguments": {4: {"type": b"Z"}}},
    )
    r(
        b"NSTabViewItem",
        b"drawLabel:inRect:",
        {
            "arguments": {
                2: {"type": "Z"},
                3: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            }
        },
    )
    r(
        b"NSTabViewItem",
        b"sizeOfLabel:",
        {"retval": {"type": "{CGSize=dd}"}, "arguments": {2: {"type": "Z"}}},
    )
    r(b"NSTableColumn", b"isEditable", {"retval": {"type": "Z"}})
    r(b"NSTableColumn", b"isHidden", {"retval": {"type": "Z"}})
    r(b"NSTableColumn", b"isResizable", {"retval": {"type": "Z"}})
    r(b"NSTableColumn", b"setEditable:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSTableColumn", b"setHidden:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSTableColumn", b"setResizable:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSTableHeaderCell",
        b"drawSortIndicatorWithFrame:inView:ascending:priority:",
        {
            "arguments": {
                2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                4: {"type": "Z"},
            }
        },
    )
    r(
        b"NSTableHeaderCell",
        b"sortIndicatorRectForBounds:",
        {
            "retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            "arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
        },
    )
    r(
        b"NSTableHeaderView",
        b"columnAtPoint:",
        {"arguments": {2: {"type": "{CGPoint=dd}"}}},
    )
    r(
        b"NSTableHeaderView",
        b"headerRectOfColumn:",
        {"retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
    )
    r(b"NSTableRowView", b"isEmphasized", {"retval": {"type": b"Z"}})
    r(b"NSTableRowView", b"isFloating", {"retval": {"type": b"Z"}})
    r(b"NSTableRowView", b"isGroupRowStyle", {"retval": {"type": b"Z"}})
    r(b"NSTableRowView", b"isNextRowSelected", {"retval": {"type": b"Z"}})
    r(b"NSTableRowView", b"isPreviousRowSelected", {"retval": {"type": b"Z"}})
    r(b"NSTableRowView", b"isSelected", {"retval": {"type": b"Z"}})
    r(b"NSTableRowView", b"isTargetForDropOperation", {"retval": {"type": b"Z"}})
    r(b"NSTableRowView", b"setEmphasized:", {"arguments": {2: {"type": b"Z"}}})
    r(b"NSTableRowView", b"setFloating:", {"arguments": {2: {"type": b"Z"}}})
    r(b"NSTableRowView", b"setGroupRowStyle:", {"arguments": {2: {"type": b"Z"}}})
    r(b"NSTableRowView", b"setNextRowSelected:", {"arguments": {2: {"type": b"Z"}}})
    r(b"NSTableRowView", b"setPreviousRowSelected:", {"arguments": {2: {"type": b"Z"}}})
    r(b"NSTableRowView", b"setSelected:", {"arguments": {2: {"type": b"Z"}}})
    r(
        b"NSTableRowView",
        b"setTargetForDropOperation:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(b"NSTableView", b"allowsColumnReordering", {"retval": {"type": "Z"}})
    r(b"NSTableView", b"allowsColumnResizing", {"retval": {"type": "Z"}})
    r(b"NSTableView", b"allowsColumnSelection", {"retval": {"type": "Z"}})
    r(b"NSTableView", b"allowsEmptySelection", {"retval": {"type": "Z"}})
    r(b"NSTableView", b"allowsMultipleSelection", {"retval": {"type": "Z"}})
    r(b"NSTableView", b"allowsTypeSelect", {"retval": {"type": "Z"}})
    r(b"NSTableView", b"autoresizesAllColumnsToFit", {"retval": {"type": "Z"}})
    r(b"NSTableView", b"autosaveTableColumns", {"retval": {"type": "Z"}})
    r(
        b"NSTableView",
        b"canDragRowsWithIndexes:atPoint:",
        {"retval": {"type": "Z"}, "arguments": {3: {"type": "{CGPoint=dd}"}}},
    )
    r(b"NSTableView", b"columnAtPoint:", {"arguments": {2: {"type": "{CGPoint=dd}"}}})
    r(
        b"NSTableView",
        b"columnIndexesInRect:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSTableView",
        b"columnsInRect:",
        {
            "retval": {"type": "{_NSRange=QQ}"},
            "arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
        },
    )
    r(
        b"NSTableView",
        b"dragImageForRows:event:dragImageOffset:",
        {"arguments": {4: {"type_modifier": b"N"}}},
    )
    r(
        b"NSTableView",
        b"dragImageForRowsWithIndexes:tableColumns:event:offset:",
        {"arguments": {5: {"type_modifier": b"N"}}},
    )
    r(
        b"NSTableView",
        b"drawBackgroundInClipRect:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSTableView",
        b"drawGridInClipRect:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSTableView",
        b"drawRow:clipRect:",
        {"arguments": {3: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(b"NSTableView", b"drawsGrid", {"retval": {"type": "Z"}})
    r(
        b"NSTableView",
        b"editColumn:row:withEvent:select:",
        {"arguments": {5: {"type": "Z"}}},
    )
    r(
        b"NSTableView",
        b"enumerateAvailableRowViewsUsingBlock:",
        {
            "arguments": {
                2: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {
                            0: {"type": b"^v"},
                            1: {"type": b"@"},
                            2: {"type": b"q"},
                        },
                    }
                }
            }
        },
    )
    r(b"NSTableView", b"floatsGroupRows", {"retval": {"type": b"Z"}})
    r(
        b"NSTableView",
        b"frameOfCellAtColumn:row:",
        {"retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
    )
    r(
        b"NSTableView",
        b"highlightSelectionInClipRect:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(b"NSTableView", b"intercellSpacing", {"retval": {"type": "{CGSize=dd}"}})
    r(b"NSTableView", b"isColumnSelected:", {"retval": {"type": "Z"}})
    r(b"NSTableView", b"isRowSelected:", {"retval": {"type": "Z"}})
    r(
        b"NSTableView",
        b"rectOfColumn:",
        {"retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
    )
    r(
        b"NSTableView",
        b"rectOfRow:",
        {"retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
    )
    r(b"NSTableView", b"rowActionsVisible", {"retval": {"type": "Z"}})
    r(b"NSTableView", b"rowAtPoint:", {"arguments": {2: {"type": "{CGPoint=dd}"}}})
    r(
        b"NSTableView",
        b"rowViewAtRow:makeIfNecessary:",
        {"arguments": {3: {"type": b"Z"}}},
    )
    r(
        b"NSTableView",
        b"rowsInRect:",
        {
            "retval": {"type": "{_NSRange=QQ}"},
            "arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
        },
    )
    r(
        b"NSTableView",
        b"selectColumn:byExtendingSelection:",
        {"arguments": {3: {"type": "Z"}}},
    )
    r(
        b"NSTableView",
        b"selectColumnIndexes:byExtendingSelection:",
        {"arguments": {3: {"type": "Z"}}},
    )
    r(
        b"NSTableView",
        b"selectRow:byExtendingSelection:",
        {"arguments": {3: {"type": "Z"}}},
    )
    r(
        b"NSTableView",
        b"selectRowIndexes:byExtendingSelection:",
        {"arguments": {3: {"type": "Z"}}},
    )
    r(b"NSTableView", b"setAllowsColumnReordering:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSTableView", b"setAllowsColumnResizing:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSTableView", b"setAllowsColumnSelection:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSTableView", b"setAllowsEmptySelection:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSTableView", b"setAllowsMultipleSelection:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSTableView", b"setAllowsTypeSelect:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSTableView",
        b"setAutoresizesAllColumnsToFit:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(b"NSTableView", b"setAutosaveTableColumns:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSTableView", b"setDoubleAction:", {"arguments": {2: {"sel_of_type": b"v@:@"}}})
    r(
        b"NSTableView",
        b"setDraggingSourceOperationMask:forLocal:",
        {"arguments": {3: {"type": "Z"}}},
    )
    r(b"NSTableView", b"setDrawsGrid:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSTableView", b"setFloatsGroupRows:", {"arguments": {2: {"type": b"Z"}}})
    r(
        b"NSTableView",
        b"setIntercellSpacing:",
        {"arguments": {2: {"type": "{CGSize=dd}"}}},
    )
    r(b"NSTableView", b"setRowActionsVisible:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSTableView",
        b"setUsesAlternatingRowBackgroundColors:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(b"NSTableView", b"setUsesAutomaticRowHeights:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSTableView", b"setUsesStaticContents:", {"arguments": {2: {"type": b"Z"}}})
    r(
        b"NSTableView",
        b"setVerticalMotionCanBeginDrag:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(b"NSTableView", b"shouldFocusCell:atColumn:row:", {"retval": {"type": "Z"}})
    r(b"NSTableView", b"textShouldBeginEditing:", {"retval": {"type": b"Z"}})
    r(b"NSTableView", b"textShouldEndEditing:", {"retval": {"type": "Z"}})
    r(b"NSTableView", b"usesAlternatingRowBackgroundColors", {"retval": {"type": "Z"}})
    r(b"NSTableView", b"usesAutomaticRowHeights", {"retval": {"type": "Z"}})
    r(b"NSTableView", b"usesStaticContents", {"retval": {"type": b"Z"}})
    r(b"NSTableView", b"verticalMotionCanBeginDrag", {"retval": {"type": "Z"}})
    r(
        b"NSTableView",
        b"viewAtColumn:row:makeIfNecessary:",
        {"arguments": {4: {"type": b"Z"}}},
    )
    r(
        b"NSTableViewDiffableDataSource",
        b"applySnapshot:animatingDifferences:",
        {"arguments": {3: {"type": b"Z"}}},
    )
    r(
        b"NSTableViewDiffableDataSource",
        b"applySnapshot:animatingDifferences:completion:",
        {
            "arguments": {
                3: {"type": b"Z"},
                4: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {0: {"type": b"^v"}},
                    }
                },
            }
        },
    )
    r(
        b"NSTableViewDiffableDataSource",
        b"initWithTableView:cellProvider:",
        {
            "arguments": {
                3: {
                    "callable": {
                        "retval": {"type": b"@"},
                        "arguments": {
                            0: {"type": b"^v"},
                            1: {"type": b"@"},
                            2: {"type": b"@"},
                            3: {"type": b"q"},
                            4: {"type": b"@"},
                        },
                    }
                }
            }
        },
    )
    r(
        b"NSTableViewDiffableDataSource",
        b"rowViewProvider",
        {
            "retval": {
                "callable": {
                    "retval": {"type": b"@"},
                    "arguments": {
                        0: {"type": b"^v"},
                        1: {"type": b"@"},
                        2: {"type": b"q"},
                        3: {"type": b"@"},
                    },
                }
            }
        },
    )
    r(
        b"NSTableViewDiffableDataSource",
        b"sectionHeaderViewProvider",
        {
            "retval": {
                "callable": {
                    "retval": {"type": b"v"},
                    "arguments": {0: {"type": b"^v"}},
                }
            }
        },
    )
    r(
        b"NSTableViewDiffableDataSource",
        b"setRowViewProvider:",
        {
            "arguments": {
                2: {
                    "callable": {
                        "retval": {"type": b"@"},
                        "arguments": {
                            0: {"type": b"^v"},
                            1: {"type": b"@"},
                            2: {"type": b"q"},
                            3: {"type": b"@"},
                        },
                    }
                }
            }
        },
    )
    r(
        b"NSTableViewDiffableDataSource",
        b"setSectionHeaderViewProvider:",
        {
            "arguments": {
                2: {
                    "callable": {
                        "retval": {"type": b"@"},
                        "arguments": {
                            0: {"type": b"^v"},
                            1: {"type": b"@"},
                            2: {"type": b"q"},
                            3: {"type": b"@"},
                        },
                    }
                }
            }
        },
    )
    r(
        b"NSTableViewRowAction",
        b"rowActionWithStyle:title:handler:",
        {
            "arguments": {
                4: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {
                            0: {"type": b"^v"},
                            1: {"type": b"@"},
                            2: {"type": b"q"},
                        },
                    }
                }
            }
        },
    )
    r(b"NSText", b"RTFDFromRange:", {"arguments": {2: {"type": "{_NSRange=QQ}"}}})
    r(b"NSText", b"RTFFromRange:", {"arguments": {2: {"type": "{_NSRange=QQ}"}}})
    r(b"NSText", b"drawsBackground", {"retval": {"type": "Z"}})
    r(b"NSText", b"importsGraphics", {"retval": {"type": "Z"}})
    r(b"NSText", b"isEditable", {"retval": {"type": "Z"}})
    r(b"NSText", b"isFieldEditor", {"retval": {"type": "Z"}})
    r(b"NSText", b"isHorizontallyResizable", {"retval": {"type": "Z"}})
    r(b"NSText", b"isRichText", {"retval": {"type": "Z"}})
    r(b"NSText", b"isRulerVisible", {"retval": {"type": "Z"}})
    r(b"NSText", b"isSelectable", {"retval": {"type": "Z"}})
    r(b"NSText", b"isVerticallyResizable", {"retval": {"type": "Z"}})
    r(b"NSText", b"maxSize", {"retval": {"type": "{CGSize=dd}"}})
    r(b"NSText", b"minSize", {"retval": {"type": "{CGSize=dd}"}})
    r(b"NSText", b"readRTFDFromFile:", {"retval": {"type": "Z"}})
    r(
        b"NSText",
        b"replaceCharactersInRange:withRTF:",
        {"arguments": {2: {"type": "{_NSRange=QQ}"}}},
    )
    r(
        b"NSText",
        b"replaceCharactersInRange:withRTFD:",
        {"arguments": {2: {"type": "{_NSRange=QQ}"}}},
    )
    r(
        b"NSText",
        b"replaceCharactersInRange:withString:",
        {"arguments": {2: {"type": "{_NSRange=QQ}"}}},
    )
    r(
        b"NSText",
        b"scrollRangeToVisible:",
        {"arguments": {2: {"type": "{_NSRange=QQ}"}}},
    )
    r(b"NSText", b"selectedRange", {"retval": {"type": "{_NSRange=QQ}"}})
    r(b"NSText", b"setDrawsBackground:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSText", b"setEditable:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSText", b"setFieldEditor:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSText", b"setFont:range:", {"arguments": {3: {"type": "{_NSRange=QQ}"}}})
    r(b"NSText", b"setHorizontallyResizable:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSText", b"setImportsGraphics:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSText", b"setMaxSize:", {"arguments": {2: {"type": "{CGSize=dd}"}}})
    r(b"NSText", b"setMinSize:", {"arguments": {2: {"type": "{CGSize=dd}"}}})
    r(b"NSText", b"setRichText:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSText", b"setSelectable:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSText", b"setSelectedRange:", {"arguments": {2: {"type": "{_NSRange=QQ}"}}})
    r(b"NSText", b"setTextColor:range:", {"arguments": {3: {"type": "{_NSRange=QQ}"}}})
    r(b"NSText", b"setUsesFontPanel:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSText", b"setVerticallyResizable:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSText", b"usesFontPanel", {"retval": {"type": "Z"}})
    r(
        b"NSText",
        b"writeRTFDToFile:atomically:",
        {"retval": {"type": "Z"}, "arguments": {3: {"type": "Z"}}},
    )
    r(b"NSTextAttachment", b"allowsTextAttachmentView", {"retval": {"type": b"Z"}})
    r(
        b"NSTextAttachment",
        b"setAllowsTextAttachmentView:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(b"NSTextAttachment", b"usesTextAttachmentView", {"retval": {"type": b"Z"}})
    r(
        b"NSTextAttachmentCell",
        b"setWantsToTrackMouse:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(b"NSTextAttachmentCell", b"wantsToTrackMouse", {"retval": {"type": "Z"}})
    r(
        b"NSTextAttachmentViewProvider",
        b"setTracksTextAttachmentViewBounds:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(
        b"NSTextAttachmentViewProvider",
        b"tracksTextAttachmentViewBounds",
        {"retval": {"type": b"Z"}},
    )
    r(
        b"NSTextBlock",
        b"boundsRectForContentRect:inRect:textContainer:characterRange:",
        {
            "retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            "arguments": {
                2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                3: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                5: {"type": "{_NSRange=QQ}"},
            },
        },
    )
    r(
        b"NSTextBlock",
        b"drawBackgroundWithFrame:inView:characterRange:layoutManager:",
        {
            "arguments": {
                2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                4: {"type": "{_NSRange=QQ}"},
            }
        },
    )
    r(
        b"NSTextBlock",
        b"rectForLayoutAtPoint:inRect:textContainer:characterRange:",
        {
            "retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            "arguments": {
                2: {"type": "{CGPoint=dd}"},
                3: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                5: {"type": "{_NSRange=QQ}"},
            },
        },
    )
    r(
        b"NSTextCheckingController",
        b"menuAtIndex:clickedOnSelection:effectiveRange:",
        {"arguments": {3: {"type": b"Z"}}},
    )
    r(b"NSTextContainer", b"containerSize", {"retval": {"type": "{CGSize=dd}"}})
    r(
        b"NSTextContainer",
        b"containsPoint:",
        {"retval": {"type": "Z"}, "arguments": {2: {"type": "{CGPoint=dd}"}}},
    )
    r(b"NSTextContainer", b"heightTracksTextView", {"retval": {"type": "Z"}})
    r(
        b"NSTextContainer",
        b"initWithContainerSize:",
        {"arguments": {2: {"type": "{CGSize=dd}"}}},
    )
    r(
        b"NSTextContainer",
        b"isSimpleRectangularTextContainer",
        {"retval": {"type": "Z"}},
    )
    r(
        b"NSTextContainer",
        b"lineFragmentRectForProposedRect:atIndex:writingDirection:remainingRect",
        {"arguments": {5: {"type_modifier": b"o"}}},
    )
    r(
        b"NSTextContainer",
        b"lineFragmentRectForProposedRect:atIndex:writingDirection:remainingRect:",
        {"arguments": {5: {"type_modifier": b"o"}}},
    )
    r(
        b"NSTextContainer",
        b"lineFragmentRectForProposedRect:sweepDirection:movementDirection:remainingRect:",
        {
            "retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            "arguments": {
                2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                5: {"type_modifier": b"o"},
            },
        },
    )
    r(
        b"NSTextContainer",
        b"setContainerSize:",
        {"arguments": {2: {"type": "{CGSize=dd}"}}},
    )
    r(
        b"NSTextContainer",
        b"setHeightTracksTextView:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(b"NSTextContainer", b"setWidthTracksTextView:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSTextContainer", b"widthTracksTextView", {"retval": {"type": "Z"}})
    r(
        b"NSTextContentManager",
        b"automaticallySynchronizesTextLayoutManagers",
        {"retval": {"type": b"Z"}},
    )
    r(
        b"NSTextContentManager",
        b"automaticallySynchronizesToBackingStore",
        {"retval": {"type": b"Z"}},
    )
    r(b"NSTextContentManager", b"hasEditingTransaction", {"retval": {"type": b"Z"}})
    r(
        b"NSTextContentManager",
        b"performEditingTransactionUsingBlock:",
        {
            "arguments": {
                2: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {0: {"type": b"^v"}},
                    }
                }
            }
        },
    )
    r(
        b"NSTextContentManager",
        b"setAutomaticallySynchronizesTextLayoutManagers:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(
        b"NSTextContentManager",
        b"setAutomaticallySynchronizesToBackingStore:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(
        b"NSTextContentManager",
        b"synchronizeTextLayoutManagers:",
        {
            "arguments": {
                2: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {0: {"type": b"^v"}, 1: {"type": b"@"}},
                    }
                }
            }
        },
    )
    r(
        b"NSTextContentStorage",
        b"adjustedRangeFromRange:forEditingTextSelection:",
        {"arguments": {3: {"type": b"Z"}}},
    )
    r(b"NSTextElement", b"isRepresentedElement", {"retval": {"type": b"Z"}})
    r(b"NSTextField", b"acceptsFirstResponder", {"retval": {"type": "Z"}})
    r(b"NSTextField", b"allowsCharacterPickerTouchBarItem", {"retval": {"type": "Z"}})
    r(
        b"NSTextField",
        b"allowsDefaultTighteningForTruncation",
        {"retval": {"type": "Z"}},
    )
    r(b"NSTextField", b"allowsEditingTextAttributes", {"retval": {"type": "Z"}})
    r(b"NSTextField", b"drawsBackground", {"retval": {"type": "Z"}})
    r(b"NSTextField", b"importsGraphics", {"retval": {"type": "Z"}})
    r(b"NSTextField", b"isAutomaticTextCompletionEnabled", {"retval": {"type": "Z"}})
    r(b"NSTextField", b"isBezeled", {"retval": {"type": "Z"}})
    r(b"NSTextField", b"isBordered", {"retval": {"type": "Z"}})
    r(b"NSTextField", b"isEditable", {"retval": {"type": "Z"}})
    r(b"NSTextField", b"isSelectable", {"retval": {"type": "Z"}})
    r(
        b"NSTextField",
        b"setAllowsCharacterPickerTouchBarItem:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(
        b"NSTextField",
        b"setAllowsDefaultTighteningForTruncation:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(
        b"NSTextField",
        b"setAllowsEditingTextAttributes:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(
        b"NSTextField",
        b"setAutomaticTextCompletionEnabled:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(b"NSTextField", b"setBezeled:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSTextField", b"setBordered:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSTextField", b"setDrawsBackground:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSTextField", b"setEditable:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSTextField", b"setImportsGraphics:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSTextField", b"setSelectable:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSTextField", b"setTextColor:", {"arguments": {2: {"type": "@"}}})
    r(b"NSTextField", b"textShouldBeginEditing:", {"retval": {"type": "Z"}})
    r(b"NSTextField", b"textShouldEndEditing:", {"retval": {"type": "Z"}})
    r(b"NSTextFieldCell", b"drawsBackground", {"retval": {"type": "Z"}})
    r(b"NSTextFieldCell", b"setDrawsBackground:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSTextFieldCell",
        b"setWantsNotificationForMarkedText:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(b"NSTextFinder", b"findIndicatorNeedsUpdate", {"retval": {"type": b"Z"}})
    r(
        b"NSTextFinder",
        b"incrementalSearchingShouldDimContentView",
        {"retval": {"type": b"Z"}},
    )
    r(b"NSTextFinder", b"isIncrementalSearchingEnabled", {"retval": {"type": b"Z"}})
    r(
        b"NSTextFinder",
        b"setFindIndicatorNeedsUpdate:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(
        b"NSTextFinder",
        b"setIncrementalSearchingEnabled:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(
        b"NSTextFinder",
        b"setIncrementalSearchingShouldDimContentView:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(b"NSTextFinder", b"validateAction:", {"retval": {"type": b"Z"}})
    r(b"NSTextInputContext", b"acceptsGlyphInfo", {"retval": {"type": "Z"}})
    r(b"NSTextInputContext", b"handleEvent:", {"retval": {"type": "Z"}})
    r(b"NSTextInputContext", b"setAcceptsGlyphInfo:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSTextInsertionIndicator",
        b"effectsViewInserter",
        {
            "retval": {
                "callable": {
                    "retval": {"type": b"v"},
                    "arguments": {0: {"type": b"^v"}, 1: {"type": b"@"}},
                }
            }
        },
    )
    r(
        b"NSTextInsertionIndicator",
        b"setEffectsViewInserter:",
        {
            "arguments": {
                2: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {0: {"type": b"^v"}, 1: {"type": b"@"}},
                    }
                }
            }
        },
    )
    r(
        b"NSTextLayoutFragment",
        b"textLineFragmentForTextLocation:isUpstreamAffinity:",
        {"arguments": {3: {"type": b"Z"}}},
    )
    r(
        b"NSTextLayoutFragment",
        b"textLineFragmentForVerticalOffset:requiresExactMatch:",
        {"arguments": {3: {"type": b"Z"}}},
    )
    r(
        b"NSTextLayoutManager",
        b"enumerateRenderingAttributesFromLocation:reverse:usingBlock:",
        {
            "arguments": {
                3: {"type": b"Z"},
                4: {
                    "callable": {
                        "retval": {"type": b"Z"},
                        "arguments": {
                            0: {"type": b"^v"},
                            1: {"type": b"@"},
                            2: {"type": b"@"},
                            3: {"type": b"@"},
                        },
                    }
                },
            }
        },
    )
    r(
        b"NSTextLayoutManager",
        b"enumerateTextLayoutFragmentsFromLocation:options:usingBlock:",
        {
            "arguments": {
                4: {
                    "callable": {
                        "retval": {"type": b"Z"},
                        "arguments": {0: {"type": b"^v"}, 1: {"type": b"@"}},
                    }
                }
            }
        },
    )
    r(
        b"NSTextLayoutManager",
        b"enumerateTextSegmentsInRange:type:options:usingBlock:",
        {
            "arguments": {
                5: {
                    "callable": {
                        "retval": {"type": b"Z"},
                        "arguments": {
                            0: {"type": b"^v"},
                            1: {"type": b"@"},
                            2: {"type": b"{CGRect={CGPoint=dd}{CGSize=dd}}"},
                            3: {"type": b"d"},
                            4: {"type": b"@"},
                        },
                    }
                }
            }
        },
    )
    r(
        b"NSTextLayoutManager",
        b"limitsLayoutForSuspiciousContents",
        {"retval": {"type": b"Z"}},
    )
    r(
        b"NSTextLayoutManager",
        b"renderingAttributesValidator",
        {
            "retval": {
                "callable": {
                    "retval": {"type": b"v"},
                    "arguments": {
                        0: {"type": b"^v"},
                        1: {"type": b"@"},
                        2: {"type": b"@"},
                    },
                }
            }
        },
    )
    r(
        b"NSTextLayoutManager",
        b"setLimitsLayoutForSuspiciousContents:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(
        b"NSTextLayoutManager",
        b"setRenderingAttributesValidator:",
        {
            "arguments": {
                2: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {
                            0: {"type": b"^v"},
                            1: {"type": b"@"},
                            2: {"type": b"@"},
                        },
                    }
                }
            }
        },
    )
    r(
        b"NSTextLayoutManager",
        b"setUsesFontLeading:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(
        b"NSTextLayoutManager",
        b"setUsesHyphenation:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(b"NSTextLayoutManager", b"usesFontLeading", {"retval": {"type": b"Z"}})
    r(b"NSTextLayoutManager", b"usesHyphenation", {"retval": {"type": b"Z"}})
    r(b"NSTextList", b"isOrdered", {"retval": {"type": b"Z"}})
    r(b"NSTextRange", b"containsLocation:", {"retval": {"type": b"Z"}})
    r(b"NSTextRange", b"containsRange:", {"retval": {"type": b"Z"}})
    r(b"NSTextRange", b"intersectsWithTextRange:", {"retval": {"type": b"Z"}})
    r(b"NSTextRange", b"isEmpty", {"retval": {"type": b"Z"}})
    r(b"NSTextRange", b"isEqualToTextRange:", {"retval": {"type": b"Z"}})
    r(b"NSTextSelection", b"isLogical", {"retval": {"type": b"Z"}})
    r(b"NSTextSelection", b"isTransient", {"retval": {"type": b"Z"}})
    r(b"NSTextSelection", b"setLogical:", {"arguments": {2: {"type": b"Z"}}})
    r(
        b"NSTextSelectionNavigation",
        b"allowsNonContiguousRanges",
        {"retval": {"type": b"Z"}},
    )
    r(
        b"NSTextSelectionNavigation",
        b"deletionRangesForTextSelection:direction:destination:allowsDecomposition:",
        {"arguments": {5: {"type": b"Z"}}},
    )
    r(
        b"NSTextSelectionNavigation",
        b"destinationSelectionForTextSelection:direction:destination:extending:confined:",
        {"arguments": {5: {"type": b"Z"}, 6: {"type": b"Z"}}},
    )
    r(
        b"NSTextSelectionNavigation",
        b"rotatesCoordinateSystemForLayoutOrientation",
        {"retval": {"type": b"Z"}},
    )
    r(
        b"NSTextSelectionNavigation",
        b"setAllowsNonContiguousRanges:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(
        b"NSTextSelectionNavigation",
        b"setRotatesCoordinateSystemForLayoutOrientation:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(
        b"NSTextSelectionNavigation",
        b"textSelectionsInteractingAtPoint:inContainerAtLocation:anchors:modifiers:selecting:bounds:",
        {"arguments": {6: {"type": b"Z"}}},
    )
    r(
        b"NSTextStorage",
        b"edited:range:changeInLength:",
        {"arguments": {3: {"type": "{_NSRange=QQ}"}}},
    )
    r(b"NSTextStorage", b"editedRange", {"retval": {"type": "{_NSRange=QQ}"}})
    r(
        b"NSTextStorage",
        b"ensureAttributesAreFixedInRange:",
        {"arguments": {2: {"type": "{_NSRange=QQ}"}}},
    )
    r(b"NSTextStorage", b"fixesAttributesLazily", {"retval": {"type": "Z"}})
    r(
        b"NSTextStorage",
        b"invalidateAttributesInRange:",
        {"arguments": {2: {"type": "{_NSRange=QQ}"}}},
    )
    r(
        b"NSTextTable",
        b"boundsRectForBlock:contentRect:inRect:textContainer:characterRange:",
        {
            "retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            "arguments": {
                3: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                4: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                6: {"type": "{_NSRange=QQ}"},
            },
        },
    )
    r(b"NSTextTable", b"collapsesBorders", {"retval": {"type": "Z"}})
    r(
        b"NSTextTable",
        b"drawBackgroundForBlock:withFrame:inView:characterRange:layoutManager:",
        {
            "retval": {"type": "v"},
            "arguments": {
                3: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                5: {"type": "{_NSRange=QQ}"},
            },
        },
    )
    r(b"NSTextTable", b"hidesEmptyCells", {"retval": {"type": "Z"}})
    r(
        b"NSTextTable",
        b"rectForBlock:layoutAtPoint:inRect:textContainer:characterRange:",
        {
            "retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            "arguments": {
                3: {"type": "{CGPoint=dd}"},
                4: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                6: {"type": "{_NSRange=QQ}"},
            },
        },
    )
    r(b"NSTextTable", b"setCollapsesBorders:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSTextTable", b"setHidesEmptyCells:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSTextView", b"acceptsGlyphInfo", {"retval": {"type": "Z"}})
    r(b"NSTextView", b"allowsCharacterPickerTouchBarItem", {"retval": {"type": "Z"}})
    r(b"NSTextView", b"allowsDocumentBackgroundColorChange", {"retval": {"type": "Z"}})
    r(b"NSTextView", b"allowsImageEditing", {"retval": {"type": "Z"}})
    r(b"NSTextView", b"allowsUndo", {"retval": {"type": "Z"}})
    r(
        b"NSTextView",
        b"characterIndexForInsertionAtPoint:",
        {"arguments": {2: {"type": "{CGPoint=dd}"}}},
    )
    r(
        b"NSTextView",
        b"completionsForPartialWordRange:indexOfSelectedItem:",
        {"arguments": {2: {"type": "{_NSRange=QQ}"}, 3: {"type_modifier": b"o"}}},
    )
    r(b"NSTextView", b"displaysLinkToolTips", {"retval": {"type": "Z"}})
    r(
        b"NSTextView",
        b"dragImageForSelectionWithEvent:origin:",
        {"arguments": {3: {"type_modifier": b"o"}}},
    )
    r(
        b"NSTextView",
        b"dragSelectionWithEvent:offset:slideBack:",
        {
            "retval": {"type": "Z"},
            "arguments": {3: {"type": "{CGSize=dd}"}, 4: {"type": "Z"}},
        },
    )
    r(
        b"NSTextView",
        b"drawInsertionPointInRect:color:turnedOn:",
        {
            "arguments": {
                2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                4: {"type": "Z"},
            }
        },
    )
    r(
        b"NSTextView",
        b"drawViewBackgroundInRect:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(b"NSTextView", b"drawsBackground", {"retval": {"type": "Z"}})
    r(b"NSTextView", b"importsGraphics", {"retval": {"type": "Z"}})
    r(b"NSTextView", b"initUsingTextLayoutManager:", {"arguments": {2: {"type": b"Z"}}})
    r(
        b"NSTextView",
        b"initWithFrame:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSTextView",
        b"initWithFrame:textContainer:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSTextView",
        b"insertCompletion:forPartialWordRange:movement:isFinal:",
        {"arguments": {3: {"type": "{_NSRange=QQ}"}, 5: {"type": "Z"}}},
    )
    r(b"NSTextView", b"isAutomaticDashSubstitutionEnabled", {"retval": {"type": "Z"}})
    r(b"NSTextView", b"isAutomaticDataDetectionEnabled", {"retval": {"type": "Z"}})
    r(b"NSTextView", b"isAutomaticLinkDetectionEnabled", {"retval": {"type": "Z"}})
    r(b"NSTextView", b"isAutomaticQuoteSubstitutionEnabled", {"retval": {"type": "Z"}})
    r(b"NSTextView", b"isAutomaticSpellingCorrectionEnabled", {"retval": {"type": "Z"}})
    r(b"NSTextView", b"isAutomaticTextCompletionEnabled", {"retval": {"type": b"Z"}})
    r(b"NSTextView", b"isAutomaticTextReplacementEnabled", {"retval": {"type": "Z"}})
    r(b"NSTextView", b"isCoalescingUndo", {"retval": {"type": "Z"}})
    r(b"NSTextView", b"isContinuousSpellCheckingEnabled", {"retval": {"type": "Z"}})
    r(b"NSTextView", b"isEditable", {"retval": {"type": "Z"}})
    r(b"NSTextView", b"isFieldEditor", {"retval": {"type": "Z"}})
    r(b"NSTextView", b"isGrammarCheckingEnabled", {"retval": {"type": "Z"}})
    r(b"NSTextView", b"isIncrementalSearchingEnabled", {"retval": {"type": b"Z"}})
    r(b"NSTextView", b"isRichText", {"retval": {"type": "Z"}})
    r(b"NSTextView", b"isRulerVisible", {"retval": {"type": "Z"}})
    r(b"NSTextView", b"isSelectable", {"retval": {"type": "Z"}})
    r(
        b"NSTextView",
        b"performValidatedReplacementInRange:withAttributedString:",
        {"retval": {"type": b"Z"}},
    )
    r(
        b"NSTextView",
        b"rangeForUserCharacterAttributeChange",
        {"retval": {"type": "{_NSRange=QQ}"}},
    )
    r(b"NSTextView", b"rangeForUserCompletion", {"retval": {"type": "{_NSRange=QQ}"}})
    r(
        b"NSTextView",
        b"rangeForUserParagraphAttributeChange",
        {"retval": {"type": "{_NSRange=QQ}"}},
    )
    r(b"NSTextView", b"rangeForUserTextChange", {"retval": {"type": "{_NSRange=QQ}"}})
    r(b"NSTextView", b"readSelectionFromPasteboard:", {"retval": {"type": "Z"}})
    r(b"NSTextView", b"readSelectionFromPasteboard:type:", {"retval": {"type": "Z"}})
    r(b"NSTextView", b"rulerView:shouldAddMarker:", {"retval": {"type": "Z"}})
    r(b"NSTextView", b"rulerView:shouldMoveMarker:", {"retval": {"type": "Z"}})
    r(b"NSTextView", b"rulerView:shouldRemoveMarker:", {"retval": {"type": "Z"}})
    r(
        b"NSTextView",
        b"rulerView:willMoveMarker:toLocation:",
        {"retval": {"type": "d"}, "arguments": {4: {"type": "d"}}},
    )
    r(
        b"NSTextView",
        b"selectionRangeForProposedRange:granularity:",
        {
            "retval": {"type": "{_NSRange=QQ}"},
            "arguments": {2: {"type": "{_NSRange=QQ}"}},
        },
    )
    r(b"NSTextView", b"setAcceptsGlyphInfo:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSTextView",
        b"setAlignment:range:",
        {"arguments": {3: {"type": "{_NSRange=QQ}"}}},
    )
    r(
        b"NSTextView",
        b"setAllowsCharacterPickerTouchBarItem:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(
        b"NSTextView",
        b"setAllowsDocumentBackgroundColorChange:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(b"NSTextView", b"setAllowsImageEditing:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSTextView", b"setAllowsUndo:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSTextView",
        b"setAutomaticDashSubstitutionEnabled:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(
        b"NSTextView",
        b"setAutomaticDataDetectionEnabled:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(
        b"NSTextView",
        b"setAutomaticLinkDetectionEnabled:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(
        b"NSTextView",
        b"setAutomaticQuoteSubstitutionEnabled:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(
        b"NSTextView",
        b"setAutomaticSpellingCorrectionEnabled:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(
        b"NSTextView",
        b"setAutomaticTextCompletionEnabled:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(
        b"NSTextView",
        b"setAutomaticTextReplacementEnabled:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(
        b"NSTextView",
        b"setBaseWritingDirection:range:",
        {"arguments": {3: {"type": "{_NSRange=QQ}"}}},
    )
    r(
        b"NSTextView",
        b"setConstrainedFrameSize:",
        {"arguments": {2: {"type": "{CGSize=dd}"}}},
    )
    r(
        b"NSTextView",
        b"setContinuousSpellCheckingEnabled:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(b"NSTextView", b"setDisplaysLinkToolTips:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSTextView", b"setDrawsBackground:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSTextView", b"setEditable:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSTextView", b"setFieldEditor:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSTextView", b"setGrammarCheckingEnabled:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSTextView", b"setImportsGraphics:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSTextView",
        b"setIncrementalSearchingEnabled:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(
        b"NSTextView",
        b"setNeedsDisplayInRect:avoidAdditionalLayout:",
        {
            "arguments": {
                2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                3: {"type": "Z"},
            }
        },
    )
    r(b"NSTextView", b"setRichText:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSTextView", b"setRulerVisible:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSTextView", b"setSelectable:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSTextView",
        b"setSelectedRange:",
        {"arguments": {2: {"type": "{_NSRange=QQ}"}}},
    )
    r(
        b"NSTextView",
        b"setSelectedRange:affinity:stillSelecting:",
        {"arguments": {2: {"type": "{_NSRange=QQ}"}, 4: {"type": "Z"}}},
    )
    r(
        b"NSTextView",
        b"setSelectedRanges:affinity:stillSelecting:",
        {"arguments": {4: {"type": "Z"}}},
    )
    r(b"NSTextView", b"setSmartInsertDeleteEnabled:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSTextView",
        b"setSpellingState:range:",
        {"arguments": {3: {"type": "{_NSRange=QQ}"}}},
    )
    r(
        b"NSTextView",
        b"setTextContainerInset:",
        {"arguments": {2: {"type": "{CGSize=dd}"}}},
    )
    r(
        b"NSTextView",
        b"setUsesAdaptiveColorMappingForDarkAppearance:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(b"NSTextView", b"setUsesFindBar:", {"arguments": {2: {"type": b"Z"}}})
    r(b"NSTextView", b"setUsesFindPanel:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSTextView", b"setUsesFontPanel:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSTextView", b"setUsesInspectorBar:", {"arguments": {2: {"type": b"Z"}}})
    r(
        b"NSTextView",
        b"setUsesRolloverButtonForSelection:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(b"NSTextView", b"setUsesRuler:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSTextView",
        b"shouldChangeTextInRange:replacementString:",
        {"retval": {"type": "Z"}, "arguments": {2: {"type": "{_NSRange=QQ}"}}},
    )
    r(
        b"NSTextView",
        b"shouldChangeTextInRanges:replacementStrings:",
        {"retval": {"type": "Z"}},
    )
    r(b"NSTextView", b"shouldDrawInsertionPoint", {"retval": {"type": "Z"}})
    r(
        b"NSTextView",
        b"showFindIndicatorForRange:",
        {"arguments": {2: {"type": "{_NSRange=QQ}"}}},
    )
    r(
        b"NSTextView",
        b"smartDeleteRangeForProposedRange:",
        {
            "retval": {"type": "{_NSRange=QQ}"},
            "arguments": {2: {"type": "{_NSRange=QQ}"}},
        },
    )
    r(
        b"NSTextView",
        b"smartInsertAfterStringForString:replacingRange:",
        {"arguments": {3: {"type": "{_NSRange=QQ}"}}},
    )
    r(
        b"NSTextView",
        b"smartInsertBeforeStringForString:replacingRange:",
        {"arguments": {3: {"type": "{_NSRange=QQ}"}}},
    )
    r(b"NSTextView", b"smartInsertDeleteEnabled", {"retval": {"type": "Z"}})
    r(
        b"NSTextView",
        b"smartInsertForString:replacingRange:beforeString:afterString:",
        {
            "arguments": {
                3: {"type": "{_NSRange=QQ}"},
                4: {"type_modifier": b"o"},
                5: {"type_modifier": b"o"},
            }
        },
    )
    r(b"NSTextView", b"stronglyReferencesTextStorage", {"retval": {"type": b"Z"}})
    r(b"NSTextView", b"textContainerInset", {"retval": {"type": "{CGSize=dd}"}})
    r(b"NSTextView", b"textContainerOrigin", {"retval": {"type": "{CGPoint=dd}"}})
    r(
        b"NSTextView",
        b"textViewUsingTextLayoutManager:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(
        b"NSTextView",
        b"updateInsertionPointStateAndRestartTimer:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(
        b"NSTextView",
        b"usesAdaptiveColorMappingForDarkAppearance",
        {"retval": {"type": b"Z"}},
    )
    r(b"NSTextView", b"usesFindBar", {"retval": {"type": b"Z"}})
    r(b"NSTextView", b"usesFindPanel", {"retval": {"type": "Z"}})
    r(b"NSTextView", b"usesFontPanel", {"retval": {"type": "Z"}})
    r(b"NSTextView", b"usesInspectorBar", {"retval": {"type": b"Z"}})
    r(b"NSTextView", b"usesRolloverButtonForSelection", {"retval": {"type": b"Z"}})
    r(b"NSTextView", b"usesRuler", {"retval": {"type": "Z"}})
    r(b"NSTextView", b"writeSelectionToPasteboard:type:", {"retval": {"type": "Z"}})
    r(b"NSTextView", b"writeSelectionToPasteboard:types:", {"retval": {"type": "Z"}})
    r(b"NSTintConfiguration", b"adaptsToUserAccentColor", {"retval": {"type": b"Z"}})
    r(
        b"NSTitlebarAccessoryViewController",
        b"automaticallyAdjustsSize",
        {"retval": {"type": "Z"}},
    )
    r(b"NSTitlebarAccessoryViewController", b"isHidden", {"retval": {"type": "Z"}})
    r(
        b"NSTitlebarAccessoryViewController",
        b"setAutomaticallyAdjustsSize:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(
        b"NSTitlebarAccessoryViewController",
        b"setHidden:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(b"NSToolbar", b"allowsExtensionItems", {"retval": {"type": b"Z"}})
    r(b"NSToolbar", b"allowsUserCustomization", {"retval": {"type": "Z"}})
    r(b"NSToolbar", b"autosavesConfiguration", {"retval": {"type": "Z"}})
    r(b"NSToolbar", b"customizationPaletteIsRunning", {"retval": {"type": "Z"}})
    r(b"NSToolbar", b"isVisible", {"retval": {"type": "Z"}})
    r(b"NSToolbar", b"setAllowsExtensionItems:", {"arguments": {2: {"type": b"Z"}}})
    r(b"NSToolbar", b"setAllowsUserCustomization:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSToolbar", b"setAutosavesConfiguration:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSToolbar", b"setShowsBaselineSeparator:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSToolbar", b"setVisible:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSToolbar", b"showsBaselineSeparator", {"retval": {"type": "Z"}})
    r(b"NSToolbarItem", b"allowsDuplicatesInToolbar", {"retval": {"type": "Z"}})
    r(b"NSToolbarItem", b"autovalidates", {"retval": {"type": "Z"}})
    r(b"NSToolbarItem", b"isBordered", {"retval": {"type": b"Z"}})
    r(b"NSToolbarItem", b"isEnabled", {"retval": {"type": "Z"}})
    r(b"NSToolbarItem", b"isNavigational", {"retval": {"type": b"Z"}})
    r(b"NSToolbarItem", b"isVisible", {"retval": {"type": b"Z"}})
    r(b"NSToolbarItem", b"maxSize", {"retval": {"type": "{CGSize=dd}"}})
    r(b"NSToolbarItem", b"minSize", {"retval": {"type": "{CGSize=dd}"}})
    r(b"NSToolbarItem", b"setAction:", {"arguments": {2: {"sel_of_type": b"v@:@"}}})
    r(b"NSToolbarItem", b"setAutovalidates:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSToolbarItem", b"setBordered:", {"arguments": {2: {"type": b"Z"}}})
    r(b"NSToolbarItem", b"setEnabled:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSToolbarItem", b"setMaxSize:", {"arguments": {2: {"type": "{CGSize=dd}"}}})
    r(b"NSToolbarItem", b"setMinSize:", {"arguments": {2: {"type": "{CGSize=dd}"}}})
    r(b"NSToolbarItem", b"setNavigational:", {"arguments": {2: {"type": b"Z"}}})
    r(
        b"NSToolbarItemGroup",
        b"groupWithItemIdentifier:images:selectionMode:labels:target:action:",
        {"arguments": {7: {"sel_of_type": b"v@:@"}}},
    )
    r(
        b"NSToolbarItemGroup",
        b"groupWithItemIdentifier:titles:selectionMode:labels:target:action:",
        {"arguments": {7: {"sel_of_type": b"v@:@"}}},
    )
    r(b"NSToolbarItemGroup", b"isSelectedAtIndex:", {"retval": {"type": b"Z"}})
    r(
        b"NSToolbarItemGroup",
        b"setSelected:atIndex:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(b"NSTouch", b"deviceSize", {"retval": {"type": "{CGSize=dd}"}})
    r(b"NSTouch", b"isResting", {"retval": {"type": "Z"}})
    r(
        b"NSTouchBar",
        b"isAutomaticCustomizeTouchBarMenuItemEnabled",
        {"retval": {"type": b"Z"}},
    )
    r(b"NSTouchBar", b"isVisible", {"retval": {"type": "Z"}})
    r(
        b"NSTouchBar",
        b"setAutomaticCustomizeTouchBarMenuItemEnabled:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(b"NSTouchBar", b"setVisible:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSTouchBarItem", b"isVisible", {"retval": {"type": "Z"}})
    r(b"NSTouchBarItem", b"setVisible:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSTrackingArea",
        b"initWithRect:options:owner:userInfo:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSTrackingArea",
        b"rect",
        {"retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
    )
    r(b"NSTreeController", b"addSelectionIndexPaths:", {"retval": {"type": "Z"}})
    r(b"NSTreeController", b"alwaysUsesMultipleValuesMarker", {"retval": {"type": "Z"}})
    r(b"NSTreeController", b"avoidsEmptySelection", {"retval": {"type": "Z"}})
    r(b"NSTreeController", b"canAddChild", {"retval": {"type": "Z"}})
    r(b"NSTreeController", b"canInsert", {"retval": {"type": "Z"}})
    r(b"NSTreeController", b"canInsertChild", {"retval": {"type": "Z"}})
    r(b"NSTreeController", b"preservesSelection", {"retval": {"type": "Z"}})
    r(b"NSTreeController", b"removeSelectionIndexPaths:", {"retval": {"type": "Z"}})
    r(b"NSTreeController", b"selectsInsertedObjects", {"retval": {"type": "Z"}})
    r(
        b"NSTreeController",
        b"setAlwaysUsesMultipleValuesMarker:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(
        b"NSTreeController",
        b"setAvoidsEmptySelection:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(b"NSTreeController", b"setPreservesSelection:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSTreeController", b"setSelectionIndexPath:", {"retval": {"type": "Z"}})
    r(b"NSTreeController", b"setSelectionIndexPaths:", {"retval": {"type": "Z"}})
    r(
        b"NSTreeController",
        b"setSelectsInsertedObjects:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(b"NSTreeNode", b"isLeaf", {"retval": {"type": "Z"}})
    r(
        b"NSTreeNode",
        b"sortWithSortDescriptors:recursively:",
        {"arguments": {3: {"type": "Z"}}},
    )
    r(b"NSTypesetter", b"bidiProcessingEnabled", {"retval": {"type": "Z"}})
    r(
        b"NSTypesetter",
        b"boundingBoxForControlGlyphAtIndex:forTextContainer:proposedLineFragment:glyphPosition:characterIndex:",
        {
            "retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            "arguments": {
                2: {"type": "Q"},
                4: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                5: {"type": "{CGPoint=dd}"},
                6: {"type": "Q"},
            },
        },
    )
    r(
        b"NSTypesetter",
        b"characterRangeForGlyphRange:actualGlyphRange:",
        {
            "retval": {"type": "{_NSRange=QQ}"},
            "arguments": {2: {"type": "{_NSRange=QQ}"}, 3: {"type_modifier": b"o"}},
        },
    )
    r(
        b"NSTypesetter",
        b"deleteGlyphsInRange:",
        {"arguments": {2: {"type": "{_NSRange=QQ}"}}},
    )
    r(
        b"NSTypesetter",
        b"endLineWithGlyphRange:",
        {"arguments": {2: {"type": "{_NSRange=QQ}"}}},
    )
    r(
        b"NSTypesetter",
        b"getGlyphsInRange:glyphs:characterIndexes:glyphInscriptions:elasticBits:bidiLevels:",
        {
            "retval": {"type": "Q"},
            "arguments": {
                2: {"type": "{_NSRange=QQ}"},
                3: {"type_modifier": b"o", "c_array_length_in_arg": 2},
                4: {"type_modifier": b"o", "c_array_length_in_arg": 2},
                5: {"type_modifier": b"o", "c_array_length_in_arg": 2},
                6: {"type": "^Z", "type_modifier": b"o", "c_array_length_in_arg": 2},
                7: {"type": "^C", "type_modifier": b"o", "c_array_length_in_arg": 2},
            },
        },
    )
    r(
        b"NSTypesetter",
        b"getLineFragmentRect:usedRect:forParagraphSeparatorGlyphRange:atProposedOrigin:",
        {
            "arguments": {
                2: {"type_modifier": b"o"},
                3: {"type_modifier": b"o"},
                4: {"type": "{_NSRange=QQ}"},
                5: {"type": "{CGPoint=dd}"},
            }
        },
    )
    r(
        b"NSTypesetter",
        b"getLineFragmentRect:usedRect:remainingRect:forStartingGlyphAtIndex:proposedRect:lineSpacing:paragraphSpacingBefore:paragraphSpacingAfter:",
        {
            "arguments": {
                2: {"type": "^{CGRect={CGPoint=dd}{CGSize=dd}}", "type_modifier": b"N"},
                3: {"type": "^{CGRect={CGPoint=dd}{CGSize=dd}}", "type_modifier": b"N"},
                4: {"type": "^{CGRect={CGPoint=dd}{CGSize=dd}}", "type_modifier": b"N"},
                6: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            }
        },
    )
    r(
        b"NSTypesetter",
        b"glyphRangeForCharacterRange:actualCharacterRange:",
        {
            "retval": {"type": "{_NSRange=QQ}"},
            "arguments": {2: {"type": "{_NSRange=QQ}"}, 3: {"type_modifier": b"o"}},
        },
    )
    r(
        b"NSTypesetter",
        b"layoutCharactersInRange:forLayoutManager:maximumNumberOfLineFragments:",
        {
            "retval": {"type": "{_NSRange=QQ}"},
            "arguments": {2: {"type": "{_NSRange=QQ}"}},
        },
    )
    r(
        b"NSTypesetter",
        b"layoutGlyphsInLayoutManager:startingAtGlyphIndex:maxNumberOfLineFragments:nextGlyphIndex:",
        {"arguments": {5: {"type_modifier": b"o"}}},
    )
    r(
        b"NSTypesetter",
        b"layoutParagraphAtPoint:",
        {"arguments": {2: {"type_modifier": b"N"}}},
    )
    r(
        b"NSTypesetter",
        b"lineSpacingAfterGlyphAtIndex:withProposedLineFragmentRect:",
        {"arguments": {3: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSTypesetter",
        b"paragraphCharacterRange",
        {"retval": {"type": "{_NSRange=QQ}"}},
    )
    r(b"NSTypesetter", b"paragraphGlyphRange", {"retval": {"type": "{_NSRange=QQ}"}})
    r(
        b"NSTypesetter",
        b"paragraphSeparatorCharacterRange",
        {"retval": {"type": "{_NSRange=QQ}"}},
    )
    r(
        b"NSTypesetter",
        b"paragraphSeparatorGlyphRange",
        {"retval": {"type": "{_NSRange=QQ}"}},
    )
    r(
        b"NSTypesetter",
        b"paragraphSpacingAfterGlyphAtIndex:withProposedLineFragmentRect:",
        {"arguments": {3: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSTypesetter",
        b"paragraphSpacingBeforeGlyphAtIndex:withProposedLineFragmentRect:",
        {"arguments": {3: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSTypesetter",
        b"printingAdjustmentInLayoutManager:forNominallySpacedGlyphRange:packedGlyphs:count:",
        {
            "retval": {"type": "{CGSize=dd}"},
            "arguments": {
                3: {"type": "{_NSRange=QQ}"},
                4: {
                    "c_array_delimited_by_null": True,
                    "type": "^v",
                    "type_modifier": b"n",
                    "c_array_length_in_arg": 5,
                },
            },
        },
    )
    r(
        b"NSTypesetter",
        b"setAttachmentSize:forGlyphRange:",
        {"arguments": {2: {"type": "{CGSize=dd}"}, 3: {"type": "{_NSRange=QQ}"}}},
    )
    r(
        b"NSTypesetter",
        b"setBidiLevels:forGlyphRange:",
        {
            "arguments": {
                2: {"type": "^z", "type_modifier": b"n", "c_array_length_in_arg": 3},
                3: {"type": "{_NSRange=QQ}"},
            }
        },
    )
    r(b"NSTypesetter", b"setBidiProcessingEnabled:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSTypesetter",
        b"setDrawsOutsideLineFragment:forGlyphRange:",
        {"arguments": {2: {"type": "Z"}, 3: {"type": "{_NSRange=QQ}"}}},
    )
    r(
        b"NSTypesetter",
        b"setHardInvalidation:forGlyphRange:",
        {"arguments": {2: {"type": "Z"}, 3: {"type": "{_NSRange=QQ}"}}},
    )
    r(
        b"NSTypesetter",
        b"setLineFragmentRect:forGlyphRange:usedRect:baselineOffset:",
        {
            "arguments": {
                2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                3: {"type": "{_NSRange=QQ}"},
                4: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            }
        },
    )
    r(
        b"NSTypesetter",
        b"setLocation:withAdvancements:forStartOfGlyphRange:",
        {
            "arguments": {
                2: {"type": "{CGPoint=dd}"},
                3: {"type_modifier": b"n", "c_array_length_in_arg": 4},
                4: {"type": "{_NSRange=QQ}"},
            }
        },
    )
    r(
        b"NSTypesetter",
        b"setNotShownAttribute:forGlyphRange:",
        {"arguments": {2: {"type": "Z"}, 3: {"type": "{_NSRange=QQ}"}}},
    )
    r(
        b"NSTypesetter",
        b"setParagraphGlyphRange:separatorGlyphRange:",
        {"arguments": {2: {"type": "{_NSRange=QQ}"}, 3: {"type": "{_NSRange=QQ}"}}},
    )
    r(b"NSTypesetter", b"setUsesFontLeading:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSTypesetter",
        b"shouldBreakLineByHyphenatingBeforeCharacterAtIndex:",
        {"retval": {"type": "Z"}, "arguments": {2: {"type": "Q"}}},
    )
    r(
        b"NSTypesetter",
        b"shouldBreakLineByWordBeforeCharacterAtIndex:",
        {"retval": {"type": "Z"}, "arguments": {2: {"type": "Q"}}},
    )
    r(
        b"NSTypesetter",
        b"substituteGlyphsInRange:withGlyphs:",
        {
            "arguments": {
                2: {"type": "{_NSRange=QQ}"},
                3: {"type_modifier": b"n", "c_array_length_in_arg": 2},
            }
        },
    )
    r(b"NSTypesetter", b"usesFontLeading", {"retval": {"type": "Z"}})
    r(
        b"NSTypesetter",
        b"willSetLineFragmentRect:forGlyphRange:usedRect:baselineOffset:",
        {
            "arguments": {
                2: {"type": "^{CGRect={CGPoint=dd}{CGSize=dd}}", "type_modifier": b"N"},
                3: {"type": "{_NSRange=QQ}"},
                4: {"type": "^{CGRect={CGPoint=dd}{CGSize=dd}}", "type_modifier": b"N"},
                5: {"type": "^d", "type_modifier": b"N"},
            }
        },
    )
    r(b"NSUndoManager", b"groupsByEvent", {"retval": {"type": "Z"}})
    r(b"NSUndoManager", b"setGroupsByEvent:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSUserDefaultsController", b"appliesImmediately", {"retval": {"type": "Z"}})
    r(b"NSUserDefaultsController", b"hasUnappliedChanges", {"retval": {"type": "Z"}})
    r(
        b"NSUserDefaultsController",
        b"setAppliesImmediately:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(
        b"NSUserInterfaceCompressionOptions",
        b"containsOptions:",
        {"retval": {"type": "Z"}},
    )
    r(
        b"NSUserInterfaceCompressionOptions",
        b"intersectsOptions:",
        {"retval": {"type": "Z"}},
    )
    r(b"NSUserInterfaceCompressionOptions", b"isEmpty", {"retval": {"type": "Z"}})
    r(
        b"NSUserInterfaceCompressionOptions",
        b"setEmpty:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(b"NSView", b"acceptsFirstMouse:", {"retval": {"type": "Z"}})
    r(b"NSView", b"acceptsTouchEvents", {"retval": {"type": "Z"}})
    r(
        b"NSView",
        b"addCursorRect:cursor:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSView",
        b"addToolTipRect:owner:userData:",
        {
            "arguments": {
                2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                4: {"type": "^v"},
            }
        },
    )
    r(
        b"NSView",
        b"addTrackingRect:owner:userData:assumeInside:",
        {
            "arguments": {
                2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                4: {"type": "^v"},
                5: {"type": "Z"},
            }
        },
    )
    r(
        b"NSView",
        b"adjustPageHeightNew:top:bottom:limit:",
        {"arguments": {2: {"type_modifier": b"o"}}},
    )
    r(
        b"NSView",
        b"adjustPageWidthNew:left:right:limit:",
        {"arguments": {2: {"type_modifier": b"o"}}},
    )
    r(
        b"NSView",
        b"adjustScroll:",
        {
            "retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            "arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
        },
    )
    r(b"NSView", b"alignmentRectInsets", {"retval": {"type": b"{NSEdgeInsets=dddd}"}})
    r(b"NSView", b"allowsVibrancy", {"retval": {"type": b"Z"}})
    r(b"NSView", b"autoresizesSubviews", {"retval": {"type": "Z"}})
    r(b"NSView", b"autoscroll:", {"retval": {"type": "Z"}})
    r(
        b"NSView",
        b"beginPageInRect:atPlacement:",
        {
            "arguments": {
                2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                3: {"type": "{CGPoint=dd}"},
            }
        },
    )
    r(
        b"NSView",
        b"bitmapImageRepForCachingDisplayInRect:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(b"NSView", b"bounds", {"retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}})
    r(
        b"NSView",
        b"cacheDisplayInRect:toBitmapImageRep:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(b"NSView", b"canBecomeKeyView", {"retval": {"type": "Z"}})
    r(b"NSView", b"canDraw", {"retval": {"type": "Z"}})
    r(b"NSView", b"canDrawConcurrently", {"retval": {"type": "Z"}})
    r(b"NSView", b"canDrawSubviewsIntoLayer", {"retval": {"type": b"Z"}})
    r(
        b"NSView",
        b"centerScanRect:",
        {
            "retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            "arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
        },
    )
    r(b"NSView", b"clipsToBounds", {"retval": {"type": b"Z"}})
    r(b"NSView", b"context:", {"arguments": {2: {"type": "^v"}}})
    r(
        b"NSView",
        b"convertPoint:fromView:",
        {
            "retval": {"type": "{CGPoint=dd}"},
            "arguments": {2: {"type": "{CGPoint=dd}"}},
        },
    )
    r(
        b"NSView",
        b"convertPoint:toView:",
        {
            "retval": {"type": "{CGPoint=dd}"},
            "arguments": {2: {"type": "{CGPoint=dd}"}},
        },
    )
    r(
        b"NSView",
        b"convertPointFromBase:",
        {
            "retval": {"type": "{CGPoint=dd}"},
            "arguments": {2: {"type": "{CGPoint=dd}"}},
        },
    )
    r(
        b"NSView",
        b"convertPointToBase:",
        {
            "retval": {"type": "{CGPoint=dd}"},
            "arguments": {2: {"type": "{CGPoint=dd}"}},
        },
    )
    r(
        b"NSView",
        b"convertRect:fromView:",
        {
            "retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            "arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
        },
    )
    r(
        b"NSView",
        b"convertRect:toView:",
        {
            "retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            "arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
        },
    )
    r(
        b"NSView",
        b"convertRectFromBase:",
        {
            "retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            "arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
        },
    )
    r(
        b"NSView",
        b"convertRectToBase:",
        {
            "retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            "arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
        },
    )
    r(
        b"NSView",
        b"convertSize:fromView:",
        {"retval": {"type": "{CGSize=dd}"}, "arguments": {2: {"type": "{CGSize=dd}"}}},
    )
    r(
        b"NSView",
        b"convertSize:toView:",
        {"retval": {"type": "{CGSize=dd}"}, "arguments": {2: {"type": "{CGSize=dd}"}}},
    )
    r(
        b"NSView",
        b"convertSizeFromBase:",
        {"retval": {"type": "{CGSize=dd}"}, "arguments": {2: {"type": "{CGSize=dd}"}}},
    )
    r(
        b"NSView",
        b"convertSizeToBase:",
        {"retval": {"type": "{CGSize=dd}"}, "arguments": {2: {"type": "{CGSize=dd}"}}},
    )
    r(
        b"NSView",
        b"dataWithEPSInsideRect:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSView",
        b"dataWithPDFInsideRect:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSView",
        b"displayIfNeededInRect:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSView",
        b"displayIfNeededInRectIgnoringOpacity:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSView",
        b"displayLinkWithTarget:selector:",
        {"arguments": {3: {"type": ":", "sel_of_type": b"v@:@"}}},
    )
    r(
        b"NSView",
        b"displayRect:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSView",
        b"displayRectIgnoringOpacity:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSView",
        b"displayRectIgnoringOpacity:inContext:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSView",
        b"dragFile:fromRect:slideBack:event:",
        {
            "retval": {"type": "Z"},
            "arguments": {
                3: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                4: {"type": "Z"},
            },
        },
    )
    r(
        b"NSView",
        b"dragImage:at:offset:event:pasteboard:source:slideBack:",
        {
            "arguments": {
                3: {"type": "{CGPoint=dd}"},
                4: {"type": "{CGSize=dd}"},
                8: {"type": "Z"},
            }
        },
    )
    r(
        b"NSView",
        b"dragPromisedFilesOfTypes:fromRect:source:slideBack:event:",
        {
            "retval": {"type": "Z"},
            "arguments": {
                3: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                5: {"type": "Z"},
            },
        },
    )
    r(
        b"NSView",
        b"drawPageBorderWithSize:",
        {"arguments": {2: {"type": "{CGSize=dd}"}}},
    )
    r(
        b"NSView",
        b"drawRect:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSView",
        b"drawSheetBorderWithSize:",
        {"arguments": {2: {"type": "{CGSize=dd}"}}},
    )
    r(b"NSView", b"enterFullScreenMode:withOptions:", {"retval": {"type": "Z"}})
    r(b"NSView", b"frame", {"retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}})
    r(
        b"NSView",
        b"getRectsBeingDrawn:count:",
        {
            "arguments": {
                2: {"type": "^^{CGRect}"},
                3: {"type": "^q", "type_modifier": b"o"},
            }
        },
    )
    r(
        b"NSView",
        b"getRectsExposedDuringLiveResize:count:",
        {
            "arguments": {
                2: {
                    "c_array_of_fixed_length": 4,
                    "type": "^{CGRect={CGPoint=dd}{CGSize=dd}}",
                    "type_modifier": b"o",
                },
                3: {"type": "^q", "type_modifier": b"o"},
            }
        },
    )
    r(b"NSView", b"hasAmbiguousLayout", {"retval": {"type": b"Z"}})
    r(b"NSView", b"hitTest:", {"arguments": {2: {"type": "{CGPoint=dd}"}}})
    r(b"NSView", b"inLiveResize", {"retval": {"type": "Z"}})
    r(b"NSView", b"isCompatibleWithResponsiveScrolling", {"retval": {"type": b"Z"}})
    r(b"NSView", b"isDescendantOf:", {"retval": {"type": "Z"}})
    r(b"NSView", b"isDrawingFindIndicator", {"retval": {"type": b"Z"}})
    r(b"NSView", b"isFlipped", {"retval": {"type": "Z"}})
    r(b"NSView", b"isHidden", {"retval": {"type": "Z"}})
    r(b"NSView", b"isHiddenOrHasHiddenAncestor", {"retval": {"type": "Z"}})
    r(b"NSView", b"isHorizontalContentSizeConstraintActive", {"retval": {"type": b"Z"}})
    r(b"NSView", b"isInFullScreenMode", {"retval": {"type": "Z"}})
    r(b"NSView", b"isOpaque", {"retval": {"type": "Z"}})
    r(b"NSView", b"isRotatedFromBase", {"retval": {"type": "Z"}})
    r(b"NSView", b"isRotatedOrScaledFromBase", {"retval": {"type": "Z"}})
    r(b"NSView", b"isVerticalContentSizeConstraintActive", {"retval": {"type": b"Z"}})
    r(
        b"NSView",
        b"knowsPageRange:",
        {"retval": {"type": "Z"}, "arguments": {2: {"type_modifier": b"o"}}},
    )
    r(b"NSView", b"layerUsesCoreImageFilters", {"retval": {"type": b"Z"}})
    r(
        b"NSView",
        b"locationOfPrintRect:",
        {
            "retval": {"type": "{CGPoint=dd}"},
            "arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
        },
    )
    r(b"NSView", b"lockFocusIfCanDraw", {"retval": {"type": "Z"}})
    r(b"NSView", b"lockFocusIfCanDrawInContext:", {"retval": {"type": "Z"}})
    r(
        b"NSView",
        b"mouse:inRect:",
        {
            "retval": {"type": "Z"},
            "arguments": {
                2: {"type": "{CGPoint=dd}"},
                3: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            },
        },
    )
    r(b"NSView", b"mouseDownCanMoveWindow", {"retval": {"type": "Z"}})
    r(b"NSView", b"needsDisplay", {"retval": {"type": "Z"}})
    r(b"NSView", b"needsLayout", {"retval": {"type": b"Z"}})
    r(b"NSView", b"needsPanelToBecomeKey", {"retval": {"type": "Z"}})
    r(
        b"NSView",
        b"needsToDrawRect:",
        {
            "retval": {"type": "Z"},
            "arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
        },
    )
    r(b"NSView", b"needsUpdateConstraints", {"retval": {"type": b"Z"}})
    r(b"NSView", b"performKeyEquivalent:", {"retval": {"type": "Z"}})
    r(b"NSView", b"performMnemonic:", {"retval": {"type": "Z"}})
    r(b"NSView", b"postsBoundsChangedNotifications", {"retval": {"type": "Z"}})
    r(b"NSView", b"postsFrameChangedNotifications", {"retval": {"type": "Z"}})
    r(b"NSView", b"preservesContentDuringLiveResize", {"retval": {"type": "Z"}})
    r(
        b"NSView",
        b"rectForPage:",
        {"retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
    )
    r(
        b"NSView",
        b"rectPreservedDuringLiveResize",
        {"retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
    )
    r(
        b"NSView",
        b"removeCursorRect:cursor:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(b"NSView", b"requiresConstraintBasedLayout", {"retval": {"type": b"Z"}})
    r(
        b"NSView",
        b"resizeSubviewsWithOldSize:",
        {"arguments": {2: {"type": "{CGSize=dd}"}}},
    )
    r(
        b"NSView",
        b"resizeWithOldSuperviewSize:",
        {"arguments": {2: {"type": "{CGSize=dd}"}}},
    )
    r(b"NSView", b"rulerView:shouldAddMarker:", {"retval": {"type": "Z"}})
    r(b"NSView", b"rulerView:shouldMoveMarker:", {"retval": {"type": "Z"}})
    r(b"NSView", b"rulerView:shouldRemoveMarker:", {"retval": {"type": "Z"}})
    r(b"NSView", b"scaleUnitSquareToSize:", {"arguments": {2: {"type": "{CGSize=dd}"}}})
    r(
        b"NSView",
        b"scrollClipView:toPoint:",
        {"arguments": {3: {"type": "{CGPoint=dd}"}}},
    )
    r(b"NSView", b"scrollPoint:", {"arguments": {2: {"type": "{CGPoint=dd}"}}})
    r(
        b"NSView",
        b"scrollRect:by:",
        {
            "arguments": {
                2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                3: {"type": "{CGSize=dd}"},
            }
        },
    )
    r(
        b"NSView",
        b"scrollRectToVisible:",
        {
            "retval": {"type": "Z"},
            "arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
        },
    )
    r(b"NSView", b"setAcceptsTouchEvents:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSView", b"setAutoresizesSubviews:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSView",
        b"setBounds:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(b"NSView", b"setBoundsOrigin:", {"arguments": {2: {"type": "{CGPoint=dd}"}}})
    r(b"NSView", b"setBoundsSize:", {"arguments": {2: {"type": "{CGSize=dd}"}}})
    r(b"NSView", b"setCanDrawConcurrently:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSView", b"setCanDrawSubviewsIntoLayer:", {"arguments": {2: {"type": b"Z"}}})
    r(b"NSView", b"setClipsToBounds:", {"arguments": {2: {"type": b"Z"}}})
    r(
        b"NSView",
        b"setFrame:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(b"NSView", b"setFrameOrigin:", {"arguments": {2: {"type": "{CGPoint=dd}"}}})
    r(b"NSView", b"setFrameSize:", {"arguments": {2: {"type": "{CGSize=dd}"}}})
    r(b"NSView", b"setHidden:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSView",
        b"setHorizontalContentSizeConstraintActive:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(
        b"NSView",
        b"setKeyboardFocusRingNeedsDisplayInRect:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(b"NSView", b"setLayerUsesCoreImageFilters:", {"arguments": {2: {"type": b"Z"}}})
    r(b"NSView", b"setNeedsDisplay:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSView",
        b"setNeedsDisplayInRect:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(b"NSView", b"setNeedsLayout:", {"arguments": {2: {"type": b"Z"}}})
    r(b"NSView", b"setNeedsUpdateConstraints:", {"arguments": {2: {"type": b"Z"}}})
    r(
        b"NSView",
        b"setPostsBoundsChangedNotifications:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(
        b"NSView",
        b"setPostsFrameChangedNotifications:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(
        b"NSView",
        b"setTranslatesAutoresizingMaskIntoConstraints:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(
        b"NSView",
        b"setVerticalContentSizeConstraintActive:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(
        b"NSView",
        b"setWantsBestResolutionOpenGLSurface:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(
        b"NSView",
        b"setWantsExtendedDynamicRangeOpenGLSurface:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(b"NSView", b"setWantsLayer:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSView", b"setWantsRestingTouches:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSView", b"shouldDelayWindowOrderingForEvent:", {"retval": {"type": "Z"}})
    r(b"NSView", b"shouldDrawColor", {"retval": {"type": "Z"}})
    r(
        b"NSView",
        b"showDefinitionForAttributedString:atPoint:",
        {"arguments": {3: {"type": "{CGPoint=dd}"}}},
    )
    r(
        b"NSView",
        b"showDefinitionForAttributedString:range:options:baselineOriginProvider:",
        {
            "arguments": {
                3: {"type": "{_NSRange=QQ}"},
                5: {
                    "callable": {
                        "retval": {"type": b"{CGPoint=dd}"},
                        "arguments": {
                            0: {"type": b"^v"},
                            1: {"type": b"{_NSRange=QQ}"},
                        },
                    }
                },
            }
        },
    )
    r(
        b"NSView",
        b"sortSubviewsUsingFunction:context:",
        {
            "arguments": {
                2: {
                    "callable": {
                        "retval": {"type": b"i"},
                        "arguments": {
                            0: {"type": b"@"},
                            1: {"type": b"@"},
                            2: {"type": b"@"},
                        },
                    },
                    "type": "^?",
                    "callable_retained": False,
                },
                3: {"type": "@"},
            }
        },
    )
    r(
        b"NSView",
        b"translateOriginToPoint:",
        {"arguments": {2: {"type": "{CGPoint=dd}"}}},
    )
    r(
        b"NSView",
        b"translateRectsNeedingDisplayInRect:by:",
        {
            "arguments": {
                2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                3: {"type": "{CGSize=dd}"},
            }
        },
    )
    r(
        b"NSView",
        b"translatesAutoresizingMaskIntoConstraints",
        {"retval": {"type": b"Z"}},
    )
    r(
        b"NSView",
        b"visibleRect",
        {"retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
    )
    r(b"NSView", b"wantsBestResolutionOpenGLSurface", {"retval": {"type": b"Z"}})
    r(b"NSView", b"wantsDefaultClipping", {"retval": {"type": "Z"}})
    r(b"NSView", b"wantsExtendedDynamicRangeOpenGLSurface", {"retval": {"type": "Z"}})
    r(b"NSView", b"wantsLayer", {"retval": {"type": "Z"}})
    r(b"NSView", b"wantsRestingTouches", {"retval": {"type": "Z"}})
    r(b"NSView", b"wantsUpdateLayer", {"retval": {"type": b"Z"}})
    r(
        b"NSView",
        b"writeEPSInsideRect:toPasteboard:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSView",
        b"writePDFInsideRect:toPasteboard:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(b"NSViewController", b"commitEditing", {"retval": {"type": "Z"}})
    r(
        b"NSViewController",
        b"commitEditingWithDelegate:didCommitSelector:contextInfo:",
        {"arguments": {3: {"type": ":", "sel_of_type": b"v@:@Z^v"}, 4: {"type": "^v"}}},
    )
    r(b"NSViewController", b"isViewLoaded", {"retval": {"type": b"Z"}})
    r(
        b"NSViewController",
        b"presentViewController:asPopoverRelativeToRect:ofView:preferredEdge:behavior:hasFullSizeContent:",
        {"arguments": {7: {"type": b"Z"}}},
    )
    r(
        b"NSViewController",
        b"transitionFromViewController:toViewController:options:completionHandler:",
        {
            "arguments": {
                5: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {0: {"type": b"^v"}},
                    }
                }
            }
        },
    )
    r(b"NSVisualEffectView", b"isEmphasized", {"retval": {"type": "Z"}})
    r(b"NSVisualEffectView", b"setEmphasized:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSWindow", b"acceptsMouseMovedEvents", {"retval": {"type": "Z"}})
    r(b"NSWindow", b"allowsAutomaticWindowTabbing", {"retval": {"type": b"Z"}})
    r(b"NSWindow", b"allowsConcurrentViewDrawing", {"retval": {"type": "Z"}})
    r(
        b"NSWindow",
        b"allowsToolTipsWhenApplicationIsInactive",
        {"retval": {"type": "Z"}},
    )
    r(
        b"NSWindow",
        b"animationResizeTime:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(b"NSWindow", b"areCursorRectsEnabled", {"retval": {"type": "Z"}})
    r(b"NSWindow", b"aspectRatio", {"retval": {"type": "{CGSize=dd}"}})
    r(
        b"NSWindow",
        b"autorecalculatesContentBorderThicknessForEdge:",
        {"retval": {"type": "Z"}},
    )
    r(b"NSWindow", b"autorecalculatesKeyViewLoop", {"retval": {"type": "Z"}})
    r(
        b"NSWindow",
        b"beginCriticalSheet:completionHandler:",
        {
            "arguments": {
                3: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {0: {"type": b"^v"}, 1: {"type": b"q"}},
                    }
                }
            }
        },
    )
    r(
        b"NSWindow",
        b"beginSheet:completionHandler:",
        {
            "arguments": {
                3: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {0: {"type": b"^v"}, 1: {"type": b"q"}},
                    }
                }
            }
        },
    )
    r(
        b"NSWindow",
        b"cacheImageInRect:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(b"NSWindow", b"canBeVisibleOnAllSpaces", {"retval": {"type": "Z"}})
    r(b"NSWindow", b"canBecomeKeyWindow", {"retval": {"type": "Z"}})
    r(b"NSWindow", b"canBecomeMainWindow", {"retval": {"type": "Z"}})
    r(b"NSWindow", b"canBecomeVisibleWithoutLogin", {"retval": {"type": "Z"}})
    r(b"NSWindow", b"canHide", {"retval": {"type": "Z"}})
    r(b"NSWindow", b"canRepresentDisplayGamut:", {"retval": {"type": "Z"}})
    r(b"NSWindow", b"canStoreColor", {"retval": {"type": "Z"}})
    r(
        b"NSWindow",
        b"cascadeTopLeftFromPoint:",
        {
            "retval": {"type": "{CGPoint=dd}"},
            "arguments": {2: {"type": "{CGPoint=dd}"}},
        },
    )
    r(b"NSWindow", b"contentAspectRatio", {"retval": {"type": "{CGSize=dd}"}})
    r(b"NSWindow", b"contentMaxSize", {"retval": {"type": "{CGSize=dd}"}})
    r(b"NSWindow", b"contentMinSize", {"retval": {"type": "{CGSize=dd}"}})
    r(
        b"NSWindow",
        b"contentRectForFrameRect:",
        {
            "retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            "arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
        },
    )
    r(
        b"NSWindow",
        b"contentRectForFrameRect:styleMask:",
        {
            "retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            "arguments": {
                2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                3: {"type": "Q"},
            },
        },
    )
    r(b"NSWindow", b"contentResizeIncrements", {"retval": {"type": "{CGSize=dd}"}})
    r(
        b"NSWindow",
        b"convertBaseToScreen:",
        {
            "retval": {"type": "{CGPoint=dd}"},
            "arguments": {2: {"type": "{CGPoint=dd}"}},
        },
    )
    r(
        b"NSWindow",
        b"convertScreenToBase:",
        {
            "retval": {"type": "{CGPoint=dd}"},
            "arguments": {2: {"type": "{CGPoint=dd}"}},
        },
    )
    r(
        b"NSWindow",
        b"dataWithEPSInsideRect:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSWindow",
        b"dataWithPDFInsideRect:",
        {"arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}}},
    )
    r(
        b"NSWindow",
        b"displayLinkWithTarget:selector:",
        {"arguments": {3: {"type": ":", "sel_of_type": b"v@:@"}}},
    )
    r(b"NSWindow", b"displaysWhenScreenProfileChanges", {"retval": {"type": "Z"}})
    r(
        b"NSWindow",
        b"dragImage:at:offset:event:pasteboard:source:slideBack:",
        {
            "arguments": {
                3: {"type": "{CGPoint=dd}"},
                4: {"type": "{CGSize=dd}"},
                8: {"type": "Z"},
            }
        },
    )
    r(b"NSWindow", b"fieldEditor:forObject:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSWindow", b"frame", {"retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}})
    r(
        b"NSWindow",
        b"frameRectForContentRect:",
        {
            "retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            "arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
        },
    )
    r(
        b"NSWindow",
        b"frameRectForContentRect:styleMask:",
        {
            "retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            "arguments": {
                2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                3: {"type": "Q"},
            },
        },
    )
    r(b"NSWindow", b"hasActiveWindowSharingSession", {"retval": {"type": b"Z"}})
    r(b"NSWindow", b"hasCloseBox", {"retval": {"type": "Z"}})
    r(b"NSWindow", b"hasDynamicDepthLimit", {"retval": {"type": "Z"}})
    r(b"NSWindow", b"hasShadow", {"retval": {"type": "Z"}})
    r(b"NSWindow", b"hasTitleBar", {"retval": {"type": "Z"}})
    r(b"NSWindow", b"hidesOnDeactivate", {"retval": {"type": "Z"}})
    r(b"NSWindow", b"ignoresMouseEvents", {"retval": {"type": "Z"}})
    r(b"NSWindow", b"inLiveResize", {"retval": {"type": "Z"}})
    r(
        b"NSWindow",
        b"initWithContentRect:styleMask:backing:defer:",
        {
            "arguments": {
                2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                5: {"type": "Z"},
            }
        },
    )
    r(
        b"NSWindow",
        b"initWithContentRect:styleMask:backing:defer:screen:",
        {
            "arguments": {
                2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                5: {"type": "Z"},
            }
        },
    )
    r(
        b"NSWindow",
        b"initWithWindowRef:",
        {"arguments": {2: {"type": "^{OpaqueWindowPtr=}"}}},
    )
    r(b"NSWindow", b"isAutodisplay", {"retval": {"type": "Z"}})
    r(b"NSWindow", b"isDocumentEdited", {"retval": {"type": "Z"}})
    r(b"NSWindow", b"isExcludedFromWindowsMenu", {"retval": {"type": "Z"}})
    r(b"NSWindow", b"isFloatingPanel", {"retval": {"type": "Z"}})
    r(b"NSWindow", b"isFlushWindowDisabled", {"retval": {"type": "Z"}})
    r(b"NSWindow", b"isKeyWindow", {"retval": {"type": "Z"}})
    r(b"NSWindow", b"isMainWindow", {"retval": {"type": "Z"}})
    r(b"NSWindow", b"isMiniaturizable", {"retval": {"type": "Z"}})
    r(b"NSWindow", b"isMiniaturized", {"retval": {"type": "Z"}})
    r(b"NSWindow", b"isModalPanel", {"retval": {"type": "Z"}})
    r(b"NSWindow", b"isMovable", {"retval": {"type": "Z"}})
    r(b"NSWindow", b"isMovableByWindowBackground", {"retval": {"type": "Z"}})
    r(b"NSWindow", b"isOnActiveSpace", {"retval": {"type": "Z"}})
    r(b"NSWindow", b"isOneShot", {"retval": {"type": "Z"}})
    r(b"NSWindow", b"isOpaque", {"retval": {"type": "Z"}})
    r(b"NSWindow", b"isReleasedWhenClosed", {"retval": {"type": "Z"}})
    r(b"NSWindow", b"isResizable", {"retval": {"type": "Z"}})
    r(b"NSWindow", b"isRestorable", {"retval": {"type": b"Z"}})
    r(b"NSWindow", b"isSheet", {"retval": {"type": "Z"}})
    r(b"NSWindow", b"isVisible", {"retval": {"type": "Z"}})
    r(b"NSWindow", b"isZoomable", {"retval": {"type": "Z"}})
    r(b"NSWindow", b"isZoomed", {"retval": {"type": "Z"}})
    r(b"NSWindow", b"makeFirstResponder:", {"retval": {"type": "Z"}})
    r(b"NSWindow", b"maxSize", {"retval": {"type": "{CGSize=dd}"}})
    r(b"NSWindow", b"minSize", {"retval": {"type": "{CGSize=dd}"}})
    r(
        b"NSWindow",
        b"mouseLocationOutsideOfEventStream",
        {"retval": {"type": "{CGPoint=dd}"}},
    )
    r(
        b"NSWindow",
        b"nextEventMatchingMask:untilDate:inMode:dequeue:",
        {"arguments": {5: {"type": "Z"}}},
    )
    r(
        b"NSWindow",
        b"onstrainFrameRect:toScreen:",
        {
            "retval": {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
            "arguments": {2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"}},
        },
    )
    r(b"NSWindow", b"postEvent:atStart:", {"arguments": {3: {"type": "Z"}}})
    r(b"NSWindow", b"preservesContentDuringLiveResize", {"retval": {"type": "Z"}})
    r(
        b"NSWindow",
        b"preventsApplicationTerminationWhenModal",
        {"retval": {"type": "Z"}},
    )
    r(b"NSWindow", b"resizeIncrements", {"retval": {"type": "{CGSize=dd}"}})
    r(b"NSWindow", b"setAcceptsMouseMovedEvents:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSWindow",
        b"setAllowsAutomaticWindowTabbing:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(
        b"NSWindow",
        b"setAllowsConcurrentViewDrawing:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(
        b"NSWindow",
        b"setAllowsToolTipsWhenApplicationIsInactive:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(b"NSWindow", b"setAspectRatio:", {"arguments": {2: {"type": "{CGSize=dd}"}}})
    r(b"NSWindow", b"setAutodisplay:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSWindow",
        b"setAutorecalculatesContentBorderThickness:forEdge:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(
        b"NSWindow",
        b"setAutorecalculatesKeyViewLoop:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(b"NSWindow", b"setCanBeVisibleOnAllSpaces:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSWindow",
        b"setCanBecomeVisibleWithoutLogin:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(b"NSWindow", b"setCanHide:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSWindow",
        b"setContentAspectRatio:",
        {"arguments": {2: {"type": "{CGSize=dd}"}}},
    )
    r(b"NSWindow", b"setContentMaxSize:", {"arguments": {2: {"type": "{CGSize=dd}"}}})
    r(b"NSWindow", b"setContentMinSize:", {"arguments": {2: {"type": "{CGSize=dd}"}}})
    r(
        b"NSWindow",
        b"setContentResizeIncrements:",
        {"arguments": {2: {"type": "{CGSize=dd}"}}},
    )
    r(b"NSWindow", b"setContentSize:", {"arguments": {2: {"type": "{CGSize=dd}"}}})
    r(
        b"NSWindow",
        b"setDisplaysWhenScreenProfileChanges:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(b"NSWindow", b"setDocumentEdited:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSWindow", b"setDynamicDepthLimit:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSWindow", b"setExcludedFromWindowsMenu:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSWindow",
        b"setFrame:display:",
        {
            "arguments": {
                2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                3: {"type": "Z"},
            }
        },
    )
    r(
        b"NSWindow",
        b"setFrame:display:animate:",
        {
            "arguments": {
                2: {"type": "{CGRect={CGPoint=dd}{CGSize=dd}}"},
                3: {"type": "Z"},
                4: {"type": "Z"},
            }
        },
    )
    r(b"NSWindow", b"setFrameAutosaveName:", {"retval": {"type": "Z"}})
    r(b"NSWindow", b"setFrameOrigin:", {"arguments": {2: {"type": "{CGPoint=dd}"}}})
    r(
        b"NSWindow",
        b"setFrameTopLeftPoint:",
        {"arguments": {2: {"type": "{CGPoint=dd}"}}},
    )
    r(b"NSWindow", b"setFrameUsingName:", {"retval": {"type": "Z"}})
    r(
        b"NSWindow",
        b"setFrameUsingName:force:",
        {"retval": {"type": "Z"}, "arguments": {3: {"type": "Z"}}},
    )
    r(b"NSWindow", b"setHasShadow:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSWindow", b"setHidesOnDeactivate:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSWindow", b"setIgnoresMouseEvents:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSWindow", b"setIsMiniaturized:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSWindow", b"setIsVisible:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSWindow", b"setIsZoomed:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSWindow", b"setMaxSize:", {"arguments": {2: {"type": "{CGSize=dd}"}}})
    r(b"NSWindow", b"setMinSize:", {"arguments": {2: {"type": "{CGSize=dd}"}}})
    r(b"NSWindow", b"setMovable:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSWindow", b"setMovableByWindowBackground:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSWindow", b"setOneShot:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSWindow", b"setOpaque:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSWindow",
        b"setPreservesContentDuringLiveResize:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(
        b"NSWindow",
        b"setPreventsApplicationTerminationWhenModal:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(b"NSWindow", b"setReleasedWhenClosed:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSWindow", b"setResizeIncrements:", {"arguments": {2: {"type": "{CGSize=dd}"}}})
    r(b"NSWindow", b"setRestorable:", {"arguments": {2: {"type": b"Z"}}})
    r(b"NSWindow", b"setShowsResizeIndicator:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSWindow", b"setShowsToolbarButton:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSWindow",
        b"setTitlebarAppearsTransparent:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(b"NSWindow", b"setViewsNeedDisplay:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSWindow", b"showsResizeIndicator", {"retval": {"type": "Z"}})
    r(b"NSWindow", b"showsToolbarButton", {"retval": {"type": "Z"}})
    r(b"NSWindow", b"titlebarAppearsTransparent", {"retval": {"type": b"Z"}})
    r(
        b"NSWindow",
        b"trackEventsMatchingMask:timeout:mode:handler:",
        {
            "arguments": {
                5: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {
                            0: {"type": b"^v"},
                            1: {"type": b"@"},
                            2: {"type": b"o^Z"},
                        },
                    }
                }
            }
        },
    )
    r(
        b"NSWindow",
        b"transferWindowSharingToWindow:completionHandler:",
        {
            "arguments": {
                3: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {0: {"type": b"^v"}, 1: {"type": b"@"}},
                    }
                }
            }
        },
    )
    r(
        b"NSWindow",
        b"tryToPerform:with:",
        {"retval": {"type": "Z"}, "arguments": {2: {"sel_of_type": b"v@:@"}}},
    )
    r(b"NSWindow", b"useOptimizedDrawing:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSWindow", b"viewsNeedDisplay", {"retval": {"type": "Z"}})
    r(
        b"NSWindow",
        b"windowNumberAtPoint:belowWindowWithNumber:",
        {"arguments": {2: {"type": "{CGPoint=dd}"}}},
    )
    r(b"NSWindow", b"windowRef", {"retval": {"type": "^{OpaqueWindowPtr=}"}})
    r(b"NSWindow", b"worksWhenModal", {"retval": {"type": "Z"}})
    r(b"NSWindowController", b"isWindowLoaded", {"retval": {"type": "Z"}})
    r(b"NSWindowController", b"setDocumentEdited:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSWindowController",
        b"setShouldCascadeWindows:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(
        b"NSWindowController",
        b"setShouldCloseDocument:",
        {"arguments": {2: {"type": "Z"}}},
    )
    r(b"NSWindowController", b"shouldCascadeWindows", {"retval": {"type": "Z"}})
    r(b"NSWindowController", b"shouldCloseDocument", {"retval": {"type": "Z"}})
    r(b"NSWindowTabGroup", b"isOverviewVisible", {"retval": {"type": "Z"}})
    r(b"NSWindowTabGroup", b"isTabBarVisible", {"retval": {"type": "Z"}})
    r(b"NSWindowTabGroup", b"setOverviewVisible:", {"arguments": {2: {"type": "Z"}}})
    r(b"NSWindowTabGroup", b"setTabBarVisible:", {"arguments": {2: {"type": "Z"}}})
    r(
        b"NSWorkspace",
        b"accessibilityDisplayShouldDifferentiateWithoutColor",
        {"retval": {"type": b"Z"}},
    )
    r(
        b"NSWorkspace",
        b"accessibilityDisplayShouldIncreaseContrast",
        {"retval": {"type": b"Z"}},
    )
    r(
        b"NSWorkspace",
        b"accessibilityDisplayShouldInvertColors",
        {"retval": {"type": "Z"}},
    )
    r(
        b"NSWorkspace",
        b"accessibilityDisplayShouldReduceMotion",
        {"retval": {"type": "Z"}},
    )
    r(
        b"NSWorkspace",
        b"accessibilityDisplayShouldReduceTransparency",
        {"retval": {"type": b"Z"}},
    )
    r(
        b"NSWorkspace",
        b"duplicateURLs:completionHandler:",
        {
            "arguments": {
                3: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {
                            0: {"type": b"^v"},
                            1: {"type": b"@"},
                            2: {"type": b"@"},
                        },
                    }
                }
            }
        },
    )
    r(b"NSWorkspace", b"fileSystemChanged", {"retval": {"type": "Z"}})
    r(b"NSWorkspace", b"filenameExtension:isValidForType:", {"retval": {"type": "Z"}})
    r(
        b"NSWorkspace",
        b"getFileSystemInfoForPath:isRemovable:isWritable:isUnmountable:description:type:",
        {
            "retval": {"type": "Z"},
            "arguments": {
                3: {"type": "^Z", "type_modifier": b"o"},
                4: {"type": "^Z", "type_modifier": b"o"},
                5: {"type": "^Z", "type_modifier": b"o"},
                6: {"type_modifier": b"o"},
                7: {"type_modifier": b"o"},
            },
        },
    )
    r(
        b"NSWorkspace",
        b"getInfoForFile:application:type:",
        {
            "retval": {"type": "Z"},
            "arguments": {3: {"type_modifier": b"o"}, 4: {"type_modifier": b"o"}},
        },
    )
    r(b"NSWorkspace", b"isFilePackageAtPath:", {"retval": {"type": "Z"}})
    r(b"NSWorkspace", b"isSwitchControlEnabled", {"retval": {"type": "Z"}})
    r(b"NSWorkspace", b"isVoiceOverEnabled", {"retval": {"type": "Z"}})
    r(
        b"NSWorkspace",
        b"launchAppWithBundleIdentifier:options:additionalEventParamDescriptor:launchIdentifier:",
        {"retval": {"type": "Z"}, "arguments": {5: {"type_modifier": b"o"}}},
    )
    r(b"NSWorkspace", b"launchApplication:", {"retval": {"type": "Z"}})
    r(
        b"NSWorkspace",
        b"launchApplication:showIcon:autolaunch:",
        {"retval": {"type": "Z"}, "arguments": {3: {"type": "Z"}, 4: {"type": "Z"}}},
    )
    r(
        b"NSWorkspace",
        b"launchApplicationAtURL:options:configuration:error:",
        {"arguments": {5: {"type_modifier": b"o"}}},
    )
    r(
        b"NSWorkspace",
        b"openApplicationAtURL:configuration:completionHandler:",
        {
            "arguments": {
                4: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {
                            0: {"type": b"^v"},
                            1: {"type": b"@"},
                            2: {"type": b"@"},
                        },
                    }
                }
            }
        },
    )
    r(b"NSWorkspace", b"openFile:", {"retval": {"type": "Z"}})
    r(
        b"NSWorkspace",
        b"openFile:fromImage:at:inView:",
        {"retval": {"type": "Z"}, "arguments": {4: {"type": "{CGPoint=dd}"}}},
    )
    r(b"NSWorkspace", b"openFile:withApplication:", {"retval": {"type": "Z"}})
    r(
        b"NSWorkspace",
        b"openFile:withApplication:andDeactivate:",
        {"retval": {"type": "Z"}, "arguments": {4: {"type": "Z"}}},
    )
    r(b"NSWorkspace", b"openTempFile:", {"retval": {"type": "Z"}})
    r(b"NSWorkspace", b"openURL:", {"retval": {"type": "Z"}})
    r(
        b"NSWorkspace",
        b"openURL:configuration:completionHandler:",
        {
            "arguments": {
                4: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {
                            0: {"type": b"^v"},
                            1: {"type": b"@"},
                            2: {"type": b"@"},
                        },
                    }
                }
            }
        },
    )
    r(
        b"NSWorkspace",
        b"openURL:options:configuration:error:",
        {"arguments": {5: {"type_modifier": b"o"}}},
    )
    r(
        b"NSWorkspace",
        b"openURLs:withAppBundleIdentifier:options:additionalEventParamDescriptor:launchIdentifiers:",
        {"retval": {"type": "Z"}, "arguments": {6: {"type_modifier": b"o"}}},
    )
    r(
        b"NSWorkspace",
        b"openURLs:withApplicationAtURL:configuration:completionHandler:",
        {
            "arguments": {
                5: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {
                            0: {"type": b"^v"},
                            1: {"type": b"@"},
                            2: {"type": b"@"},
                        },
                    }
                }
            }
        },
    )
    r(
        b"NSWorkspace",
        b"openURLs:withApplicationAtURL:options:configuration:error:",
        {"arguments": {6: {"type_modifier": b"o"}}},
    )
    r(
        b"NSWorkspace",
        b"performFileOperation:source:destination:files:tag:",
        {"retval": {"type": "Z"}, "arguments": {6: {"type_modifier": b"o"}}},
    )
    r(
        b"NSWorkspace",
        b"recycleURLs:completionHandler:",
        {
            "arguments": {
                3: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {
                            0: {"type": b"^v"},
                            1: {"type": b"@"},
                            2: {"type": b"@"},
                        },
                    }
                }
            }
        },
    )
    r(
        b"NSWorkspace",
        b"requestAuthorizationOfType:completionHandler:",
        {
            "arguments": {
                3: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {
                            0: {"type": b"^v"},
                            1: {"type": b"@"},
                            2: {"type": b"@"},
                        },
                    }
                }
            }
        },
    )
    r(
        b"NSWorkspace",
        b"selectFile:inFileViewerRootedAtPath:",
        {"retval": {"type": "Z"}},
    )
    r(
        b"NSWorkspace",
        b"setDefaultApplicationAtURL:toOpenContentType:completionHandler:",
        {
            "arguments": {
                4: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {0: {"type": b"^v"}, 1: {"type": b"@"}},
                    }
                }
            }
        },
    )
    r(
        b"NSWorkspace",
        b"setDefaultApplicationAtURL:toOpenContentTypeOfFileAtURL:completionHandler:",
        {
            "arguments": {
                4: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {0: {"type": b"^v"}, 1: {"type": b"@"}},
                    }
                }
            }
        },
    )
    r(
        b"NSWorkspace",
        b"setDefaultApplicationAtURL:toOpenFileAtURL:completionHandler:",
        {
            "arguments": {
                4: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {0: {"type": b"^v"}, 1: {"type": b"@"}},
                    }
                }
            }
        },
    )
    r(
        b"NSWorkspace",
        b"setDefaultApplicationAtURL:toOpenURLsWithScheme:completionHandler:",
        {
            "arguments": {
                4: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {0: {"type": b"^v"}, 1: {"type": b"@"}},
                    }
                }
            }
        },
    )
    r(
        b"NSWorkspace",
        b"setDesktopImageURL:forScreen:options:error:",
        {"retval": {"type": "Z"}, "arguments": {5: {"type_modifier": b"o"}}},
    )
    r(b"NSWorkspace", b"setIcon:forFile:options:", {"retval": {"type": "Z"}})
    r(b"NSWorkspace", b"showSearchResultsForQueryString:", {"retval": {"type": "Z"}})
    r(
        b"NSWorkspace",
        b"slideImage:from:to:",
        {
            "retval": {"type": "v"},
            "arguments": {3: {"type": "{CGPoint=dd}"}, 4: {"type": "{CGPoint=dd}"}},
        },
    )
    r(b"NSWorkspace", b"type:conformsToType:", {"retval": {"type": "Z"}})
    r(b"NSWorkspace", b"typeOfFile:error:", {"arguments": {3: {"type_modifier": b"o"}}})
    r(b"NSWorkspace", b"unmountAndEjectDeviceAtPath:", {"retval": {"type": "Z"}})
    r(
        b"NSWorkspace",
        b"unmountAndEjectDeviceAtURL:error:",
        {"retval": {"type": "Z"}, "arguments": {3: {"type_modifier": b"o"}}},
    )
    r(b"NSWorkspace", b"userDefaultsChanged", {"retval": {"type": "Z"}})
    r(b"NSWorkspaceOpenConfiguration", b"activates", {"retval": {"type": b"Z"}})
    r(b"NSWorkspaceOpenConfiguration", b"addsToRecentItems", {"retval": {"type": b"Z"}})
    r(
        b"NSWorkspaceOpenConfiguration",
        b"allowsRunningApplicationSubstitution",
        {"retval": {"type": b"Z"}},
    )
    r(
        b"NSWorkspaceOpenConfiguration",
        b"createsNewApplicationInstance",
        {"retval": {"type": b"Z"}},
    )
    r(b"NSWorkspaceOpenConfiguration", b"hides", {"retval": {"type": b"Z"}})
    r(b"NSWorkspaceOpenConfiguration", b"hidesOthers", {"retval": {"type": b"Z"}})
    r(b"NSWorkspaceOpenConfiguration", b"isForPrinting", {"retval": {"type": b"Z"}})
    r(
        b"NSWorkspaceOpenConfiguration",
        b"promptsUserIfNeeded",
        {"retval": {"type": b"Z"}},
    )
    r(
        b"NSWorkspaceOpenConfiguration",
        b"requiresUniversalLinks",
        {"retval": {"type": b"Z"}},
    )
    r(
        b"NSWorkspaceOpenConfiguration",
        b"setActivates:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(
        b"NSWorkspaceOpenConfiguration",
        b"setAddsToRecentItems:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(
        b"NSWorkspaceOpenConfiguration",
        b"setAllowsRunningApplicationSubstitution:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(
        b"NSWorkspaceOpenConfiguration",
        b"setCreatesNewApplicationInstance:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(
        b"NSWorkspaceOpenConfiguration",
        b"setForPrinting:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(b"NSWorkspaceOpenConfiguration", b"setHides:", {"arguments": {2: {"type": b"Z"}}})
    r(
        b"NSWorkspaceOpenConfiguration",
        b"setHidesOthers:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(
        b"NSWorkspaceOpenConfiguration",
        b"setPromptsUserIfNeeded:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(
        b"NSWorkspaceOpenConfiguration",
        b"setRequiresUniversalLinks:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(b"null", b"abortEditing", {"retval": {"type": b"Z"}})
    r(b"null", b"acceptsArrowKeys", {"retval": {"type": b"Z"}})
    r(b"null", b"acceptsBinary", {"retval": {"type": b"Z"}})
    r(b"null", b"acceptsFirstResponder", {"retval": {"type": b"Z"}})
    r(b"null", b"acceptsGlyphInfo", {"retval": {"type": b"Z"}})
    r(b"null", b"acceptsMouseMovedEvents", {"retval": {"type": b"Z"}})
    r(
        b"null",
        b"accessibilityDisplayShouldDifferentiateWithoutColor",
        {"retval": {"type": b"Z"}},
    )
    r(
        b"null",
        b"accessibilityDisplayShouldIncreaseContrast",
        {"retval": {"type": b"Z"}},
    )
    r(b"null", b"accessibilityDisplayShouldInvertColors", {"retval": {"type": b"Z"}})
    r(b"null", b"accessibilityDisplayShouldReduceMotion", {"retval": {"type": b"Z"}})
    r(
        b"null",
        b"accessibilityDisplayShouldReduceTransparency",
        {"retval": {"type": b"Z"}},
    )
    r(b"null", b"accessibilityIsAttributeSettable:", {"retval": {"type": b"Z"}})
    r(b"null", b"accessibilityIsIgnored", {"retval": {"type": b"Z"}})
    r(b"null", b"accessibilityNotifiesWhenDestroyed", {"retval": {"type": b"Z"}})
    r(
        b"null",
        b"accessibilitySetOverrideValue:forAttribute:",
        {"retval": {"type": b"Z"}},
    )
    r(b"null", b"addWindowsItem:title:filename:", {"arguments": {4: {"type": b"Z"}}})
    r(
        b"null",
        b"alertWithMessageText:defaultButton:alternateButton:otherButton:informativeTextWithFormat:",
        {"variadic": True},
    )
    r(b"null", b"allowsCharacterPickerTouchBarItem", {"retval": {"type": b"Z"}})
    r(b"null", b"allowsDocumentBackgroundColorChange", {"retval": {"type": b"Z"}})
    r(b"null", b"allowsEditingTextAttributes", {"retval": {"type": b"Z"}})
    r(b"null", b"allowsExpansionToolTips", {"retval": {"type": b"Z"}})
    r(b"null", b"allowsImageEditing", {"retval": {"type": b"Z"}})
    r(b"null", b"allowsMixedState", {"retval": {"type": b"Z"}})
    r(b"null", b"allowsTickMarkValuesOnly", {"retval": {"type": b"Z"}})
    r(b"null", b"allowsUndo", {"retval": {"type": b"Z"}})
    r(b"null", b"application:delegateHandlesKey:", {"retval": {"type": b"Z"}})
    r(b"null", b"areCursorRectsEnabled", {"retval": {"type": b"Z"}})
    r(b"null", b"arrangesAllSubviews", {"retval": {"type": b"Z"}})
    r(b"null", b"autoresizesAllColumnsToFit", {"retval": {"type": b"Z"}})
    r(b"null", b"booleanForKey:inTable:", {"retval": {"type": b"Z"}})
    r(b"null", b"cacheDepthMatchesImageDepth", {"retval": {"type": b"Z"}})
    r(b"null", b"cachesBezierPath", {"retval": {"type": b"Z"}})
    r(b"null", b"canBePreventedByGestureRecognizer:", {"retval": {"type": b"Z"}})
    r(b"null", b"canBecomeKeyView", {"retval": {"type": b"Z"}})
    r(b"null", b"canPreventGestureRecognizer:", {"retval": {"type": b"Z"}})
    r(b"null", b"canStoreColor", {"retval": {"type": b"Z"}})
    r(b"null", b"centersPlaceholder", {"retval": {"type": b"Z"}})
    r(b"null", b"changeWindowsItem:title:filename:", {"arguments": {4: {"type": b"Z"}}})
    r(b"null", b"commitEditing", {"retval": {"type": b"Z"}})
    r(
        b"null",
        b"commitEditingAndReturnError:",
        {"retval": {"type": b"Z"}, "arguments": {2: {"type_modifier": b"o"}}},
    )
    r(
        b"null",
        b"configurePersistentStoreCoordinatorForURL:ofType:error:",
        {"retval": {"type": b"Z"}, "arguments": {4: {"type_modifier": b"o"}}},
    )
    r(b"null", b"copiesOnScroll", {"retval": {"type": b"Z"}})
    r(b"null", b"displaysLinkToolTips", {"retval": {"type": b"Z"}})
    r(
        b"null",
        b"dragFile:fromRect:slideBack:event:",
        {"retval": {"type": b"Z"}, "arguments": {4: {"type": b"Z"}}},
    )
    r(
        b"null",
        b"dragImage:at:offset:event:pasteboard:source:slideBack:",
        {"arguments": {8: {"type": b"Z"}}},
    )
    r(
        b"null",
        b"dragPromisedFilesOfTypes:fromRect:source:slideBack:event:",
        {"retval": {"type": b"Z"}, "arguments": {5: {"type": b"Z"}}},
    )
    r(
        b"null",
        b"dragSelectionWithEvent:offset:slideBack:",
        {"retval": {"type": b"Z"}, "arguments": {4: {"type": b"Z"}}},
    )
    r(b"null", b"draggedImage:endedAt:deposited:", {"arguments": {4: {"type": b"Z"}}})
    r(
        b"null",
        b"draggingSourceOperationMaskForLocal:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(b"null", b"drawArrow:highlight:", {"arguments": {3: {"type": b"Z"}}})
    r(
        b"null",
        b"drawStatusBarBackgroundInRect:withHighlight:",
        {"arguments": {3: {"type": b"Z"}}},
    )
    r(b"null", b"drawsBackground", {"retval": {"type": b"Z"}})
    r(b"null", b"drawsGrid", {"retval": {"type": b"Z"}})
    r(b"null", b"enterFullScreenMode:withOptions:", {"retval": {"type": b"Z"}})
    r(
        b"null",
        b"enumerateIndexPathsWithOptions:usingBlock:",
        {
            "arguments": {
                3: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {
                            0: {"type": b"^v"},
                            1: {"type": b"@"},
                            2: {"type": b"o^Z"},
                        },
                    }
                }
            }
        },
    )
    r(
        b"null",
        b"fetchWithRequest:merge:error:",
        {
            "retval": {"type": b"Z"},
            "arguments": {3: {"type": b"Z"}, 4: {"type_modifier": b"o"}},
        },
    )
    r(b"null", b"fileSystemChanged", {"retval": {"type": b"Z"}})
    r(b"null", b"filenameExtension:isValidForType:", {"retval": {"type": b"Z"}})
    r(b"null", b"fontManager:willIncludeFont:", {"retval": {"type": b"Z"}})
    r(b"null", b"fontNamed:hasTraits:", {"retval": {"type": b"Z"}})
    r(b"null", b"getInfoForFile:application:type:", {"retval": {"type": b"Z"}})
    r(
        b"null",
        b"graphicsContextWithGraphicsPort:flipped:",
        {"arguments": {3: {"type": b"Z"}}},
    )
    r(b"null", b"hasAmbiguousLayout", {"retval": {"type": b"Z"}})
    r(b"null", b"hasCloseBox", {"retval": {"type": b"Z"}})
    r(b"null", b"hasEqualSpacing", {"retval": {"type": b"Z"}})
    r(b"null", b"hasHorizontalRuler", {"retval": {"type": b"Z"}})
    r(b"null", b"hasTitleBar", {"retval": {"type": b"Z"}})
    r(b"null", b"hasVerticalRuler", {"retval": {"type": b"Z"}})
    r(b"null", b"highlight:", {"arguments": {2: {"type": b"Z"}}})
    r(b"null", b"highlightMode", {"retval": {"type": b"Z"}})
    r(b"null", b"ignoreModifierKeysWhileDragging", {"retval": {"type": b"Z"}})
    r(b"null", b"ignoresMouseEvents", {"retval": {"type": b"Z"}})
    r(b"null", b"importsGraphics", {"retval": {"type": b"Z"}})
    r(
        b"null",
        b"insertCompletion:forPartialWordRange:movement:isFinal:",
        {"arguments": {5: {"type": b"Z"}}},
    )
    r(b"null", b"instantiateNibWithExternalNameTable:", {"retval": {"type": b"Z"}})
    r(b"null", b"instantiateNibWithOwner:topLevelObjects:", {"retval": {"type": b"Z"}})
    r(b"null", b"isAttached", {"retval": {"type": b"Z"}})
    r(b"null", b"isAutodisplay", {"retval": {"type": b"Z"}})
    r(b"null", b"isAutomaticDashSubstitutionEnabled", {"retval": {"type": b"Z"}})
    r(b"null", b"isAutomaticDataDetectionEnabled", {"retval": {"type": b"Z"}})
    r(b"null", b"isAutomaticLinkDetectionEnabled", {"retval": {"type": b"Z"}})
    r(b"null", b"isAutomaticQuoteSubstitutionEnabled", {"retval": {"type": b"Z"}})
    r(b"null", b"isAutomaticSpellingCorrectionEnabled", {"retval": {"type": b"Z"}})
    r(b"null", b"isAutomaticTextCompletionEnabled", {"retval": {"type": b"Z"}})
    r(b"null", b"isAutomaticTextReplacementEnabled", {"retval": {"type": b"Z"}})
    r(b"null", b"isCachedSeparately", {"retval": {"type": b"Z"}})
    r(b"null", b"isCoalescingUndo", {"retval": {"type": b"Z"}})
    r(b"null", b"isColor", {"retval": {"type": b"Z"}})
    r(b"null", b"isContinuousSpellCheckingEnabled", {"retval": {"type": b"Z"}})
    r(b"null", b"isDataRetained", {"retval": {"type": b"Z"}})
    r(b"null", b"isDrawingFindIndicator", {"retval": {"type": b"Z"}})
    r(b"null", b"isEditable", {"retval": {"type": b"Z"}})
    r(b"null", b"isEnabled", {"retval": {"type": b"Z"}})
    r(b"null", b"isEntryAcceptable:", {"retval": {"type": b"Z"}})
    r(b"null", b"isFieldEditor", {"retval": {"type": b"Z"}})
    r(b"null", b"isFlipped", {"retval": {"type": b"Z"}})
    r(b"null", b"isFloatingPanel", {"retval": {"type": b"Z"}})
    r(b"null", b"isFlushWindowDisabled", {"retval": {"type": b"Z"}})
    r(b"null", b"isFontAvailable:", {"retval": {"type": b"Z"}})
    r(b"null", b"isFullKeyboardAccessEnabled", {"retval": {"type": b"Z"}})
    r(b"null", b"isGrammarCheckingEnabled", {"retval": {"type": b"Z"}})
    r(b"null", b"isHorizontalContentSizeConstraintActive", {"retval": {"type": b"Z"}})
    r(b"null", b"isInFullScreenMode", {"retval": {"type": b"Z"}})
    r(b"null", b"isIncrementalSearchingEnabled", {"retval": {"type": b"Z"}})
    r(b"null", b"isKey:inTable:", {"retval": {"type": b"Z"}})
    r(b"null", b"isMiniaturizable", {"retval": {"type": b"Z"}})
    r(b"null", b"isModalPanel", {"retval": {"type": b"Z"}})
    r(b"null", b"isOneShot", {"retval": {"type": b"Z"}})
    r(b"null", b"isOutputStackInReverseOrder", {"retval": {"type": b"Z"}})
    r(b"null", b"isPaneSplitter", {"retval": {"type": b"Z"}})
    r(b"null", b"isRegisteredForRemoteNotifications", {"retval": {"type": b"Z"}})
    r(b"null", b"isResizable", {"retval": {"type": b"Z"}})
    r(b"null", b"isRestorable", {"retval": {"type": b"Z"}})
    r(b"null", b"isRichText", {"retval": {"type": b"Z"}})
    r(b"null", b"isRulerVisible", {"retval": {"type": b"Z"}})
    r(b"null", b"isSelectable", {"retval": {"type": b"Z"}})
    r(b"null", b"isSetOnMouseEntered", {"retval": {"type": b"Z"}})
    r(b"null", b"isSetOnMouseExited", {"retval": {"type": b"Z"}})
    r(b"null", b"isSwitchControlEnabled", {"retval": {"type": b"Z"}})
    r(b"null", b"isTornOff", {"retval": {"type": b"Z"}})
    r(b"null", b"isVertical", {"retval": {"type": b"Z"}})
    r(b"null", b"isVerticalContentSizeConstraintActive", {"retval": {"type": b"Z"}})
    r(b"null", b"isVoiceOverEnabled", {"retval": {"type": b"Z"}})
    r(b"null", b"isZoomable", {"retval": {"type": b"Z"}})
    r(b"null", b"knowsPageRange:", {"retval": {"type": b"Z"}})
    r(
        b"null",
        b"launchAppWithBundleIdentifier:options:additionalEventParamDescriptor:launchIdentifier:",
        {"retval": {"type": b"Z"}},
    )
    r(b"null", b"launchApplication:", {"retval": {"type": b"Z"}})
    r(
        b"null",
        b"launchApplication:showIcon:autolaunch:",
        {"retval": {"type": b"Z"}, "arguments": {3: {"type": b"Z"}, 4: {"type": b"Z"}}},
    )
    r(
        b"null",
        b"launchApplicationAtURL:options:configuration:error:",
        {"arguments": {5: {"type_modifier": b"o"}}},
    )
    r(
        b"null",
        b"layer:shouldInheritContentsScale:fromWindow:",
        {"retval": {"type": b"Z"}},
    )
    r(b"null", b"loadDataRepresentation:ofType:", {"retval": {"type": b"Z"}})
    r(b"null", b"loadFileWrapperRepresentation:ofType:", {"retval": {"type": b"Z"}})
    r(b"null", b"loadNibFile:externalNameTable:withZone:", {"retval": {"type": b"Z"}})
    r(b"null", b"loadNibNamed:owner:", {"retval": {"type": b"Z"}})
    r(b"null", b"loadNibNamed:owner:topLevelObjects:", {"retval": {"type": b"Z"}})
    r(b"null", b"makeWindowsPerform:inOrder:", {"arguments": {3: {"type": b"Z"}}})
    r(b"null", b"menuChangedMessagesEnabled", {"retval": {"type": b"Z"}})
    r(b"null", b"needsUpdateConstraints", {"retval": {"type": b"Z"}})
    r(
        b"null",
        b"nextEventMatchingMask:untilDate:inMode:dequeue:",
        {"arguments": {5: {"type": b"Z"}}},
    )
    r(
        b"null",
        b"openDocumentWithContentsOfFile:display:",
        {"arguments": {3: {"type": b"Z"}}},
    )
    r(
        b"null",
        b"openDocumentWithContentsOfURL:display:",
        {"arguments": {3: {"type": b"Z"}}},
    )
    r(
        b"null",
        b"openDocumentWithContentsOfURL:display:error:",
        {"arguments": {3: {"type": b"Z"}}},
    )
    r(b"null", b"openFile:", {"retval": {"type": b"Z"}})
    r(b"null", b"openFile:fromImage:at:inView:", {"retval": {"type": b"Z"}})
    r(b"null", b"openFile:withApplication:", {"retval": {"type": b"Z"}})
    r(
        b"null",
        b"openFile:withApplication:andDeactivate:",
        {"retval": {"type": b"Z"}, "arguments": {4: {"type": b"Z"}}},
    )
    r(b"null", b"openTempFile:", {"retval": {"type": b"Z"}})
    r(
        b"null",
        b"openURL:options:configuration:error:",
        {"arguments": {5: {"type_modifier": b"o"}}},
    )
    r(
        b"null",
        b"openURLs:withAppBundleIdentifier:options:additionalEventParamDescriptor:launchIdentifiers:",
        {"retval": {"type": b"Z"}},
    )
    r(
        b"null",
        b"openURLs:withApplicationAtURL:options:configuration:error:",
        {"arguments": {6: {"type_modifier": b"o"}}},
    )
    r(
        b"null",
        b"openUntitledDocumentOfType:display:",
        {"arguments": {3: {"type": b"Z"}}},
    )
    r(
        b"null",
        b"panel:compareFilename:with:caseSensitive:",
        {"arguments": {5: {"type": b"Z"}}},
    )
    r(b"null", b"panel:isValidFilename:", {"retval": {"type": b"Z"}})
    r(b"null", b"panel:shouldShowFilename:", {"retval": {"type": b"Z"}})
    r(
        b"null",
        b"performFileOperation:source:destination:files:tag:",
        {"retval": {"type": b"Z"}},
    )
    r(b"null", b"performMnemonic:", {"retval": {"type": b"Z"}})
    r(b"null", b"postEvent:atStart:", {"arguments": {3: {"type": b"Z"}}})
    r(b"null", b"presentError:", {"retval": {"type": b"Z"}})
    r(b"null", b"printShowingPrintPanel:", {"arguments": {2: {"type": b"Z"}}})
    r(
        b"null",
        b"printerWithName:domain:includeUnavailable:",
        {"arguments": {4: {"type": b"Z"}}},
    )
    r(b"null", b"readFromFile:ofType:", {"retval": {"type": b"Z"}})
    r(b"null", b"readFromURL:ofType:", {"retval": {"type": b"Z"}})
    r(b"null", b"readSelectionFromPasteboard:", {"retval": {"type": b"Z"}})
    r(b"null", b"readSelectionFromPasteboard:type:", {"retval": {"type": b"Z"}})
    r(b"null", b"rectForCancelButtonWhenCentered:", {"arguments": {2: {"type": b"Z"}}})
    r(b"null", b"rectForSearchButtonWhenCentered:", {"arguments": {2: {"type": b"Z"}}})
    r(b"null", b"rectForSearchTextWhenCentered:", {"arguments": {2: {"type": b"Z"}}})
    r(b"null", b"refusesFirstResponder", {"retval": {"type": b"Z"}})
    r(
        b"null",
        b"registerCloudKitShareWithPreparationHandler:",
        {
            "arguments": {
                2: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {0: {"type": b"^v"}, 1: {"type": b"@?"}},
                    }
                }
            }
        },
    )
    r(
        b"null",
        b"reopenDocumentForURL:withContentsOfURL:error:",
        {"retval": {"type": b"Z"}},
    )
    r(
        b"null",
        b"requestAuthorizationOfType:completionHandler:",
        {
            "arguments": {
                3: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {
                            0: {"type": b"^v"},
                            1: {"type": b"@"},
                            2: {"type": b"@"},
                        },
                    }
                }
            }
        },
    )
    r(b"null", b"requiresConstraintBasedLayout", {"retval": {"type": b"Z"}})
    r(
        b"null",
        b"restoreDocumentWindowWithIdentifier:state:completionHandler:",
        {
            "arguments": {
                4: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {
                            0: {"type": b"^v"},
                            1: {"type": b"@"},
                            2: {"type": b"@"},
                        },
                    }
                }
            }
        },
    )
    r(
        b"null",
        b"restoreWindowWithIdentifier:state:completionHandler:",
        {
            "retval": {"type": b"Z"},
            "arguments": {
                4: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {
                            0: {"type": b"^v"},
                            1: {"type": b"@"},
                            2: {"type": b"@"},
                        },
                    }
                }
            },
        },
    )
    r(b"null", b"revertToSavedFromFile:ofType:", {"retval": {"type": b"Z"}})
    r(b"null", b"revertToSavedFromURL:ofType:", {"retval": {"type": b"Z"}})
    r(b"null", b"rulerView:shouldAddMarker:", {"retval": {"type": b"Z"}})
    r(b"null", b"rulerView:shouldMoveMarker:", {"retval": {"type": b"Z"}})
    r(b"null", b"rulerView:shouldRemoveMarker:", {"retval": {"type": b"Z"}})
    r(b"null", b"rulersVisible", {"retval": {"type": b"Z"}})
    r(b"null", b"saveToURL:ofType:forSaveOperation:error:", {"retval": {"type": b"Z"}})
    r(b"null", b"scalesWhenResized", {"retval": {"type": b"Z"}})
    r(
        b"null",
        b"searchString:inUserInterfaceItemString:searchRange:foundRange:",
        {"retval": {"type": b"Z"}},
    )
    r(
        b"null",
        b"selectColumn:byExtendingSelection:",
        {"arguments": {3: {"type": b"Z"}}},
    )
    r(b"null", b"selectRow:byExtendingSelection:", {"arguments": {3: {"type": b"Z"}}})
    r(b"null", b"sendAction:to:from:", {"retval": {"type": b"Z"}})
    r(b"null", b"setAcceptsArrowKeys:", {"arguments": {2: {"type": b"Z"}}})
    r(b"null", b"setAcceptsGlyphInfo:", {"arguments": {2: {"type": b"Z"}}})
    r(b"null", b"setAcceptsMouseMovedEvents:", {"arguments": {2: {"type": b"Z"}}})
    r(
        b"null",
        b"setAllowsCharacterPickerTouchBarItem:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(
        b"null",
        b"setAllowsDocumentBackgroundColorChange:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(b"null", b"setAllowsEditingTextAttributes:", {"arguments": {2: {"type": b"Z"}}})
    r(b"null", b"setAllowsExpansionToolTips:", {"arguments": {2: {"type": b"Z"}}})
    r(b"null", b"setAllowsImageEditing:", {"arguments": {2: {"type": b"Z"}}})
    r(b"null", b"setAllowsMixedState:", {"arguments": {2: {"type": b"Z"}}})
    r(b"null", b"setAllowsTickMarkValuesOnly:", {"arguments": {2: {"type": b"Z"}}})
    r(b"null", b"setAllowsUndo:", {"arguments": {2: {"type": b"Z"}}})
    r(b"null", b"setArrangesAllSubviews:", {"arguments": {2: {"type": b"Z"}}})
    r(b"null", b"setAutodisplay:", {"arguments": {2: {"type": b"Z"}}})
    r(
        b"null",
        b"setAutomaticDashSubstitutionEnabled:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(b"null", b"setAutomaticDataDetectionEnabled:", {"arguments": {2: {"type": b"Z"}}})
    r(b"null", b"setAutomaticLinkDetectionEnabled:", {"arguments": {2: {"type": b"Z"}}})
    r(
        b"null",
        b"setAutomaticQuoteSubstitutionEnabled:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(
        b"null",
        b"setAutomaticSpellingCorrectionEnabled:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(
        b"null",
        b"setAutomaticTextCompletionEnabled:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(
        b"null",
        b"setAutomaticTextReplacementEnabled:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(b"null", b"setAutoresizesAllColumnsToFit:", {"arguments": {2: {"type": b"Z"}}})
    r(b"null", b"setCacheDepthMatchesImageDepth:", {"arguments": {2: {"type": b"Z"}}})
    r(b"null", b"setCachedSeparately:", {"arguments": {2: {"type": b"Z"}}})
    r(b"null", b"setCachesBezierPath:", {"arguments": {2: {"type": b"Z"}}})
    r(b"null", b"setCentersPlaceholder:", {"arguments": {2: {"type": b"Z"}}})
    r(
        b"null",
        b"setContinuousSpellCheckingEnabled:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(b"null", b"setCopiesOnScroll:", {"arguments": {2: {"type": b"Z"}}})
    r(b"null", b"setDataRetained:", {"arguments": {2: {"type": b"Z"}}})
    r(
        b"null",
        b"setDesktopImageURL:forScreen:options:error:",
        {"retval": {"type": b"Z"}, "arguments": {5: {"type_modifier": b"o"}}},
    )
    r(b"null", b"setDisplaysLinkToolTips:", {"arguments": {2: {"type": b"Z"}}})
    r(b"null", b"setDrawsBackground:", {"arguments": {2: {"type": b"Z"}}})
    r(b"null", b"setDrawsGrid:", {"arguments": {2: {"type": b"Z"}}})
    r(b"null", b"setEditable:", {"arguments": {2: {"type": b"Z"}}})
    r(b"null", b"setEnabled:", {"arguments": {2: {"type": b"Z"}}})
    r(b"null", b"setFieldEditor:", {"arguments": {2: {"type": b"Z"}}})
    r(b"null", b"setFlipped:", {"arguments": {2: {"type": b"Z"}}})
    r(
        b"null",
        b"setFloatingPointFormat:left:right:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(b"null", b"setGrammarCheckingEnabled:", {"arguments": {2: {"type": b"Z"}}})
    r(b"null", b"setHasEqualSpacing:", {"arguments": {2: {"type": b"Z"}}})
    r(b"null", b"setHasHorizontalRuler:", {"arguments": {2: {"type": b"Z"}}})
    r(b"null", b"setHasVerticalRuler:", {"arguments": {2: {"type": b"Z"}}})
    r(b"null", b"setHighlightMode:", {"arguments": {2: {"type": b"Z"}}})
    r(
        b"null",
        b"setHorizontalContentSizeConstraintActive:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(b"null", b"setIgnoresMouseEvents:", {"arguments": {2: {"type": b"Z"}}})
    r(b"null", b"setImportsGraphics:", {"arguments": {2: {"type": b"Z"}}})
    r(b"null", b"setIncrementalSearchingEnabled:", {"arguments": {2: {"type": b"Z"}}})
    r(b"null", b"setIsMiniaturized:", {"arguments": {2: {"type": b"Z"}}})
    r(b"null", b"setIsPaneSplitter:", {"arguments": {2: {"type": b"Z"}}})
    r(b"null", b"setIsVisible:", {"arguments": {2: {"type": b"Z"}}})
    r(b"null", b"setIsZoomed:", {"arguments": {2: {"type": b"Z"}}})
    r(b"null", b"setMenuChangedMessagesEnabled:", {"arguments": {2: {"type": b"Z"}}})
    r(b"null", b"setNeedsUpdateConstraints:", {"arguments": {2: {"type": b"Z"}}})
    r(b"null", b"setOnMouseEntered:", {"arguments": {2: {"type": b"Z"}}})
    r(b"null", b"setOnMouseExited:", {"arguments": {2: {"type": b"Z"}}})
    r(b"null", b"setOneShot:", {"arguments": {2: {"type": b"Z"}}})
    r(b"null", b"setRefusesFirstResponder:", {"arguments": {2: {"type": b"Z"}}})
    r(b"null", b"setResizable:", {"arguments": {2: {"type": b"Z"}}})
    r(b"null", b"setRestorable:", {"arguments": {2: {"type": b"Z"}}})
    r(b"null", b"setRichText:", {"arguments": {2: {"type": b"Z"}}})
    r(b"null", b"setRulerVisible:", {"arguments": {2: {"type": b"Z"}}})
    r(b"null", b"setRulersVisible:", {"arguments": {2: {"type": b"Z"}}})
    r(b"null", b"setScalesWhenResized:", {"arguments": {2: {"type": b"Z"}}})
    r(b"null", b"setSelectable:", {"arguments": {2: {"type": b"Z"}}})
    r(
        b"null",
        b"setSelectedRange:affinity:stillSelecting:",
        {"arguments": {4: {"type": b"Z"}}},
    )
    r(
        b"null",
        b"setSelectedRanges:affinity:stillSelecting:",
        {"arguments": {4: {"type": b"Z"}}},
    )
    r(b"null", b"setShouldAntialias:", {"arguments": {2: {"type": b"Z"}}})
    r(b"null", b"setShouldCreateUI:", {"arguments": {2: {"type": b"Z"}}})
    r(b"null", b"setShowPanels:", {"arguments": {2: {"type": b"Z"}}})
    r(b"null", b"setShowsFirstResponder:", {"arguments": {2: {"type": b"Z"}}})
    r(b"null", b"setShowsResizeIndicator:", {"arguments": {2: {"type": b"Z"}}})
    r(b"null", b"setSmartInsertDeleteEnabled:", {"arguments": {2: {"type": b"Z"}}})
    r(b"null", b"setTabKeyTraversesCells:", {"arguments": {2: {"type": b"Z"}}})
    r(
        b"null",
        b"setTranslatesAutoresizingMaskIntoConstraints:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(b"null", b"setUsesFindBar:", {"arguments": {2: {"type": b"Z"}}})
    r(b"null", b"setUsesFindPanel:", {"arguments": {2: {"type": b"Z"}}})
    r(b"null", b"setUsesFontPanel:", {"arguments": {2: {"type": b"Z"}}})
    r(b"null", b"setUsesInspectorBar:", {"arguments": {2: {"type": b"Z"}}})
    r(b"null", b"setUsesLazyFetching:", {"arguments": {2: {"type": b"Z"}}})
    r(
        b"null",
        b"setUsesRolloverButtonForSelection:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(b"null", b"setUsesRuler:", {"arguments": {2: {"type": b"Z"}}})
    r(b"null", b"setUsesSingleLineMode:", {"arguments": {2: {"type": b"Z"}}})
    r(
        b"null",
        b"setVerticalContentSizeConstraintActive:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(
        b"null",
        b"setWantsBestResolutionOpenGLSurface:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(
        b"null",
        b"setWantsExtendedDynamicRangeOpenGLSurface:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(b"null", b"shouldAntialias", {"retval": {"type": b"Z"}})
    r(
        b"null",
        b"shouldBeRequiredToFailByGestureRecognizer:",
        {"retval": {"type": b"Z"}},
    )
    r(
        b"null",
        b"shouldChangeTextInRange:replacementString:",
        {"retval": {"type": b"Z"}},
    )
    r(
        b"null",
        b"shouldChangeTextInRanges:replacementStrings:",
        {"retval": {"type": b"Z"}},
    )
    r(b"null", b"shouldCreateUI", {"retval": {"type": b"Z"}})
    r(b"null", b"shouldDrawColor", {"retval": {"type": b"Z"}})
    r(b"null", b"shouldFocusCell:atColumn:row:", {"retval": {"type": b"Z"}})
    r(b"null", b"shouldInvalidateLayoutForBoundsChange:", {"retval": {"type": b"Z"}})
    r(
        b"null",
        b"shouldInvalidateLayoutForPreferredLayoutAttributes:withOriginalAttributes:",
        {"retval": {"type": b"Z"}},
    )
    r(b"null", b"shouldRequireFailureOfGestureRecognizer:", {"retval": {"type": b"Z"}})
    r(
        b"null",
        b"showDefinitionForAttributedString:range:options:baselineOriginProvider:",
        {
            "arguments": {
                5: {
                    "callable": {
                        "retval": {"type": b"{CGPoint=dd}"},
                        "arguments": {
                            0: {"type": b"^v"},
                            1: {"type": b"{_NSRange=QQ}"},
                        },
                    }
                }
            }
        },
    )
    r(b"null", b"showPanels", {"retval": {"type": b"Z"}})
    r(b"null", b"showsFirstResponder", {"retval": {"type": b"Z"}})
    r(b"null", b"showsResizeIndicator", {"retval": {"type": b"Z"}})
    r(b"null", b"smartInsertDeleteEnabled", {"retval": {"type": b"Z"}})
    r(b"null", b"tabKeyTraversesCells", {"retval": {"type": b"Z"}})
    r(b"null", b"tableView:writeRows:toPasteboard:", {"retval": {"type": b"Z"}})
    r(b"null", b"textShouldBeginEditing:", {"retval": {"type": b"Z"}})
    r(b"null", b"textShouldEndEditing:", {"retval": {"type": b"Z"}})
    r(
        b"null",
        b"trackEventsMatchingMask:timeout:mode:handler:",
        {
            "arguments": {
                5: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {
                            0: {"type": b"^v"},
                            1: {"type": b"@"},
                            2: {"type": b"o^Z"},
                        },
                    }
                }
            }
        },
    )
    r(
        b"null",
        b"transitionFromViewController:toViewController:options:completionHandler:",
        {
            "arguments": {
                5: {
                    "callable": {
                        "retval": {"type": b"v"},
                        "arguments": {0: {"type": b"^v"}},
                    }
                }
            }
        },
    )
    r(b"null", b"translatesAutoresizingMaskIntoConstraints", {"retval": {"type": b"Z"}})
    r(b"null", b"tryToPerform:with:", {"retval": {"type": b"Z"}})
    r(b"null", b"type:conformsToType:", {"retval": {"type": b"Z"}})
    r(
        b"null",
        b"updateInsertionPointStateAndRestartTimer:",
        {"arguments": {2: {"type": b"Z"}}},
    )
    r(b"null", b"useOptimizedDrawing:", {"arguments": {2: {"type": b"Z"}}})
    r(b"null", b"userDefaultsChanged", {"retval": {"type": b"Z"}})
    r(b"null", b"usesFindBar", {"retval": {"type": b"Z"}})
    r(b"null", b"usesFindPanel", {"retval": {"type": b"Z"}})
    r(b"null", b"usesFontPanel", {"retval": {"type": b"Z"}})
    r(b"null", b"usesInspectorBar", {"retval": {"type": b"Z"}})
    r(b"null", b"usesLazyFetching", {"retval": {"type": b"Z"}})
    r(b"null", b"usesRolloverButtonForSelection", {"retval": {"type": b"Z"}})
    r(b"null", b"usesRuler", {"retval": {"type": b"Z"}})
    r(b"null", b"usesSingleLineMode", {"retval": {"type": b"Z"}})
    r(b"null", b"validateMenuItem:", {"retval": {"type": b"Z"}})
    r(b"null", b"validateProposedFirstResponder:forEvent:", {"retval": {"type": b"Z"}})
    r(b"null", b"wantsBestResolutionOpenGLSurface", {"retval": {"type": b"Z"}})
    r(b"null", b"wantsExtendedDynamicRangeOpenGLSurface", {"retval": {"type": b"Z"}})
    r(b"null", b"wantsNotificationForMarkedText", {"retval": {"type": b"Z"}})
    r(b"null", b"writeFileContents:", {"retval": {"type": b"Z"}})
    r(b"null", b"writeFileWrapper:", {"retval": {"type": b"Z"}})
    r(b"null", b"writeSelectionToPasteboard:type:", {"retval": {"type": b"Z"}})
    r(b"null", b"writeSelectionToPasteboard:types:", {"retval": {"type": b"Z"}})
    r(b"null", b"writeToFile:ofType:", {"retval": {"type": b"Z"}})
    r(
        b"null",
        b"writeToFile:ofType:originalFile:saveOperation:",
        {"retval": {"type": b"Z"}},
    )
    r(b"null", b"writeToURL:ofType:", {"retval": {"type": b"Z"}})
    r(
        b"null",
        b"writeWithBackupToFile:ofType:saveOperation:",
        {"retval": {"type": b"Z"}},
    )
finally:
    objc._updatingMetadata(False)

objc.registerNewKeywordsFromSelector("CIColor", b"initWithColor:")
objc.registerNewKeywordsFromSelector("CIImage", b"initWithBitmapImageRep:")
objc.registerNewKeywordsFromSelector(
    "NSAccessibilityCustomAction", b"initWithName:handler:"
)
objc.registerNewKeywordsFromSelector(
    "NSAccessibilityCustomAction", b"initWithName:target:selector:"
)
objc.registerNewKeywordsFromSelector(
    "NSAccessibilityCustomRotor", b"initWithLabel:itemSearchDelegate:"
)
objc.registerNewKeywordsFromSelector(
    "NSAccessibilityCustomRotor", b"initWithRotorType:itemSearchDelegate:"
)
objc.registerNewKeywordsFromSelector(
    "NSAccessibilityCustomRotorItemResult", b"initWithItemLoadingToken:customLabel:"
)
objc.registerNewKeywordsFromSelector(
    "NSAccessibilityCustomRotorItemResult", b"initWithTargetElement:"
)
objc.registerNewKeywordsFromSelector("NSAnimation", b"initWithCoder:")
objc.registerNewKeywordsFromSelector("NSAnimation", b"initWithDuration:animationCurve:")
objc.registerNewKeywordsFromSelector("NSAppearance", b"initWithAppearanceNamed:bundle:")
objc.registerNewKeywordsFromSelector("NSAppearance", b"initWithCoder:")
objc.registerNewKeywordsFromSelector(
    "NSAttributedString", b"initWithData:options:documentAttributes:error:"
)
objc.registerNewKeywordsFromSelector(
    "NSAttributedString", b"initWithDocFormat:documentAttributes:"
)
objc.registerNewKeywordsFromSelector(
    "NSAttributedString", b"initWithHTML:baseURL:documentAttributes:"
)
objc.registerNewKeywordsFromSelector(
    "NSAttributedString", b"initWithHTML:documentAttributes:"
)
objc.registerNewKeywordsFromSelector(
    "NSAttributedString", b"initWithHTML:options:documentAttributes:"
)
objc.registerNewKeywordsFromSelector(
    "NSAttributedString", b"initWithPath:documentAttributes:"
)
objc.registerNewKeywordsFromSelector(
    "NSAttributedString", b"initWithRTF:documentAttributes:"
)
objc.registerNewKeywordsFromSelector(
    "NSAttributedString", b"initWithRTFD:documentAttributes:"
)
objc.registerNewKeywordsFromSelector(
    "NSAttributedString", b"initWithRTFDFileWrapper:documentAttributes:"
)
objc.registerNewKeywordsFromSelector(
    "NSAttributedString", b"initWithURL:documentAttributes:"
)
objc.registerNewKeywordsFromSelector(
    "NSAttributedString", b"initWithURL:options:documentAttributes:error:"
)
objc.registerNewKeywordsFromSelector(
    "NSBitmapImageRep",
    b"initWithBitmapDataPlanes:pixelsWide:pixelsHigh:bitsPerSample:samplesPerPixel:hasAlpha:isPlanar:colorSpaceName:bitmapFormat:bytesPerRow:bitsPerPixel:",
)
objc.registerNewKeywordsFromSelector(
    "NSBitmapImageRep",
    b"initWithBitmapDataPlanes:pixelsWide:pixelsHigh:bitsPerSample:samplesPerPixel:hasAlpha:isPlanar:colorSpaceName:bytesPerRow:bitsPerPixel:",
)
objc.registerNewKeywordsFromSelector("NSBitmapImageRep", b"initWithCGImage:")
objc.registerNewKeywordsFromSelector("NSBitmapImageRep", b"initWithCIImage:")
objc.registerNewKeywordsFromSelector("NSBitmapImageRep", b"initWithData:")
objc.registerNewKeywordsFromSelector("NSBitmapImageRep", b"initWithFocusedViewRect:")
objc.registerNewKeywordsFromSelector("NSBrowserCell", b"initImageCell:")
objc.registerNewKeywordsFromSelector("NSBrowserCell", b"initTextCell:")
objc.registerNewKeywordsFromSelector("NSBrowserCell", b"initWithCoder:")
objc.registerNewKeywordsFromSelector("NSButtonCell", b"initImageCell:")
objc.registerNewKeywordsFromSelector("NSButtonCell", b"initTextCell:")
objc.registerNewKeywordsFromSelector("NSButtonCell", b"initWithCoder:")
objc.registerNewKeywordsFromSelector("NSCIImageRep", b"initWithCIImage:")
objc.registerNewKeywordsFromSelector(
    "NSCachedImageRep", b"initWithSize:depth:separate:alpha:"
)
objc.registerNewKeywordsFromSelector("NSCachedImageRep", b"initWithWindow:rect:")
objc.registerNewKeywordsFromSelector("NSCell", b"initImageCell:")
objc.registerNewKeywordsFromSelector("NSCell", b"initTextCell:")
objc.registerNewKeywordsFromSelector("NSCell", b"initWithCoder:")
objc.registerNewKeywordsFromSelector(
    "NSCollectionViewCompositionalLayout", b"initWithSection:"
)
objc.registerNewKeywordsFromSelector(
    "NSCollectionViewCompositionalLayout", b"initWithSection:configuration:"
)
objc.registerNewKeywordsFromSelector(
    "NSCollectionViewCompositionalLayout", b"initWithSectionProvider:"
)
objc.registerNewKeywordsFromSelector(
    "NSCollectionViewCompositionalLayout", b"initWithSectionProvider:configuration:"
)
objc.registerNewKeywordsFromSelector(
    "NSCollectionViewDiffableDataSource", b"initWithCollectionView:itemProvider:"
)
objc.registerNewKeywordsFromSelector(
    "NSCollectionViewTransitionLayout", b"initWithCurrentLayout:nextLayout:"
)
objc.registerNewKeywordsFromSelector("NSColor", b"initWithCoder:")
objc.registerNewKeywordsFromSelector("NSColorList", b"initWithName:")
objc.registerNewKeywordsFromSelector("NSColorList", b"initWithName:fromFile:")
objc.registerNewKeywordsFromSelector("NSColorPicker", b"initWithPickerMask:colorPanel:")
objc.registerNewKeywordsFromSelector("NSColorSpace", b"initWithCGColorSpace:")
objc.registerNewKeywordsFromSelector("NSColorSpace", b"initWithColorSyncProfile:")
objc.registerNewKeywordsFromSelector("NSColorSpace", b"initWithICCProfileData:")
objc.registerNewKeywordsFromSelector("NSControl", b"initWithCoder:")
objc.registerNewKeywordsFromSelector("NSControl", b"initWithFrame:")
objc.registerNewKeywordsFromSelector("NSController", b"initWithCoder:")
objc.registerNewKeywordsFromSelector("NSCursor", b"initWithCoder:")
objc.registerNewKeywordsFromSelector(
    "NSCursor", b"initWithImage:foregroundColorHint:backgroundColorHint:hotSpot:"
)
objc.registerNewKeywordsFromSelector("NSCursor", b"initWithImage:hotSpot:")
objc.registerNewKeywordsFromSelector(
    "NSCustomImageRep", b"initWithDrawSelector:delegate:"
)
objc.registerNewKeywordsFromSelector(
    "NSCustomImageRep", b"initWithSize:flipped:drawingHandler:"
)
objc.registerNewKeywordsFromSelector("NSDataAsset", b"initWithName:")
objc.registerNewKeywordsFromSelector("NSDataAsset", b"initWithName:bundle:")
objc.registerNewKeywordsFromSelector("NSDatePickerCell", b"initImageCell:")
objc.registerNewKeywordsFromSelector("NSDatePickerCell", b"initTextCell:")
objc.registerNewKeywordsFromSelector("NSDatePickerCell", b"initWithCoder:")
objc.registerNewKeywordsFromSelector(
    "NSDocument", b"initForURL:withContentsOfURL:ofType:error:"
)
objc.registerNewKeywordsFromSelector("NSDocument", b"initWithContentsOfFile:ofType:")
objc.registerNewKeywordsFromSelector("NSDocument", b"initWithContentsOfURL:ofType:")
objc.registerNewKeywordsFromSelector(
    "NSDocument", b"initWithContentsOfURL:ofType:error:"
)
objc.registerNewKeywordsFromSelector("NSDocument", b"initWithType:error:")
objc.registerNewKeywordsFromSelector("NSDocumentController", b"initWithCoder:")
objc.registerNewKeywordsFromSelector("NSDraggingImageComponent", b"initWithKey:")
objc.registerNewKeywordsFromSelector("NSDraggingItem", b"initWithPasteboardWriter:")
objc.registerNewKeywordsFromSelector("NSDrawer", b"initWithContentSize:preferredEdge:")
objc.registerNewKeywordsFromSelector("NSEPSImageRep", b"initWithData:")
objc.registerNewKeywordsFromSelector(
    "NSFilePromiseProvider", b"initWithFileType:delegate:"
)
objc.registerNewKeywordsFromSelector("NSFileWrapper", b"initDirectoryWithFileWrappers:")
objc.registerNewKeywordsFromSelector("NSFileWrapper", b"initRegularFileWithContents:")
objc.registerNewKeywordsFromSelector(
    "NSFileWrapper", b"initSymbolicLinkWithDestination:"
)
objc.registerNewKeywordsFromSelector(
    "NSFileWrapper", b"initSymbolicLinkWithDestinationURL:"
)
objc.registerNewKeywordsFromSelector("NSFileWrapper", b"initWithPath:")
objc.registerNewKeywordsFromSelector(
    "NSFileWrapper", b"initWithSerializedRepresentation:"
)
objc.registerNewKeywordsFromSelector("NSFileWrapper", b"initWithURL:options:error:")
objc.registerNewKeywordsFromSelector(
    "NSFontAssetRequest", b"initWithFontDescriptors:options:"
)
objc.registerNewKeywordsFromSelector("NSFontDescriptor", b"initWithFontAttributes:")
objc.registerNewKeywordsFromSelector("NSFormCell", b"initImageCell:")
objc.registerNewKeywordsFromSelector("NSFormCell", b"initTextCell:")
objc.registerNewKeywordsFromSelector("NSFormCell", b"initWithCoder:")
objc.registerNewKeywordsFromSelector("NSGestureRecognizer", b"initWithCoder:")
objc.registerNewKeywordsFromSelector("NSGestureRecognizer", b"initWithTarget:action:")
objc.registerNewKeywordsFromSelector("NSGradient", b"initWithCoder:")
objc.registerNewKeywordsFromSelector("NSGradient", b"initWithColors:")
objc.registerNewKeywordsFromSelector(
    "NSGradient", b"initWithColors:atLocations:colorSpace:"
)
objc.registerNewKeywordsFromSelector("NSGradient", b"initWithColorsAndLocations:")
objc.registerNewKeywordsFromSelector(
    "NSGradient", b"initWithStartingColor:endingColor:"
)
objc.registerNewKeywordsFromSelector("NSGridView", b"initWithCoder:")
objc.registerNewKeywordsFromSelector("NSGridView", b"initWithFrame:")
objc.registerNewKeywordsFromSelector("NSImage", b"initByReferencingFile:")
objc.registerNewKeywordsFromSelector("NSImage", b"initByReferencingURL:")
objc.registerNewKeywordsFromSelector("NSImage", b"initWithCGImage:size:")
objc.registerNewKeywordsFromSelector("NSImage", b"initWithCoder:")
objc.registerNewKeywordsFromSelector("NSImage", b"initWithContentsOfFile:")
objc.registerNewKeywordsFromSelector("NSImage", b"initWithContentsOfURL:")
objc.registerNewKeywordsFromSelector("NSImage", b"initWithData:")
objc.registerNewKeywordsFromSelector("NSImage", b"initWithDataIgnoringOrientation:")
objc.registerNewKeywordsFromSelector("NSImage", b"initWithIconRef:")
objc.registerNewKeywordsFromSelector("NSImage", b"initWithPasteboard:")
objc.registerNewKeywordsFromSelector("NSImage", b"initWithSize:")
objc.registerNewKeywordsFromSelector("NSImageRep", b"initWithCoder:")
objc.registerNewKeywordsFromSelector("NSInputManager", b"initWithName:host:")
objc.registerNewKeywordsFromSelector("NSInputServer", b"initWithDelegate:name:")
objc.registerNewKeywordsFromSelector("NSLayoutManager", b"initWithCoder:")
objc.registerNewKeywordsFromSelector(
    "NSLevelIndicatorCell", b"initWithLevelIndicatorStyle:"
)
objc.registerNewKeywordsFromSelector("NSMatrix", b"initWithFrame:")
objc.registerNewKeywordsFromSelector(
    "NSMatrix", b"initWithFrame:mode:cellClass:numberOfRows:numberOfColumns:"
)
objc.registerNewKeywordsFromSelector(
    "NSMatrix", b"initWithFrame:mode:prototype:numberOfRows:numberOfColumns:"
)
objc.registerNewKeywordsFromSelector("NSMenu", b"initWithCoder:")
objc.registerNewKeywordsFromSelector("NSMenu", b"initWithTitle:")
objc.registerNewKeywordsFromSelector("NSMenuItem", b"initWithCoder:")
objc.registerNewKeywordsFromSelector(
    "NSMenuItem", b"initWithTitle:action:keyEquivalent:"
)
objc.registerNewKeywordsFromSelector("NSMenuItemBadge", b"initWithCount:")
objc.registerNewKeywordsFromSelector("NSMenuItemBadge", b"initWithCount:type:")
objc.registerNewKeywordsFromSelector("NSMenuItemBadge", b"initWithString:")
objc.registerNewKeywordsFromSelector("NSMenuItemCell", b"initTextCell:")
objc.registerNewKeywordsFromSelector("NSMenuItemCell", b"initWithCoder:")
objc.registerNewKeywordsFromSelector("NSMovie", b"initWithCoder:")
objc.registerNewKeywordsFromSelector("NSMovie", b"initWithMovie:")
objc.registerNewKeywordsFromSelector("NSNib", b"initWithContentsOfURL:")
objc.registerNewKeywordsFromSelector("NSNib", b"initWithNibData:bundle:")
objc.registerNewKeywordsFromSelector("NSNib", b"initWithNibNamed:bundle:")
objc.registerNewKeywordsFromSelector("NSObjectController", b"initWithCoder:")
objc.registerNewKeywordsFromSelector("NSObjectController", b"initWithContent:")
objc.registerNewKeywordsFromSelector("NSOpenGLContext", b"initWithCGLContextObj:")
objc.registerNewKeywordsFromSelector("NSOpenGLContext", b"initWithFormat:shareContext:")
objc.registerNewKeywordsFromSelector("NSOpenGLPixelBuffer", b"initWithCGLPBufferObj:")
objc.registerNewKeywordsFromSelector(
    "NSOpenGLPixelBuffer",
    b"initWithTextureTarget:textureInternalFormat:textureMaxMipMapLevel:pixelsWide:pixelsHigh:",
)
objc.registerNewKeywordsFromSelector("NSOpenGLPixelFormat", b"initWithAttributes:")
objc.registerNewKeywordsFromSelector(
    "NSOpenGLPixelFormat", b"initWithCGLPixelFormatObj:"
)
objc.registerNewKeywordsFromSelector("NSOpenGLPixelFormat", b"initWithData:")
objc.registerNewKeywordsFromSelector("NSOpenGLView", b"initWithFrame:pixelFormat:")
objc.registerNewKeywordsFromSelector("NSPDFImageRep", b"initWithData:")
objc.registerNewKeywordsFromSelector("NSPICTImageRep", b"initWithData:")
objc.registerNewKeywordsFromSelector("NSPopUpButton", b"initWithFrame:pullsDown:")
objc.registerNewKeywordsFromSelector("NSPopUpButtonCell", b"initTextCell:pullsDown:")
objc.registerNewKeywordsFromSelector("NSPopUpButtonCell", b"initWithCoder:")
objc.registerNewKeywordsFromSelector("NSPopover", b"initWithCoder:")
objc.registerNewKeywordsFromSelector(
    "NSPredicateEditorRowTemplate", b"initWithCompoundTypes:"
)
objc.registerNewKeywordsFromSelector(
    "NSPredicateEditorRowTemplate",
    b"initWithLeftExpressions:rightExpressionAttributeType:modifier:operators:options:",
)
objc.registerNewKeywordsFromSelector(
    "NSPredicateEditorRowTemplate",
    b"initWithLeftExpressions:rightExpressions:modifier:operators:options:",
)
objc.registerNewKeywordsFromSelector(
    "NSPressureConfiguration", b"initWithPressureBehavior:"
)
objc.registerNewKeywordsFromSelector(
    "NSPreviewRepresentingActivityItem", b"initWithItem:title:image:icon:"
)
objc.registerNewKeywordsFromSelector(
    "NSPreviewRepresentingActivityItem",
    b"initWithItem:title:imageProvider:iconProvider:",
)
objc.registerNewKeywordsFromSelector("NSPrintInfo", b"initWithCoder:")
objc.registerNewKeywordsFromSelector("NSPrintInfo", b"initWithDictionary:")
objc.registerNewKeywordsFromSelector("NSResponder", b"initWithCoder:")
objc.registerNewKeywordsFromSelector("NSRulerMarker", b"initWithCoder:")
objc.registerNewKeywordsFromSelector(
    "NSRulerMarker", b"initWithRulerView:markerLocation:image:imageOrigin:"
)
objc.registerNewKeywordsFromSelector("NSRulerView", b"initWithCoder:")
objc.registerNewKeywordsFromSelector("NSRulerView", b"initWithScrollView:orientation:")
objc.registerNewKeywordsFromSelector("NSScrollView", b"initWithCoder:")
objc.registerNewKeywordsFromSelector("NSScrollView", b"initWithFrame:")
objc.registerNewKeywordsFromSelector("NSScrubber", b"initWithCoder:")
objc.registerNewKeywordsFromSelector("NSScrubber", b"initWithFrame:")
objc.registerNewKeywordsFromSelector("NSScrubberLayout", b"initWithCoder:")
objc.registerNewKeywordsFromSelector("NSScrubberProportionalLayout", b"initWithCoder:")
objc.registerNewKeywordsFromSelector(
    "NSScrubberProportionalLayout", b"initWithNumberOfVisibleItems:"
)
objc.registerNewKeywordsFromSelector("NSScrubberSelectionStyle", b"initWithCoder:")
objc.registerNewKeywordsFromSelector("NSSearchFieldCell", b"initImageCell:")
objc.registerNewKeywordsFromSelector("NSSearchFieldCell", b"initTextCell:")
objc.registerNewKeywordsFromSelector("NSSearchFieldCell", b"initWithCoder:")
objc.registerNewKeywordsFromSelector(
    "NSSharingService", b"initWithTitle:image:alternateImage:handler:"
)
objc.registerNewKeywordsFromSelector("NSSharingServicePicker", b"initWithItems:")
objc.registerNewKeywordsFromSelector("NSSound", b"initWithContentsOfFile:byReference:")
objc.registerNewKeywordsFromSelector("NSSound", b"initWithContentsOfURL:byReference:")
objc.registerNewKeywordsFromSelector("NSSound", b"initWithData:")
objc.registerNewKeywordsFromSelector("NSSound", b"initWithPasteboard:")
objc.registerNewKeywordsFromSelector("NSSpeechSynthesizer", b"initWithVoice:")
objc.registerNewKeywordsFromSelector(
    "NSStoryboardSegue", b"initWithIdentifier:source:destination:"
)
objc.registerNewKeywordsFromSelector("NSTabViewItem", b"initWithIdentifier:")
objc.registerNewKeywordsFromSelector("NSTableColumn", b"initWithCoder:")
objc.registerNewKeywordsFromSelector("NSTableColumn", b"initWithIdentifier:")
objc.registerNewKeywordsFromSelector("NSTableView", b"initWithCoder:")
objc.registerNewKeywordsFromSelector("NSTableView", b"initWithFrame:")
objc.registerNewKeywordsFromSelector(
    "NSTableViewDiffableDataSource", b"initWithTableView:cellProvider:"
)
objc.registerNewKeywordsFromSelector("NSText", b"initWithCoder:")
objc.registerNewKeywordsFromSelector("NSText", b"initWithFrame:")
objc.registerNewKeywordsFromSelector(
    "NSTextAlternatives", b"initWithPrimaryString:alternativeStrings:"
)
objc.registerNewKeywordsFromSelector("NSTextAttachment", b"initWithData:ofType:")
objc.registerNewKeywordsFromSelector("NSTextAttachment", b"initWithFileWrapper:")
objc.registerNewKeywordsFromSelector(
    "NSTextAttachmentViewProvider",
    b"initWithTextAttachment:parentView:textLayoutManager:location:",
)
objc.registerNewKeywordsFromSelector("NSTextCheckingController", b"initWithClient:")
objc.registerNewKeywordsFromSelector("NSTextContainer", b"initWithCoder:")
objc.registerNewKeywordsFromSelector("NSTextContainer", b"initWithContainerSize:")
objc.registerNewKeywordsFromSelector("NSTextContainer", b"initWithSize:")
objc.registerNewKeywordsFromSelector("NSTextContentManager", b"initWithCoder:")
objc.registerNewKeywordsFromSelector("NSTextElement", b"initWithTextContentManager:")
objc.registerNewKeywordsFromSelector("NSTextFieldCell", b"initImageCell:")
objc.registerNewKeywordsFromSelector("NSTextFieldCell", b"initTextCell:")
objc.registerNewKeywordsFromSelector("NSTextFieldCell", b"initWithCoder:")
objc.registerNewKeywordsFromSelector("NSTextFinder", b"initWithCoder:")
objc.registerNewKeywordsFromSelector("NSTextInputContext", b"initWithClient:")
objc.registerNewKeywordsFromSelector("NSTextLayoutFragment", b"initWithCoder:")
objc.registerNewKeywordsFromSelector(
    "NSTextLayoutFragment", b"initWithTextElement:range:"
)
objc.registerNewKeywordsFromSelector("NSTextLayoutManager", b"initWithCoder:")
objc.registerNewKeywordsFromSelector(
    "NSTextLineFragment", b"initWithAttributedString:range:"
)
objc.registerNewKeywordsFromSelector("NSTextLineFragment", b"initWithCoder:")
objc.registerNewKeywordsFromSelector(
    "NSTextLineFragment", b"initWithString:attributes:range:"
)
objc.registerNewKeywordsFromSelector("NSTextList", b"initWithCoder:")
objc.registerNewKeywordsFromSelector("NSTextList", b"initWithMarkerFormat:options:")
objc.registerNewKeywordsFromSelector(
    "NSTextList", b"initWithMarkerFormat:options:startingItemNumber:"
)
objc.registerNewKeywordsFromSelector("NSTextListElement", b"initWithAttributedString:")
objc.registerNewKeywordsFromSelector(
    "NSTextListElement",
    b"initWithParentElement:textList:contents:markerAttributes:childElements:",
)
objc.registerNewKeywordsFromSelector("NSTextParagraph", b"initWithAttributedString:")
objc.registerNewKeywordsFromSelector("NSTextRange", b"initWithLocation:")
objc.registerNewKeywordsFromSelector("NSTextRange", b"initWithLocation:endLocation:")
objc.registerNewKeywordsFromSelector("NSTextSelection", b"initWithCoder:")
objc.registerNewKeywordsFromSelector("NSTextSelection", b"initWithLocation:affinity:")
objc.registerNewKeywordsFromSelector(
    "NSTextSelection", b"initWithRange:affinity:granularity:"
)
objc.registerNewKeywordsFromSelector(
    "NSTextSelection", b"initWithRanges:affinity:granularity:"
)
objc.registerNewKeywordsFromSelector(
    "NSTextSelectionNavigation", b"initWithDataSource:"
)
objc.registerNewKeywordsFromSelector(
    "NSTextTab", b"initWithTextAlignment:location:options:"
)
objc.registerNewKeywordsFromSelector("NSTextTab", b"initWithType:location:")
objc.registerNewKeywordsFromSelector(
    "NSTextTableBlock", b"initWithTable:startingRow:rowSpan:startingColumn:columnSpan:"
)
objc.registerNewKeywordsFromSelector("NSTextView", b"initUsingTextLayoutManager:")
objc.registerNewKeywordsFromSelector("NSTextView", b"initWithCoder:")
objc.registerNewKeywordsFromSelector("NSTextView", b"initWithFrame:")
objc.registerNewKeywordsFromSelector("NSTextView", b"initWithFrame:textContainer:")
objc.registerNewKeywordsFromSelector(
    "NSTextViewportLayoutController", b"initWithTextLayoutManager:"
)
objc.registerNewKeywordsFromSelector("NSToolbar", b"initWithIdentifier:")
objc.registerNewKeywordsFromSelector("NSToolbarItem", b"initWithItemIdentifier:")
objc.registerNewKeywordsFromSelector("NSTouchBar", b"initWithCoder:")
objc.registerNewKeywordsFromSelector("NSTouchBarItem", b"initWithCoder:")
objc.registerNewKeywordsFromSelector("NSTouchBarItem", b"initWithIdentifier:")
objc.registerNewKeywordsFromSelector(
    "NSTrackingArea", b"initWithRect:options:owner:userInfo:"
)
objc.registerNewKeywordsFromSelector("NSTreeNode", b"initWithRepresentedObject:")
objc.registerNewKeywordsFromSelector("NSUserDefaultsController", b"initWithCoder:")
objc.registerNewKeywordsFromSelector(
    "NSUserDefaultsController", b"initWithDefaults:initialValues:"
)
objc.registerNewKeywordsFromSelector(
    "NSUserInterfaceCompressionOptions", b"initWithCoder:"
)
objc.registerNewKeywordsFromSelector(
    "NSUserInterfaceCompressionOptions", b"initWithCompressionOptions:"
)
objc.registerNewKeywordsFromSelector(
    "NSUserInterfaceCompressionOptions", b"initWithIdentifier:"
)
objc.registerNewKeywordsFromSelector("NSView", b"initWithCoder:")
objc.registerNewKeywordsFromSelector("NSView", b"initWithFrame:")
objc.registerNewKeywordsFromSelector("NSViewAnimation", b"initWithViewAnimations:")
objc.registerNewKeywordsFromSelector("NSViewController", b"initWithCoder:")
objc.registerNewKeywordsFromSelector("NSViewController", b"initWithNibName:bundle:")
objc.registerNewKeywordsFromSelector("NSWindow", b"initWithCoder:")
objc.registerNewKeywordsFromSelector(
    "NSWindow", b"initWithContentRect:styleMask:backing:defer:"
)
objc.registerNewKeywordsFromSelector(
    "NSWindow", b"initWithContentRect:styleMask:backing:defer:screen:"
)
objc.registerNewKeywordsFromSelector("NSWindow", b"initWithWindowRef:")
objc.registerNewKeywordsFromSelector("NSWindowController", b"initWithCoder:")
objc.registerNewKeywordsFromSelector("NSWindowController", b"initWithWindow:")
objc.registerNewKeywordsFromSelector("NSWindowController", b"initWithWindowNibName:")
objc.registerNewKeywordsFromSelector(
    "NSWindowController", b"initWithWindowNibName:owner:"
)
objc.registerNewKeywordsFromSelector(
    "NSWindowController", b"initWithWindowNibPath:owner:"
)
objc.registerNewKeywordsFromSelector("null", b"initWithBitmapImageRep:")
objc.registerNewKeywordsFromSelector("null", b"initWithColor:")
objc.registerNewKeywordsFromSelector("null", b"initWithContentsOfFile:ofType:")
objc.registerNewKeywordsFromSelector("null", b"initWithContentsOfURL:")
objc.registerNewKeywordsFromSelector("null", b"initWithContentsOfURL:ofType:")
objc.registerNewKeywordsFromSelector("null", b"initWithIconRef:")
objc.registerNewKeywordsFromSelector(
    "null", b"initWithImage:foregroundColorHint:backgroundColorHint:hotSpot:"
)
objc.registerNewKeywordsFromSelector("null", b"initWithWindowRef:")
protocols = {
    "NSSavePanelDelegateDeprecated": objc.informal_protocol(
        "NSSavePanelDelegateDeprecated",
        [
            objc.selector(
                None,
                b"panel:compareFilename:with:caseSensitive:",
                b"q@:@@@Z",
                isRequired=False,
            ),
            objc.selector(
                None, b"panel:directoryDidChange:", b"v@:@@", isRequired=False
            ),
            objc.selector(
                None, b"panel:shouldShowFilename:", b"Z@:@@", isRequired=False
            ),
            objc.selector(None, b"panel:isValidFilename:", b"Z@:@@", isRequired=False),
        ],
    ),
    "NSAccessibilityAdditions": objc.informal_protocol(
        "NSAccessibilityAdditions",
        [
            objc.selector(
                None,
                b"accessibilitySetOverrideValue:forAttribute:",
                b"Z@:@@",
                isRequired=False,
            )
        ],
    ),
    "NSApplicationScriptingDelegation": objc.informal_protocol(
        "NSApplicationScriptingDelegation",
        [
            objc.selector(
                None, b"application:delegateHandlesKey:", b"Z@:@@", isRequired=False
            )
        ],
    ),
    "NSNibAwaking": objc.informal_protocol(
        "NSNibAwaking",
        [
            objc.selector(None, b"awakeFromNib", b"v@:", isRequired=False),
            objc.selector(
                None, b"prepareForInterfaceBuilder", b"v@:", isRequired=False
            ),
        ],
    ),
    "NSToolTipOwner": objc.informal_protocol(
        "NSToolTipOwner",
        [
            objc.selector(
                None,
                b"view:stringForToolTip:point:userData:",
                b"@@:@q{CGPoint=dd}^v",
                isRequired=False,
            )
        ],
    ),
    "NSDraggingDestination": objc.informal_protocol(
        "NSDraggingDestination",
        [
            objc.selector(None, b"draggingEntered:", b"Q@:@", isRequired=False),
            objc.selector(None, b"draggingUpdated:", b"Q@:@", isRequired=False),
            objc.selector(None, b"draggingExited:", b"v@:@", isRequired=False),
            objc.selector(None, b"prepareForDragOperation:", b"Z@:@", isRequired=False),
            objc.selector(None, b"performDragOperation:", b"Z@:@", isRequired=False),
            objc.selector(None, b"concludeDragOperation:", b"v@:@", isRequired=False),
            objc.selector(None, b"draggingEnded:", b"v@:@", isRequired=False),
            objc.selector(
                None, b"wantsPeriodicDraggingUpdates", b"Z@:", isRequired=False
            ),
        ],
    ),
    "NSOutlineViewNotifications": objc.informal_protocol(
        "NSOutlineViewNotifications",
        [
            objc.selector(
                None, b"outlineViewSelectionDidChange:", b"v@:@", isRequired=False
            ),
            objc.selector(
                None, b"outlineViewColumnDidMove:", b"v@:@", isRequired=False
            ),
            objc.selector(
                None, b"outlineViewColumnDidResize:", b"v@:@", isRequired=False
            ),
            objc.selector(
                None, b"outlineViewSelectionIsChanging:", b"v@:@", isRequired=False
            ),
            objc.selector(
                None, b"outlineViewItemWillExpand:", b"v@:@", isRequired=False
            ),
            objc.selector(
                None, b"outlineViewItemDidExpand:", b"v@:@", isRequired=False
            ),
            objc.selector(
                None, b"outlineViewItemWillCollapse:", b"v@:@", isRequired=False
            ),
            objc.selector(
                None, b"outlineViewItemDidCollapse:", b"v@:@", isRequired=False
            ),
        ],
    ),
    "NSDraggingSource": objc.informal_protocol(
        "NSDraggingSource",
        [
            objc.selector(
                None, b"draggingSourceOperationMaskForLocal:", b"Q@:Z", isRequired=False
            ),
            objc.selector(
                None,
                b"namesOfPromisedFilesDroppedAtDestination:",
                b"@@:@",
                isRequired=False,
            ),
            objc.selector(
                None, b"draggedImage:beganAt:", b"v@:@{CGPoint=dd}", isRequired=False
            ),
            objc.selector(
                None,
                b"draggedImage:endedAt:operation:",
                b"v@:@{CGPoint=dd}Q",
                isRequired=False,
            ),
            objc.selector(
                None, b"draggedImage:movedTo:", b"v@:@{CGPoint=dd}", isRequired=False
            ),
            objc.selector(
                None, b"ignoreModifierKeysWhileDragging", b"Z@:", isRequired=False
            ),
        ],
    ),
    "NSPasteboardOwner": objc.informal_protocol(
        "NSPasteboardOwner",
        [
            objc.selector(
                None, b"pasteboard:provideDataForType:", b"v@:@@", isRequired=False
            ),
            objc.selector(None, b"pasteboardChangedOwner:", b"v@:@", isRequired=False),
        ],
    ),
    "NSAccessibility": objc.informal_protocol(
        "NSAccessibility",
        [
            objc.selector(
                None, b"accessibilityAttributeValue:", b"@@:@", isRequired=False
            ),
            objc.selector(
                None,
                b"accessibilityParameterizedAttributeNames",
                b"@@:",
                isRequired=False,
            ),
            objc.selector(
                None, b"accessibilityArrayAttributeCount:", b"Q@:@", isRequired=False
            ),
            objc.selector(
                None, b"accessibilityIsAttributeSettable:", b"Z@:@", isRequired=False
            ),
            objc.selector(
                None,
                b"accessibilityAttributeValue:forParameter:",
                b"@@:@@",
                isRequired=False,
            ),
            objc.selector(
                None,
                b"accessibilityArrayAttributeValues:index:maxCount:",
                b"@@:@QQ",
                isRequired=False,
            ),
            objc.selector(None, b"accessibilityActionNames", b"@@:", isRequired=False),
            objc.selector(
                None, b"accessibilityAttributeNames", b"@@:", isRequired=False
            ),
            objc.selector(
                None, b"accessibilityNotifiesWhenDestroyed", b"Z@:", isRequired=False
            ),
            objc.selector(
                None, b"accessibilityIndexOfChild:", b"Q@:@", isRequired=False
            ),
            objc.selector(
                None, b"accessibilityPerformAction:", b"v@:@", isRequired=False
            ),
            objc.selector(None, b"accessibilityIsIgnored", b"Z@:", isRequired=False),
            objc.selector(
                None, b"accessibilityActionDescription:", b"@@:@", isRequired=False
            ),
            objc.selector(
                None, b"accessibilityHitTest:", b"@@:{CGPoint=dd}", isRequired=False
            ),
            objc.selector(
                None, b"accessibilitySetValue:forAttribute:", b"v@:@@", isRequired=False
            ),
            objc.selector(
                None, b"accessibilityFocusedUIElement", b"@@:", isRequired=False
            ),
        ],
    ),
    "NSRulerMarkerClientViewDelegation": objc.informal_protocol(
        "NSRulerMarkerClientViewDelegation",
        [
            objc.selector(
                None, b"rulerView:didRemoveMarker:", b"v@:@@", isRequired=False
            ),
            objc.selector(
                None, b"rulerView:shouldRemoveMarker:", b"Z@:@@", isRequired=False
            ),
            objc.selector(
                None, b"rulerView:shouldMoveMarker:", b"Z@:@@", isRequired=False
            ),
            objc.selector(
                None,
                b"rulerView:locationForPoint:",
                b"d@:@{CGPoint=dd}",
                isRequired=False,
            ),
            objc.selector(
                None,
                b"rulerView:willAddMarker:atLocation:",
                b"d@:@@d",
                isRequired=False,
            ),
            objc.selector(
                None, b"rulerView:didMoveMarker:", b"v@:@@", isRequired=False
            ),
            objc.selector(
                None,
                b"rulerView:pointForLocation:",
                b"{CGPoint=dd}@:@d",
                isRequired=False,
            ),
            objc.selector(
                None, b"rulerView:handleMouseDown:", b"v@:@@", isRequired=False
            ),
            objc.selector(
                None,
                b"rulerView:willMoveMarker:toLocation:",
                b"d@:@@d",
                isRequired=False,
            ),
            objc.selector(None, b"rulerView:didAddMarker:", b"v@:@@", isRequired=False),
            objc.selector(
                None, b"rulerView:shouldAddMarker:", b"Z@:@@", isRequired=False
            ),
            objc.selector(
                None, b"rulerView:willSetClientView:", b"v@:@@", isRequired=False
            ),
        ],
    ),
    "NSFontPanelValidationAdditions": objc.informal_protocol(
        "NSFontPanelValidationAdditions",
        [objc.selector(None, b"validModesForFontPanel:", b"Q@:@", isRequired=False)],
    ),
    "NSToolbarItemValidation": objc.informal_protocol(
        "NSToolbarItemValidation",
        [objc.selector(None, b"validateToolbarItem:", b"Z@:@", isRequired=False)],
    ),
    "NSKeyValueBindingCreation": objc.informal_protocol(
        "NSKeyValueBindingCreation",
        [
            objc.selector(
                None,
                b"bind:toObject:withKeyPath:options:",
                b"v@:@@@@",
                isRequired=False,
            ),
            objc.selector(None, b"exposeBinding:", b"v@:@", isRequired=False),
            objc.selector(None, b"valueClassForBinding:", b"#@:@", isRequired=False),
            objc.selector(None, b"unbind:", b"v@:@", isRequired=False),
            objc.selector(None, b"infoForBinding:", b"@@:@", isRequired=False),
            objc.selector(None, b"exposedBindings", b"@@:", isRequired=False),
            objc.selector(
                None, b"optionDescriptionsForBinding:", b"@@:@", isRequired=False
            ),
        ],
    ),
    "NSDictionaryControllerKeyValuePair": objc.informal_protocol(
        "NSDictionaryControllerKeyValuePair",
        [
            objc.selector(None, b"setKey:", b"v@:@", isRequired=False),
            objc.selector(None, b"setLocalizedKey:", b"v@:@", isRequired=False),
            objc.selector(None, b"value", b"@@:", isRequired=False),
            objc.selector(None, b"isExplicitlyIncluded", b"Z@:", isRequired=False),
            objc.selector(None, b"setValue:", b"v@:@", isRequired=False),
            objc.selector(None, b"key", b"@@:", isRequired=False),
            objc.selector(None, b"localizedKey", b"@@:", isRequired=False),
        ],
    ),
    "NSEditor": objc.informal_protocol(
        "NSEditor",
        [
            objc.selector(None, b"discardEditing", b"v@:", isRequired=False),
            objc.selector(None, b"commitEditing", b"Z@:", isRequired=False),
            objc.selector(
                None,
                b"commitEditingWithDelegate:didCommitSelector:contextInfo:",
                b"v@:@:^v",
                isRequired=False,
            ),
            objc.selector(
                None, b"commitEditingAndReturnError:", b"Z@:^@", isRequired=False
            ),
        ],
    ),
    "NSFontManagerDelegate": objc.informal_protocol(
        "NSFontManagerDelegate",
        [
            objc.selector(
                None, b"fontManager:willIncludeFont:", b"Z@:@@", isRequired=False
            )
        ],
    ),
    "NSControlSubclassNotifications": objc.informal_protocol(
        "NSControlSubclassNotifications",
        [
            objc.selector(None, b"controlTextDidChange:", b"v@:@", isRequired=False),
            objc.selector(
                None, b"controlTextDidBeginEditing:", b"v@:@", isRequired=False
            ),
            objc.selector(
                None, b"controlTextDidEndEditing:", b"v@:@", isRequired=False
            ),
        ],
    ),
    "NSServicesRequests": objc.informal_protocol(
        "NSServicesRequests",
        [
            objc.selector(
                None, b"readSelectionFromPasteboard:", b"Z@:@", isRequired=False
            ),
            objc.selector(
                None, b"writeSelectionToPasteboard:types:", b"Z@:@@", isRequired=False
            ),
        ],
    ),
    "NSTableViewDataSourceDeprecated": objc.informal_protocol(
        "NSTableViewDataSourceDeprecated",
        [
            objc.selector(
                None, b"tableView:writeRows:toPasteboard:", b"Z@:@@@", isRequired=False
            )
        ],
    ),
    "NSPlaceholders": objc.informal_protocol(
        "NSPlaceholders",
        [
            objc.selector(
                None,
                b"setDefaultPlaceholder:forMarker:withBinding:",
                b"v@:@@@",
                isRequired=False,
            ),
            objc.selector(
                None,
                b"defaultPlaceholderForMarker:withBinding:",
                b"@@:@@",
                isRequired=False,
            ),
        ],
    ),
    "NSDeprecatedTextStorageDelegateInterface": objc.informal_protocol(
        "NSDeprecatedTextStorageDelegateInterface",
        [
            objc.selector(
                None, b"textStorageWillProcessEditing:", b"v@:@", isRequired=False
            ),
            objc.selector(
                None, b"textStorageDidProcessEditing:", b"v@:@", isRequired=False
            ),
        ],
    ),
    "NSDraggingSourceDeprecated": objc.informal_protocol(
        "NSDraggingSourceDeprecated",
        [
            objc.selector(
                None,
                b"namesOfPromisedFilesDroppedAtDestination:",
                b"@@:@",
                isRequired=False,
            ),
            objc.selector(
                None,
                b"draggedImage:endedAt:operation:",
                b"v@:@{CGPoint=dd}Q",
                isRequired=False,
            ),
            objc.selector(
                None, b"draggedImage:beganAt:", b"v@:@{CGPoint=dd}", isRequired=False
            ),
            objc.selector(
                None,
                b"draggedImage:endedAt:deposited:",
                b"v@:@{CGPoint=dd}Z",
                isRequired=False,
            ),
            objc.selector(
                None, b"draggingSourceOperationMaskForLocal:", b"Q@:Z", isRequired=False
            ),
            objc.selector(
                None, b"draggedImage:movedTo:", b"v@:@{CGPoint=dd}", isRequired=False
            ),
            objc.selector(
                None, b"ignoreModifierKeysWhileDragging", b"Z@:", isRequired=False
            ),
        ],
    ),
    "NSColorPanelResponderMethod": objc.informal_protocol(
        "NSColorPanelResponderMethod",
        [objc.selector(None, b"changeColor:", b"v@:@", isRequired=False)],
    ),
    "NSMenuValidation": objc.informal_protocol(
        "NSMenuValidation",
        [objc.selector(None, b"validateMenuItem:", b"Z@:@", isRequired=False)],
    ),
    "NSEditorRegistration": objc.informal_protocol(
        "NSEditorRegistration",
        [
            objc.selector(None, b"objectDidEndEditing:", b"v@:@", isRequired=False),
            objc.selector(None, b"objectDidBeginEditing:", b"v@:@", isRequired=False),
        ],
    ),
    "NSFontManagerResponderMethod": objc.informal_protocol(
        "NSFontManagerResponderMethod",
        [objc.selector(None, b"changeFont:", b"v@:@", isRequired=False)],
    ),
    "NSLayerDelegateContentsScaleUpdating": objc.informal_protocol(
        "NSLayerDelegateContentsScaleUpdating",
        [
            objc.selector(
                None,
                b"layer:shouldInheritContentsScale:fromWindow:",
                b"Z@:@d@",
                isRequired=False,
            )
        ],
    ),
}
expressions = {}

# END OF FILE
