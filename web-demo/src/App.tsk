import React, { useState, useRef } from 'react';

// Replace with your actual service/characteristic UUIDs
const AUDIO_SERVICE_UUID = '0000abcd-0000-1000-8000-00805f9b34fb';
const AUDIO_CHARACTERISTIC_UUID = '0000dcba-0000-1000-8000-00805f9b34fb';

const App: React.FC = () => {
  const [connecting, setConnecting] = useState(false);
  const audioCtxRef = useRef<AudioContext>();

  const connectAndStream = async () => {
    setConnecting(true);

    try {
      // 1. Request device
      const device = await navigator.bluetooth.requestDevice({
        filters: [{ namePrefix: 'Omi' }],
        optionalServices: [AUDIO_SERVICE_UUID]
      });

      // 2. Connect GATT
      const server = await device.gatt!.connect();

      // 3. Get service + characteristic
      const service = await server.getPrimaryService(AUDIO_SERVICE_UUID);
      const char = await service.getCharacteristic(AUDIO_CHARACTERISTIC_UUID);

      // 4. Start notifications
      await char.startNotifications();

      // 5. Setup Web Audio
      const audioCtx = new AudioContext();
      audioCtxRef.current = audioCtx;

      char.addEventListener('characteristicvaluechanged', (event) => {
        const value = (event.target as BluetoothRemoteGATTCharacteristic).value;
        if (!value || !audioCtxRef.current) return;

        // Example: decode raw PCM 16-bit little-endian samples
        const sampleCount = value.byteLength / 2;
        const samples = new Float32Array(sampleCount);
        for (let i = 0; i < sampleCount; i++) {
          const int16 = value.getInt16(i * 2, true);
          samples[i] = int16 / 32768;
        }

        // Create buffer and play
        const buffer = audioCtxRef.current.createBuffer(1, samples.length, audioCtxRef.current.sampleRate);
        buffer.copyToChannel(samples, 0);
        const src = audioCtxRef.current.createBufferSource();
        src.buffer = buffer;
        src.connect(audioCtxRef.current.destination);
        src.start();
      });

    } catch (err) {
      console.error('Connection failed', err);
    } finally {
      setConnecting(false);
    }
  };

  return (
    <div style={{ padding: 20, fontFamily: 'sans-serif' }}>
      <h1>Omi Web Bluetooth Demo</h1>
      <button onClick={connectAndStream} disabled={connecting}>
        {connecting ? 'Connecting...' : 'Connect & Stream Audio'}
      </button>
    </div>
  );
};

export default App;
